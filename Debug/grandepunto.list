
grandepunto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08006ca0  08006ca0  00016ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e4  080070e4  0002029c  2**0
                  CONTENTS
  4 .ARM          00000000  080070e4  080070e4  0002029c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070e4  080070e4  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  080070ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000029c  08007388  0002029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08007388  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b68  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000237e  00000000  00000000  00030e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  000331b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e18  00000000  00000000  000340e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f148  00000000  00000000  00034f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd1e  00000000  00000000  00054048  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b49c7  00000000  00000000  0005fd66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011472d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b4c  00000000  00000000  001147a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000029c 	.word	0x2000029c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c88 	.word	0x08006c88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002a0 	.word	0x200002a0
 80001dc:	08006c88 	.word	0x08006c88

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80002b4:	f001 f830 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f8ba 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 fa00 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002c0:	f000 f9cc 	bl	800065c <MX_USART2_UART_Init>
  MX_CAN_Init();
 80002c4:	f000 f918 	bl	80004f8 <MX_CAN_Init>
  MX_TIM6_Init();
 80002c8:	f000 f950 	bl	800056c <MX_TIM6_Init>
  MX_TIM7_Init();
 80002cc:	f000 f98a 	bl	80005e4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Conifg();
 80002d0:	f000 fb5e 	bl	8000990 <CAN_Filter_Conifg>

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING  | CAN_IT_BUSOFF) != HAL_OK )
 80002d4:	f240 4103 	movw	r1, #1027	; 0x403
 80002d8:	483f      	ldr	r0, [pc, #252]	; (80003d8 <main+0x128>)
 80002da:	f001 fc9b 	bl	8001c14 <HAL_CAN_ActivateNotification>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d002      	beq.n	80002ea <main+0x3a>
  {
	  Error_Handler("CAN interrupts activation error");
 80002e4:	483d      	ldr	r0, [pc, #244]	; (80003dc <main+0x12c>)
 80002e6:	f000 fc11 	bl	8000b0c <Error_Handler>
  }

  if ((HAL_CAN_Start(&hcan)) != HAL_OK)
 80002ea:	483b      	ldr	r0, [pc, #236]	; (80003d8 <main+0x128>)
 80002ec:	f001 fa61 	bl	80017b2 <HAL_CAN_Start>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d002      	beq.n	80002fc <main+0x4c>
  {
	  Error_Handler("CAN start error");
 80002f6:	483a      	ldr	r0, [pc, #232]	; (80003e0 <main+0x130>)
 80002f8:	f000 fc08 	bl	8000b0c <Error_Handler>
  }

HAL_UART_Receive_IT(&huart2, &rcvd_data, 1); // przerwanie obslugujÄ…ce wiadomosci przychodzace po UART.
 80002fc:	2201      	movs	r2, #1
 80002fe:	4939      	ldr	r1, [pc, #228]	; (80003e4 <main+0x134>)
 8000300:	4839      	ldr	r0, [pc, #228]	; (80003e8 <main+0x138>)
 8000302:	f004 f90f 	bl	8004524 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	CAN_Tx(IPC_StatusBCM.ID, IPC_StatusBCM.DLC, IPC_StatusBCM.CAN_Tx);
 8000306:	4b39      	ldr	r3, [pc, #228]	; (80003ec <main+0x13c>)
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <main+0x13c>)
 800030c:	791b      	ldrb	r3, [r3, #4]
 800030e:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <main+0x140>)
 8000310:	4619      	mov	r1, r3
 8000312:	f000 faa1 	bl	8000858 <CAN_Tx>
	HAL_Delay(50);
 8000316:	2032      	movs	r0, #50	; 0x32
 8000318:	f001 f864 	bl	80013e4 <HAL_Delay>

	CAN_Tx(IPC_SeatBelts.ID, IPC_SeatBelts.DLC, IPC_SeatBelts.CAN_Tx);
 800031c:	4b35      	ldr	r3, [pc, #212]	; (80003f4 <main+0x144>)
 800031e:	6818      	ldr	r0, [r3, #0]
 8000320:	4b34      	ldr	r3, [pc, #208]	; (80003f4 <main+0x144>)
 8000322:	791b      	ldrb	r3, [r3, #4]
 8000324:	4a34      	ldr	r2, [pc, #208]	; (80003f8 <main+0x148>)
 8000326:	4619      	mov	r1, r3
 8000328:	f000 fa96 	bl	8000858 <CAN_Tx>
	HAL_Delay(50);
 800032c:	2032      	movs	r0, #50	; 0x32
 800032e:	f001 f859 	bl	80013e4 <HAL_Delay>

	CAN_Tx(IPC_EngineInfo.ID, IPC_EngineInfo.DLC, IPC_EngineInfo.CAN_Tx);
 8000332:	4b32      	ldr	r3, [pc, #200]	; (80003fc <main+0x14c>)
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	4b31      	ldr	r3, [pc, #196]	; (80003fc <main+0x14c>)
 8000338:	791b      	ldrb	r3, [r3, #4]
 800033a:	4a31      	ldr	r2, [pc, #196]	; (8000400 <main+0x150>)
 800033c:	4619      	mov	r1, r3
 800033e:	f000 fa8b 	bl	8000858 <CAN_Tx>
	HAL_Delay(50);
 8000342:	2032      	movs	r0, #50	; 0x32
 8000344:	f001 f84e 	bl	80013e4 <HAL_Delay>

	CAN_Tx(IPC_StatusB_EPS.ID, IPC_StatusB_EPS.DLC, IPC_StatusB_EPS.CAN_Tx);
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <main+0x154>)
 800034a:	6818      	ldr	r0, [r3, #0]
 800034c:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <main+0x154>)
 800034e:	791b      	ldrb	r3, [r3, #4]
 8000350:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <main+0x158>)
 8000352:	4619      	mov	r1, r3
 8000354:	f000 fa80 	bl	8000858 <CAN_Tx>
	HAL_Delay(50);
 8000358:	2032      	movs	r0, #50	; 0x32
 800035a:	f001 f843 	bl	80013e4 <HAL_Delay>

	CAN_Tx(IPC_StatusB_BSM.ID, IPC_StatusB_BSM.DLC, IPC_StatusB_BSM.CAN_Tx);
 800035e:	4b2b      	ldr	r3, [pc, #172]	; (800040c <main+0x15c>)
 8000360:	6818      	ldr	r0, [r3, #0]
 8000362:	4b2a      	ldr	r3, [pc, #168]	; (800040c <main+0x15c>)
 8000364:	791b      	ldrb	r3, [r3, #4]
 8000366:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <main+0x160>)
 8000368:	4619      	mov	r1, r3
 800036a:	f000 fa75 	bl	8000858 <CAN_Tx>
	HAL_Delay(50);
 800036e:	2032      	movs	r0, #50	; 0x32
 8000370:	f001 f838 	bl	80013e4 <HAL_Delay>

	CAN_Tx(IPC_SpeedOdometerInfo.ID, IPC_SpeedOdometerInfo.DLC, IPC_SpeedOdometerInfo.CAN_Tx);
 8000374:	4b27      	ldr	r3, [pc, #156]	; (8000414 <main+0x164>)
 8000376:	6818      	ldr	r0, [r3, #0]
 8000378:	4b26      	ldr	r3, [pc, #152]	; (8000414 <main+0x164>)
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	4a26      	ldr	r2, [pc, #152]	; (8000418 <main+0x168>)
 800037e:	4619      	mov	r1, r3
 8000380:	f000 fa6a 	bl	8000858 <CAN_Tx>
	HAL_Delay(50);
 8000384:	2032      	movs	r0, #50	; 0x32
 8000386:	f001 f82d 	bl	80013e4 <HAL_Delay>

	CAN_Tx(IPC_Ligths.ID, IPC_Ligths.DLC, IPC_Ligths.CAN_Tx);
 800038a:	4b24      	ldr	r3, [pc, #144]	; (800041c <main+0x16c>)
 800038c:	6818      	ldr	r0, [r3, #0]
 800038e:	4b23      	ldr	r3, [pc, #140]	; (800041c <main+0x16c>)
 8000390:	791b      	ldrb	r3, [r3, #4]
 8000392:	4a23      	ldr	r2, [pc, #140]	; (8000420 <main+0x170>)
 8000394:	4619      	mov	r1, r3
 8000396:	f000 fa5f 	bl	8000858 <CAN_Tx>
	HAL_Delay(50);
 800039a:	2032      	movs	r0, #50	; 0x32
 800039c:	f001 f822 	bl	80013e4 <HAL_Delay>

	CAN_Tx(IPC_HeartBeat.ID, IPC_HeartBeat.DLC, IPC_HeartBeat.CAN_Tx);
 80003a0:	4b20      	ldr	r3, [pc, #128]	; (8000424 <main+0x174>)
 80003a2:	6818      	ldr	r0, [r3, #0]
 80003a4:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <main+0x174>)
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	4a1f      	ldr	r2, [pc, #124]	; (8000428 <main+0x178>)
 80003aa:	4619      	mov	r1, r3
 80003ac:	f000 fa54 	bl	8000858 <CAN_Tx>
	HAL_Delay(50);
 80003b0:	2032      	movs	r0, #50	; 0x32
 80003b2:	f001 f817 	bl	80013e4 <HAL_Delay>

	HAL_Delay(20);
 80003b6:	2014      	movs	r0, #20
 80003b8:	f001 f814 	bl	80013e4 <HAL_Delay>

		Print_CAN_Frame("Tx", IPC_Ligths.ID, IPC_Ligths.DLC, IPC_Ligths.CAN_Tx);
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <main+0x16c>)
 80003be:	6819      	ldr	r1, [r3, #0]
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <main+0x16c>)
 80003c2:	791b      	ldrb	r3, [r3, #4]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b16      	ldr	r3, [pc, #88]	; (8000420 <main+0x170>)
 80003c8:	4818      	ldr	r0, [pc, #96]	; (800042c <main+0x17c>)
 80003ca:	f000 f9e1 	bl	8000790 <Print_CAN_Frame>
		HAL_Delay(1000);
 80003ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d2:	f001 f807 	bl	80013e4 <HAL_Delay>
	CAN_Tx(IPC_StatusBCM.ID, IPC_StatusBCM.DLC, IPC_StatusBCM.CAN_Tx);
 80003d6:	e796      	b.n	8000306 <main+0x56>
 80003d8:	200002dc 	.word	0x200002dc
 80003dc:	08006ca0 	.word	0x08006ca0
 80003e0:	08006cc0 	.word	0x08006cc0
 80003e4:	2000031c 	.word	0x2000031c
 80003e8:	20000378 	.word	0x20000378
 80003ec:	20000030 	.word	0x20000030
 80003f0:	20000035 	.word	0x20000035
 80003f4:	20000048 	.word	0x20000048
 80003f8:	2000004d 	.word	0x2000004d
 80003fc:	20000060 	.word	0x20000060
 8000400:	20000065 	.word	0x20000065
 8000404:	200000a8 	.word	0x200000a8
 8000408:	200000ad 	.word	0x200000ad
 800040c:	20000078 	.word	0x20000078
 8000410:	2000007d 	.word	0x2000007d
 8000414:	20000018 	.word	0x20000018
 8000418:	2000001d 	.word	0x2000001d
 800041c:	20000000 	.word	0x20000000
 8000420:	20000005 	.word	0x20000005
 8000424:	20000090 	.word	0x20000090
 8000428:	20000095 	.word	0x20000095
 800042c:	08006cd0 	.word	0x08006cd0

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b0a6      	sub	sp, #152	; 0x98
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800043a:	2228      	movs	r2, #40	; 0x28
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f004 ff80 	bl	8005344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2258      	movs	r2, #88	; 0x58
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f004 ff72 	bl	8005344 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000460:	2301      	movs	r3, #1
 8000462:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000468:	677b      	str	r3, [r7, #116]	; 0x74
//  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
//  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046a:	2302      	movs	r3, #2
 800046c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000474:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000478:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800047c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800048a:	4618      	mov	r0, r3
 800048c:	f002 f8e8 	bl	8002660 <HAL_RCC_OscConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d002      	beq.n	800049c <SystemClock_Config+0x6c>
  {
    Error_Handler("System Clock initialization error");
 8000496:	4816      	ldr	r0, [pc, #88]	; (80004f0 <SystemClock_Config+0xc0>)
 8000498:	f000 fb38 	bl	8000b0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049c:	230f      	movs	r3, #15
 800049e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a0:	2302      	movs	r3, #2
 80004a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80004ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004b8:	2102      	movs	r1, #2
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 ffe6 	bl	800348c <HAL_RCC_ClockConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <SystemClock_Config+0x9c>
  {
    Error_Handler("System Clock Config error");
 80004c6:	480b      	ldr	r0, [pc, #44]	; (80004f4 <SystemClock_Config+0xc4>)
 80004c8:	f000 fb20 	bl	8000b0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004cc:	2302      	movs	r3, #2
 80004ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 fa0e 	bl	80038f8 <HAL_RCCEx_PeriphCLKConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d002      	beq.n	80004e8 <SystemClock_Config+0xb8>
  {
	  Error_Handler("System Clock Config error");
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <SystemClock_Config+0xc4>)
 80004e4:	f000 fb12 	bl	8000b0c <Error_Handler>
  }
}
 80004e8:	bf00      	nop
 80004ea:	3798      	adds	r7, #152	; 0x98
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	08006cd4 	.word	0x08006cd4
 80004f4:	08006cf8 	.word	0x08006cf8

080004f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	/**
	 *  DWI: Paramters described below are based on http://www.bittiming.can-wiki.info/
	 *  Paramters were adjusted for CAN LowSpeed Network in FIAT GRANDE PUNTO: 50kbps
	 */
	 
  hcan.Instance = CAN;
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_CAN_Init+0x68>)
 80004fe:	4a19      	ldr	r2, [pc, #100]	; (8000564 <MX_CAN_Init+0x6c>)
 8000500:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 45;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_CAN_Init+0x68>)
 8000504:	222d      	movs	r2, #45	; 0x2d
 8000506:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_CAN_Init+0x68>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_CAN_Init+0x68>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_CAN_Init+0x68>)
 8000516:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800051a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <MX_CAN_Init+0x68>)
 800051e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000522:	615a      	str	r2, [r3, #20]
  /* USER CODE END CAN_Init 1 */
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_CAN_Init+0x68>)
 8000526:	2200      	movs	r2, #0
 8000528:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_CAN_Init+0x68>)
 800052c:	2200      	movs	r2, #0
 800052e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_CAN_Init+0x68>)
 8000532:	2200      	movs	r2, #0
 8000534:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <MX_CAN_Init+0x68>)
 8000538:	2200      	movs	r2, #0
 800053a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE; // DWI: New message will overwrite existing message in FIFO memory
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_CAN_Init+0x68>)
 800053e:	2200      	movs	r2, #0
 8000540:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE; // DWI: Priority driven by the identifier of the message
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <MX_CAN_Init+0x68>)
 8000544:	2200      	movs	r2, #0
 8000546:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_CAN_Init+0x68>)
 800054a:	f000 ff6d 	bl	8001428 <HAL_CAN_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d002      	beq.n	800055a <MX_CAN_Init+0x62>
  {
    Error_Handler("CAN initialization error");
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_CAN_Init+0x70>)
 8000556:	f000 fad9 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200002dc 	.word	0x200002dc
 8000564:	40006400 	.word	0x40006400
 8000568:	08006d14 	.word	0x08006d14

0800056c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_TIM6_Init+0x68>)
 800057e:	4a16      	ldr	r2, [pc, #88]	; (80005d8 <MX_TIM6_Init+0x6c>)
 8000580:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_TIM6_Init+0x68>)
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_TIM6_Init+0x68>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_TIM6_Init+0x68>)
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_TIM6_Init+0x68>)
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800059a:	480e      	ldr	r0, [pc, #56]	; (80005d4 <MX_TIM6_Init+0x68>)
 800059c:	f003 fbca 	bl	8003d34 <HAL_TIM_Base_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d002      	beq.n	80005ac <MX_TIM6_Init+0x40>
  {
    Error_Handler("TIMER 6 initialization error");
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_TIM6_Init+0x70>)
 80005a8:	f000 fab0 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <MX_TIM6_Init+0x68>)
 80005ba:	f003 fdcb 	bl	8004154 <HAL_TIMEx_MasterConfigSynchronization>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <MX_TIM6_Init+0x5e>
  {
	Error_Handler("TIMER 6 configuration error");
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <MX_TIM6_Init+0x74>)
 80005c6:	f000 faa1 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000338 	.word	0x20000338
 80005d8:	40001000 	.word	0x40001000
 80005dc:	08006d30 	.word	0x08006d30
 80005e0:	08006d50 	.word	0x08006d50

080005e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_TIM7_Init+0x68>)
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <MX_TIM7_Init+0x6c>)
 80005f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_TIM7_Init+0x68>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_TIM7_Init+0x68>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_TIM7_Init+0x68>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_TIM7_Init+0x68>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <MX_TIM7_Init+0x68>)
 8000614:	f003 fb8e 	bl	8003d34 <HAL_TIM_Base_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <MX_TIM7_Init+0x40>
  {
	 Error_Handler("TIMER 7 initialization error");
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <MX_TIM7_Init+0x70>)
 8000620:	f000 fa74 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4619      	mov	r1, r3
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_TIM7_Init+0x68>)
 8000632:	f003 fd8f 	bl	8004154 <HAL_TIMEx_MasterConfigSynchronization>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <MX_TIM7_Init+0x5e>
  {
	  Error_Handler("TIMER 7 configuration error");
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_TIM7_Init+0x74>)
 800063e:	f000 fa65 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200003f8 	.word	0x200003f8
 8000650:	40001400 	.word	0x40001400
 8000654:	08006d6c 	.word	0x08006d6c
 8000658:	08006d8c 	.word	0x08006d8c

0800065c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <MX_USART2_UART_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 80006a0:	f003 fe02 	bl	80042a8 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler("USART 2 initialization error");
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_USART2_UART_Init+0x60>)
 80006ac:	f000 fa2e 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000378 	.word	0x20000378
 80006b8:	40004400 	.word	0x40004400
 80006bc:	08006da8 	.word	0x08006da8

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <MX_GPIO_Init+0xc4>)
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_GPIO_Init+0xc4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2120      	movs	r1, #32
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f001 ff77 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_GPIO_Init+0xc8>)
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_GPIO_Init+0xcc>)
 8000758:	f001 fde0 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800075c:	2320      	movs	r3, #32
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f001 fdd1 	bl	800231c <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	10210000 	.word	0x10210000
 800078c:	48000800 	.word	0x48000800

08000790 <Print_CAN_Frame>:
  * @param CanMsg[] - usefull data of CAN frame
  *
  * @retval Function prints CAN message on UART
  */
void Print_CAN_Frame(char CanFrameName[], uint32_t CanID, uint32_t CanDlc, uint8_t CANmsg[])
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b0a0      	sub	sp, #128	; 0x80
 8000794:	af02      	add	r7, sp, #8
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
	char buffer[100] = {0};
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	2264      	movs	r2, #100	; 0x64
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 fdcc 	bl	8005344 <memset>
	sprintf(buffer,"CAN_%s| ID:0x%02X| DLC:%d| FRAME: ",CanFrameName,(unsigned int)CanID,(unsigned int)CanDlc); // DWI: Initialize first few elements of frame
 80007ac:	f107 0010 	add.w	r0, r7, #16
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	491e      	ldr	r1, [pc, #120]	; (8000834 <Print_CAN_Frame+0xa4>)
 80007ba:	f004 fe2f 	bl	800541c <siprintf>
	for (int i=0; i<CanDlc; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	677b      	str	r3, [r7, #116]	; 0x74
 80007c2:	e013      	b.n	80007ec <Print_CAN_Frame+0x5c>
	{
		sprintf(buffer+strlen(buffer),"%02X ",*(CANmsg+i)); // print all DATA elements one by one
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd13 	bl	80001f4 <strlen>
 80007ce:	4602      	mov	r2, r0
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	1898      	adds	r0, r3, r2
 80007d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	4915      	ldr	r1, [pc, #84]	; (8000838 <Print_CAN_Frame+0xa8>)
 80007e2:	f004 fe1b 	bl	800541c <siprintf>
	for (int i=0; i<CanDlc; i++)
 80007e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007e8:	3301      	adds	r3, #1
 80007ea:	677b      	str	r3, [r7, #116]	; 0x74
 80007ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8e7      	bhi.n	80007c4 <Print_CAN_Frame+0x34>
	}
	sprintf(buffer+strlen(buffer),"\n\r"); // add in the end of each frame new line and ....
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fcfb 	bl	80001f4 <strlen>
 80007fe:	4602      	mov	r2, r0
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4413      	add	r3, r2
 8000806:	4a0d      	ldr	r2, [pc, #52]	; (800083c <Print_CAN_Frame+0xac>)
 8000808:	8811      	ldrh	r1, [r2, #0]
 800080a:	7892      	ldrb	r2, [r2, #2]
 800080c:	8019      	strh	r1, [r3, #0]
 800080e:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fced 	bl	80001f4 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29a      	uxth	r2, r3
 800081e:	f107 0110 	add.w	r1, r7, #16
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <Print_CAN_Frame+0xb0>)
 8000828:	f003 fd8c 	bl	8004344 <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3778      	adds	r7, #120	; 0x78
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08006dc8 	.word	0x08006dc8
 8000838:	08006dec 	.word	0x08006dec
 800083c:	08006df4 	.word	0x08006df4
 8000840:	20000378 	.word	0x20000378

08000844 <HAL_TIM_PeriodElapsedCallback>:
  * @param None
  * @retval None
  */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <CAN_Tx>:
  * @param None
  * @retval None
  */

void CAN_Tx(uint32_t CanID, uint8_t CanDLC, uint8_t CANmsg[])
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	460b      	mov	r3, r1
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	72fb      	strb	r3, [r7, #11]
	uint32_t pTxMailbox;
	CanTxHeader.DLC = CanDLC;
 8000866:	7afb      	ldrb	r3, [r7, #11]
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <CAN_Tx+0x70>)
 800086a:	6113      	str	r3, [r2, #16]
	CanTxHeader.ExtId = CanID;
 800086c:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <CAN_Tx+0x70>)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6053      	str	r3, [r2, #4]
	CanTxHeader.IDE = CAN_ID_EXT;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <CAN_Tx+0x70>)
 8000874:	2204      	movs	r2, #4
 8000876:	609a      	str	r2, [r3, #8]
	CanTxHeader.RTR = CAN_RTR_DATA;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <CAN_Tx+0x70>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]

	if ((HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, CANmsg, &pTxMailbox)) != HAL_OK )
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4910      	ldr	r1, [pc, #64]	; (80008c8 <CAN_Tx+0x70>)
 8000886:	4811      	ldr	r0, [pc, #68]	; (80008cc <CAN_Tx+0x74>)
 8000888:	f000 ffd7 	bl	800183a <HAL_CAN_AddTxMessage>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <CAN_Tx+0x40>
	{
		Error_Handler("CAN TX error");
 8000892:	480f      	ldr	r0, [pc, #60]	; (80008d0 <CAN_Tx+0x78>)
 8000894:	f000 f93a 	bl	8000b0c <Error_Handler>
/* KAPI:
 *  ej, potrzebuje ramki z CANmsg[] do przerwania gdzie mi pisze po UART.
 * wymkiniÅ‚em Å¼eby to przepisywaÄ‡ na chwile do zmiennej globalnej
 * masz jakiÅ› pomysÅ‚ jak to lepiej ogarnac bo teraz jest chyba tak se :/
*/
	for (int i=0; i < CanDLC; i++)
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	e00b      	b.n	80008b6 <CAN_Tx+0x5e>
	{
		CANmsgPrintTx[i] = CANmsg[i]; // DWI: Only copy value of CANmsg to global variable for UART communication purposes.
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	4413      	add	r3, r2
 80008a4:	7819      	ldrb	r1, [r3, #0]
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <CAN_Tx+0x7c>)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	4413      	add	r3, r2
 80008ac:	460a      	mov	r2, r1
 80008ae:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < CanDLC; i++)
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	3301      	adds	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	7afb      	ldrb	r3, [r7, #11]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	dbef      	blt.n	800089e <CAN_Tx+0x46>
	}

//	while(HAL_CAN_IsTxMessagePending(&hcan, pTxMailbox));
//	Print_CAN_Frame("Tx",CanTxHeader.ExtId, CanTxHeader.DLC, CANmsg);

}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000304 	.word	0x20000304
 80008cc:	200002dc 	.word	0x200002dc
 80008d0:	08006df8 	.word	0x08006df8
 80008d4:	200002b8 	.word	0x200002b8

080008d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	if (rcvd_data == '\r') {
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_UART_RxCpltCallback+0x64>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b0d      	cmp	r3, #13
 80008e6:	d116      	bne.n	8000916 <HAL_UART_RxCpltCallback+0x3e>
		data_buffer[count++] = '\r';
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_RxCpltCallback+0x68>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	4914      	ldr	r1, [pc, #80]	; (8000940 <HAL_UART_RxCpltCallback+0x68>)
 80008f0:	600a      	str	r2, [r1, #0]
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <HAL_UART_RxCpltCallback+0x6c>)
 80008f4:	210d      	movs	r1, #13
 80008f6:	54d1      	strb	r1, [r2, r3]
		if (HAL_UART_Transmit_IT(&huart2, data_buffer, count) != HAL_OK)
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_UART_RxCpltCallback+0x68>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	4910      	ldr	r1, [pc, #64]	; (8000944 <HAL_UART_RxCpltCallback+0x6c>)
 8000902:	4811      	ldr	r0, [pc, #68]	; (8000948 <HAL_UART_RxCpltCallback+0x70>)
 8000904:	f003 fdb2 	bl	800446c <HAL_UART_Transmit_IT>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d00c      	beq.n	8000928 <HAL_UART_RxCpltCallback+0x50>
		{
			Error_Handler("Error");
 800090e:	480f      	ldr	r0, [pc, #60]	; (800094c <HAL_UART_RxCpltCallback+0x74>)
 8000910:	f000 f8fc 	bl	8000b0c <Error_Handler>
 8000914:	e008      	b.n	8000928 <HAL_UART_RxCpltCallback+0x50>
		}
	}
	else
	{
		data_buffer[count++] = rcvd_data;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_UART_RxCpltCallback+0x68>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	4908      	ldr	r1, [pc, #32]	; (8000940 <HAL_UART_RxCpltCallback+0x68>)
 800091e:	600a      	str	r2, [r1, #0]
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_UART_RxCpltCallback+0x64>)
 8000922:	7811      	ldrb	r1, [r2, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_UART_RxCpltCallback+0x6c>)
 8000926:	54d1      	strb	r1, [r2, r3]
	}
	HAL_UART_Receive_IT(&huart2, &rcvd_data, 1);
 8000928:	2201      	movs	r2, #1
 800092a:	4904      	ldr	r1, [pc, #16]	; (800093c <HAL_UART_RxCpltCallback+0x64>)
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <HAL_UART_RxCpltCallback+0x70>)
 800092e:	f003 fdf9 	bl	8004524 <HAL_UART_Receive_IT>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000031c 	.word	0x2000031c
 8000940:	200002c0 	.word	0x200002c0
 8000944:	20000438 	.word	0x20000438
 8000948:	20000378 	.word	0x20000378
 800094c:	08006e08 	.word	0x08006e08

08000950 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	if (count>0)
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_UART_TxCpltCallback+0x34>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d009      	beq.n	8000974 <HAL_UART_TxCpltCallback+0x24>
	{
		parseFromUART(data_buffer);
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <HAL_UART_TxCpltCallback+0x38>)
 8000962:	f000 f917 	bl	8000b94 <parseFromUART>
		// ToDo SaveData to frame
		ClearArray(data_buffer, 70);
 8000966:	2146      	movs	r1, #70	; 0x46
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <HAL_UART_TxCpltCallback+0x38>)
 800096a:	f000 f8f9 	bl	8000b60 <ClearArray>
		count = 0;
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_UART_TxCpltCallback+0x34>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
	}
	flag_UART_TX_COMPLETED = 1;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_UART_TxCpltCallback+0x3c>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]

}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200002c0 	.word	0x200002c0
 8000988:	20000438 	.word	0x20000438
 800098c:	200002c4 	.word	0x200002c4

08000990 <CAN_Filter_Conifg>:
  * @brief by DWI: CAN Acceptance Filter Configuration - v.1: Accept all frames
  * @param None
  * @retval None
  */
void CAN_Filter_Conifg(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CANfilter;


	CANfilter.FilterBank = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
	CANfilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
	CANfilter.FilterIdHigh = 0x0000;
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
	CANfilter.FilterIdLow = 0x0000;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
	CANfilter.FilterMaskIdHigh = 0x0000;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
	CANfilter.FilterMaskIdLow = 0x0000;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
	CANfilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
	CANfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61fb      	str	r3, [r7, #28]
	CANfilter.FilterActivation = CAN_FILTER_ENABLE;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan, &CANfilter) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <CAN_Filter_Conifg+0x48>)
 80009c0:	f000 fe2d 	bl	800161e <HAL_CAN_ConfigFilter>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <CAN_Filter_Conifg+0x40>
	{
		Error_Handler("CAN Filter configuration error");
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <CAN_Filter_Conifg+0x4c>)
 80009cc:	f000 f89e 	bl	8000b0c <Error_Handler>
	}
}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200002dc 	.word	0x200002dc
 80009dc:	08006e10 	.word	0x08006e10

080009e0 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	Print_CAN_Frame("Tx0",CanTxHeader.ExtId, CanTxHeader.DLC, CANmsgPrintTx);
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 80009ea:	6859      	ldr	r1, [r3, #4]
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 80009ee:	691a      	ldr	r2, [r3, #16]
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_CAN_TxMailbox0CompleteCallback+0x28>)
 80009f4:	f7ff fecc 	bl	8000790 <Print_CAN_Frame>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000304 	.word	0x20000304
 8000a04:	200002b8 	.word	0x200002b8
 8000a08:	08006e30 	.word	0x08006e30

08000a0c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	Print_CAN_Frame("Tx1",CanTxHeader.ExtId, CanTxHeader.DLC, CANmsgPrintTx);
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8000a16:	6859      	ldr	r1, [r3, #4]
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8000a1a:	691a      	ldr	r2, [r3, #16]
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_CAN_TxMailbox1CompleteCallback+0x28>)
 8000a20:	f7ff feb6 	bl	8000790 <Print_CAN_Frame>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000304 	.word	0x20000304
 8000a30:	200002b8 	.word	0x200002b8
 8000a34:	08006e34 	.word	0x08006e34

08000a38 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	Print_CAN_Frame("Tx2",CanTxHeader.ExtId, CanTxHeader.DLC, CANmsgPrintTx);
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8000a42:	6859      	ldr	r1, [r3, #4]
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8000a46:	691a      	ldr	r2, [r3, #16]
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <HAL_CAN_TxMailbox2CompleteCallback+0x28>)
 8000a4c:	f7ff fea0 	bl	8000790 <Print_CAN_Frame>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000304 	.word	0x20000304
 8000a5c:	200002b8 	.word	0x200002b8
 8000a60:	08006e38 	.word	0x08006e38

08000a64 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	; 0x30
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef CanRxHeader;
	uint8_t CANmsgRCVbuffer[8] = {};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]

	// DWI: wait for minimum one message in RX FIFO memory
	// while(!(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)));

	// DWI: Function to handle receiving messages.
	if ((HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, CANmsgRCVbuffer)) != HAL_OK)
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	f107 0214 	add.w	r2, r7, #20
 8000a7e:	2100      	movs	r1, #0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 ffb5 	bl	80019f0 <HAL_CAN_GetRxMessage>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
	{
		Error_Handler("CAN RX error");
 8000a8c:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000a8e:	f000 f83d 	bl	8000b0c <Error_Handler>
	}
	Print_CAN_Frame("Rx ",CanRxHeader.ExtId, CanRxHeader.DLC, CANmsgRCVbuffer);
 8000a92:	69b9      	ldr	r1, [r7, #24]
 8000a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000a9c:	f7ff fe78 	bl	8000790 <Print_CAN_Frame>
}
 8000aa0:	bf00      	nop
 8000aa2:	3730      	adds	r7, #48	; 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08006e3c 	.word	0x08006e3c
 8000aac:	08006e4c 	.word	0x08006e4c

08000ab0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b090      	sub	sp, #64	; 0x40
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	char buffer[50] = {0};
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2232      	movs	r2, #50	; 0x32
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 fc3f 	bl	8005344 <memset>
	sprintf(buffer, "************* CAN ERRROR *************\n\r");
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_CAN_ErrorCallback+0x54>)
 8000acc:	461c      	mov	r4, r3
 8000ace:	4615      	mov	r5, r2
 8000ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000adc:	c403      	stmia	r4!, {r0, r1}
 8000ade:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fb85 	bl	80001f4 <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	f107 010c 	add.w	r1, r7, #12
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	4804      	ldr	r0, [pc, #16]	; (8000b08 <HAL_CAN_ErrorCallback+0x58>)
 8000af8:	f003 fc24 	bl	8004344 <HAL_UART_Transmit>
}
 8000afc:	bf00      	nop
 8000afe:	3740      	adds	r7, #64	; 0x40
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bdb0      	pop	{r4, r5, r7, pc}
 8000b04:	08006e50 	.word	0x08006e50
 8000b08:	20000378 	.word	0x20000378

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(char ErrorName[])
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09c      	sub	sp, #112	; 0x70
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	char buffer[100] = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2264      	movs	r2, #100	; 0x64
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fc11 	bl	8005344 <memset>
	sprintf(buffer, "************* ERRROR: %s *************\n\r",ErrorName);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	490b      	ldr	r1, [pc, #44]	; (8000b58 <Error_Handler+0x4c>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f004 fc76 	bl	800541c <siprintf>

	while(1)
	{
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fb5d 	bl	80001f4 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	f107 010c 	add.w	r1, r7, #12
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <Error_Handler+0x50>)
 8000b48:	f003 fbfc 	bl	8004344 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000b4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b50:	f000 fc48 	bl	80013e4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b54:	e7ec      	b.n	8000b30 <Error_Handler+0x24>
 8000b56:	bf00      	nop
 8000b58:	08006e7c 	.word	0x08006e7c
 8000b5c:	20000378 	.word	0x20000378

08000b60 <ClearArray>:

  /* USER CODE END Error_Handler_Debug */
}

void ClearArray(uint8_t array[], uint32_t size)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; ++i)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	e007      	b.n	8000b80 <ClearArray+0x20>
	{
		array[i] = 0;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; ++i)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f3      	bhi.n	8000b70 <ClearArray+0x10>
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <parseFromUART>:

void parseFromUART(char CanFrame[]) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b090      	sub	sp, #64	; 0x40
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    char parserInitialBuffer[6] = {0};
 8000b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	809a      	strh	r2, [r3, #4]
    uint8_t index = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    while (CanFrame[index] != '|') {
 8000bac:	e010      	b.n	8000bd0 <parseFromUART+0x3c>
		parserInitialBuffer[index] = CanFrame[index];
 8000bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	441a      	add	r2, r3
 8000bb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bba:	7812      	ldrb	r2, [r2, #0]
 8000bbc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000bc0:	440b      	add	r3, r1
 8000bc2:	f803 2c14 	strb.w	r2, [r3, #-20]
		index++;
 8000bc6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bca:	3301      	adds	r3, #1
 8000bcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    while (CanFrame[index] != '|') {
 8000bd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b7c      	cmp	r3, #124	; 0x7c
 8000bdc:	d1e7      	bne.n	8000bae <parseFromUART+0x1a>
    }
    parserInitialBuffer[index] = '\0';
 8000bde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000be2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000be6:	4413      	add	r3, r2
 8000be8:	2200      	movs	r2, #0
 8000bea:	f803 2c14 	strb.w	r2, [r3, #-20]
    if (strcmp(parserInitialBuffer, "CAN_Tx") == 0) {
 8000bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf2:	495d      	ldr	r1, [pc, #372]	; (8000d68 <parseFromUART+0x1d4>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff faf3 	bl	80001e0 <strcmp>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f040 8091 	bne.w	8000d24 <parseFromUART+0x190>
    	uint8_t bufferIndex = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        char parserIdBuffer[8] = {0};
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
        char parserDlcBuffer[1] = {0};
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 3020 	strb.w	r3, [r7, #32]
        char parserMessageBuffer[17] = {0};
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	741a      	strb	r2, [r3, #16]
        uint8_t *p;

        for ( ; CanFrame[index]!= '\r'; ++index) {
 8000c28:	e04b      	b.n	8000cc2 <parseFromUART+0x12e>
            if (index > 12 && index <= 19) {
 8000c2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c2e:	2b0c      	cmp	r3, #12
 8000c30:	d915      	bls.n	8000c5e <parseFromUART+0xca>
 8000c32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c36:	2b13      	cmp	r3, #19
 8000c38:	d811      	bhi.n	8000c5e <parseFromUART+0xca>
                parserIdBuffer[bufferIndex] = CanFrame[index];
 8000c3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	441a      	add	r2, r3
 8000c42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000c4c:	440b      	add	r3, r1
 8000c4e:	f803 2c1c 	strb.w	r2, [r3, #-28]
                bufferIndex++;
 8000c52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000c56:	3301      	adds	r3, #1
 8000c58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000c5c:	e02c      	b.n	8000cb8 <parseFromUART+0x124>
            }
            else if (index == 26) {
 8000c5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c62:	2b1a      	cmp	r3, #26
 8000c64:	d10a      	bne.n	8000c7c <parseFromUART+0xe8>
                parserDlcBuffer[0] = CanFrame[index];
 8000c66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	f887 3020 	strb.w	r3, [r7, #32]
                bufferIndex = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000c7a:	e01d      	b.n	8000cb8 <parseFromUART+0x124>
            }
            else if (index >= 36) {
 8000c7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c80:	2b23      	cmp	r3, #35	; 0x23
 8000c82:	d919      	bls.n	8000cb8 <parseFromUART+0x124>
                if (CanFrame[index] == ' ')
 8000c84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b20      	cmp	r3, #32
 8000c90:	d011      	beq.n	8000cb6 <parseFromUART+0x122>
                    continue;
                else {
                    parserMessageBuffer[bufferIndex] = CanFrame[index];
 8000c92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	441a      	add	r2, r3
 8000c9a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ca4:	440b      	add	r3, r1
 8000ca6:	f803 2c34 	strb.w	r2, [r3, #-52]
                    bufferIndex++;
 8000caa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000cae:	3301      	adds	r3, #1
 8000cb0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000cb4:	e000      	b.n	8000cb8 <parseFromUART+0x124>
                    continue;
 8000cb6:	bf00      	nop
        for ( ; CanFrame[index]!= '\r'; ++index) {
 8000cb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000cc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b0d      	cmp	r3, #13
 8000cce:	d1ac      	bne.n	8000c2a <parseFromUART+0x96>
                }
            }
        }
        canUartBuffer.DLC = parserDlcBuffer[0] - '0';
 8000cd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <parseFromUART+0x1d8>)
 8000cda:	711a      	strb	r2, [r3, #4]
        sscanf(parserIdBuffer, "%lX", &canUartBuffer.ID);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <parseFromUART+0x1d8>)
 8000ce2:	4923      	ldr	r1, [pc, #140]	; (8000d70 <parseFromUART+0x1dc>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 fbb9 	bl	800545c <siscanf>

        p = convertToHex(parserMessageBuffer);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f84a 	bl	8000d88 <convertToHex>
 8000cf4:	6378      	str	r0, [r7, #52]	; 0x34
        for (size_t var = 0; var < canUartBuffer.DLC; var++) {
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cfa:	e00c      	b.n	8000d16 <parseFromUART+0x182>
        	canUartBuffer.CAN_Tx[var] = *(p+var);
 8000cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d00:	4413      	add	r3, r2
 8000d02:	7819      	ldrb	r1, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <parseFromUART+0x1d8>)
 8000d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d08:	4413      	add	r3, r2
 8000d0a:	3305      	adds	r3, #5
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	701a      	strb	r2, [r3, #0]
        for (size_t var = 0; var < canUartBuffer.DLC; var++) {
 8000d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d12:	3301      	adds	r3, #1
 8000d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <parseFromUART+0x1d8>)
 8000d18:	791b      	ldrb	r3, [r3, #4]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d3ec      	bcc.n	8000cfc <parseFromUART+0x168>
        printf("Set Filer\n");
    }
    else {
    	printf("Error\n");
    }
}
 8000d22:	e01c      	b.n	8000d5e <parseFromUART+0x1ca>
    else if (strcmp(parserInitialBuffer, "RESET") == 0) {
 8000d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d28:	4912      	ldr	r1, [pc, #72]	; (8000d74 <parseFromUART+0x1e0>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fa58 	bl	80001e0 <strcmp>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d103      	bne.n	8000d3e <parseFromUART+0x1aa>
        printf("Perform reset\n");
 8000d36:	4810      	ldr	r0, [pc, #64]	; (8000d78 <parseFromUART+0x1e4>)
 8000d38:	f004 fb68 	bl	800540c <puts>
}
 8000d3c:	e00f      	b.n	8000d5e <parseFromUART+0x1ca>
    else if (strcmp(parserInitialBuffer, "FIL_CF") == 0) {
 8000d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <parseFromUART+0x1e8>)
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fa4b 	bl	80001e0 <strcmp>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d103      	bne.n	8000d58 <parseFromUART+0x1c4>
        printf("Set Filer\n");
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <parseFromUART+0x1ec>)
 8000d52:	f004 fb5b 	bl	800540c <puts>
}
 8000d56:	e002      	b.n	8000d5e <parseFromUART+0x1ca>
    	printf("Error\n");
 8000d58:	480a      	ldr	r0, [pc, #40]	; (8000d84 <parseFromUART+0x1f0>)
 8000d5a:	f004 fb57 	bl	800540c <puts>
}
 8000d5e:	bf00      	nop
 8000d60:	3740      	adds	r7, #64	; 0x40
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08006ea8 	.word	0x08006ea8
 8000d6c:	20000320 	.word	0x20000320
 8000d70:	08006eb0 	.word	0x08006eb0
 8000d74:	08006eb4 	.word	0x08006eb4
 8000d78:	08006ebc 	.word	0x08006ebc
 8000d7c:	08006ecc 	.word	0x08006ecc
 8000d80:	08006ed4 	.word	0x08006ed4
 8000d84:	08006e08 	.word	0x08006e08

08000d88 <convertToHex>:

uint8_t* convertToHex(char *string) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	    static uint8_t val[MAX_CAN_MESSAGE_SIZE];
	    memset( val, 0, MAX_CAN_MESSAGE_SIZE*sizeof(uint8_t));
 8000d90:	2208      	movs	r2, #8
 8000d92:	2100      	movs	r1, #0
 8000d94:	4824      	ldr	r0, [pc, #144]	; (8000e28 <convertToHex+0xa0>)
 8000d96:	f004 fad5 	bl	8005344 <memset>

	    uint8_t index = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
	    while (*string) {
 8000d9e:	e03a      	b.n	8000e16 <convertToHex+0x8e>
	        // get current character then increment
	        uint8_t byte = *string++;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	73bb      	strb	r3, [r7, #14]
	        // transform hex character to the 4bit equivalent number, using the ascii table indexes
	        if (byte >= '0' && byte <= '9') byte = byte - '0';
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	2b2f      	cmp	r3, #47	; 0x2f
 8000dae:	d906      	bls.n	8000dbe <convertToHex+0x36>
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	2b39      	cmp	r3, #57	; 0x39
 8000db4:	d803      	bhi.n	8000dbe <convertToHex+0x36>
 8000db6:	7bbb      	ldrb	r3, [r7, #14]
 8000db8:	3b30      	subs	r3, #48	; 0x30
 8000dba:	73bb      	strb	r3, [r7, #14]
 8000dbc:	e012      	b.n	8000de4 <convertToHex+0x5c>
	        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	2b60      	cmp	r3, #96	; 0x60
 8000dc2:	d906      	bls.n	8000dd2 <convertToHex+0x4a>
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	2b66      	cmp	r3, #102	; 0x66
 8000dc8:	d803      	bhi.n	8000dd2 <convertToHex+0x4a>
 8000dca:	7bbb      	ldrb	r3, [r7, #14]
 8000dcc:	3b57      	subs	r3, #87	; 0x57
 8000dce:	73bb      	strb	r3, [r7, #14]
 8000dd0:	e008      	b.n	8000de4 <convertToHex+0x5c>
	        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	2b40      	cmp	r3, #64	; 0x40
 8000dd6:	d905      	bls.n	8000de4 <convertToHex+0x5c>
 8000dd8:	7bbb      	ldrb	r3, [r7, #14]
 8000dda:	2b46      	cmp	r3, #70	; 0x46
 8000ddc:	d802      	bhi.n	8000de4 <convertToHex+0x5c>
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	3b37      	subs	r3, #55	; 0x37
 8000de2:	73bb      	strb	r3, [r7, #14]
	        // shift 4 to make space for new digit, and add the 4 bits of the new digit
	        val[index/2] = (val[index/2] << 4) | (byte & 0xF);
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	085b      	lsrs	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <convertToHex+0xa0>)
 8000dee:	5c9b      	ldrb	r3, [r3, r2]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	b25a      	sxtb	r2, r3
 8000df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000df8:	f003 030f 	and.w	r3, r3, #15
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b259      	sxtb	r1, r3
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	085b      	lsrs	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	b2c9      	uxtb	r1, r1
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <convertToHex+0xa0>)
 8000e0e:	5499      	strb	r1, [r3, r2]
	        index++;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	3301      	adds	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
	    while (*string) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1c0      	bne.n	8000da0 <convertToHex+0x18>
	    }
	    return val;
 8000e1e:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <convertToHex+0xa0>)
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200002c8 	.word	0x200002c8

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_MspInit+0x74>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a1a      	ldr	r2, [pc, #104]	; (8000ea0 <HAL_MspInit+0x74>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_MspInit+0x74>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_MspInit+0x74>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_MspInit+0x74>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_MspInit+0x74>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  // Low level processor specific initialization

  	// 1. Set up the priority grouping of the arm cortex mx processor
  	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e62:	2003      	movs	r0, #3
 8000e64:	f001 f9ce 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  	// 2. Enable the required interrups of the cortex mx processor
  	SCB->SHCSR |= 0x7 << 16;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_MspInit+0x78>)
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_MspInit+0x78>)
 8000e6e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000e72:	6253      	str	r3, [r2, #36]	; 0x24

  	// 3. Configure the priority of system exceptions
  	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0,0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	f06f 000b 	mvn.w	r0, #11
 8000e7c:	f001 f9cd 	bl	800221a <HAL_NVIC_SetPriority>
  	HAL_NVIC_SetPriority(BusFault_IRQn, 0,0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	f06f 000a 	mvn.w	r0, #10
 8000e88:	f001 f9c7 	bl	800221a <HAL_NVIC_SetPriority>
  	HAL_NVIC_SetPriority(UsageFault_IRQn, 0,0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f06f 0009 	mvn.w	r0, #9
 8000e94:	f001 f9c1 	bl	800221a <HAL_NVIC_SetPriority>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <HAL_CAN_MspInit+0xc0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d149      	bne.n	8000f5e <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <HAL_CAN_MspInit+0xc4>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a27      	ldr	r2, [pc, #156]	; (8000f6c <HAL_CAN_MspInit+0xc4>)
 8000ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <HAL_CAN_MspInit+0xc4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <HAL_CAN_MspInit+0xc4>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <HAL_CAN_MspInit+0xc4>)
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HAL_CAN_MspInit+0xc4>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000efa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000f0c:	2309      	movs	r3, #9
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f001 f9ff 	bl	800231c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */
    // DWI: Enable innterrupts for CAN
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 15, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	210f      	movs	r1, #15
 8000f22:	2013      	movs	r0, #19
 8000f24:	f001 f979 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 15, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	2014      	movs	r0, #20
 8000f2e:	f001 f974 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 15, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	210f      	movs	r1, #15
 8000f36:	2015      	movs	r0, #21
 8000f38:	f001 f96f 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 15, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	210f      	movs	r1, #15
 8000f40:	2016      	movs	r0, #22
 8000f42:	f001 f96a 	bl	800221a <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000f46:	2013      	movs	r0, #19
 8000f48:	f001 f983 	bl	8002252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000f4c:	2014      	movs	r0, #20
 8000f4e:	f001 f980 	bl	8002252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000f52:	2015      	movs	r0, #21
 8000f54:	f001 f97d 	bl	8002252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000f58:	2016      	movs	r0, #22
 8000f5a:	f001 f97a 	bl	8002252 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40006400 	.word	0x40006400
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <HAL_TIM_Base_MspInit+0x5c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10c      	bne.n	8000f9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_TIM_Base_MspInit+0x60>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_TIM_Base_MspInit+0x60>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	61d3      	str	r3, [r2, #28]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_TIM_Base_MspInit+0x60>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f9a:	e010      	b.n	8000fbe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <HAL_TIM_Base_MspInit+0x64>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10b      	bne.n	8000fbe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_TIM_Base_MspInit+0x60>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <HAL_TIM_Base_MspInit+0x60>)
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_TIM_Base_MspInit+0x60>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 0320 	and.w	r3, r3, #32
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40001000 	.word	0x40001000
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40001400 	.word	0x40001400

08000fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <HAL_UART_MspInit+0xa0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d139      	bne.n	800106e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_UART_MspInit+0xa4>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <HAL_UART_MspInit+0xa4>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_UART_MspInit+0xa4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_UART_MspInit+0xa4>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_UART_MspInit+0xa4>)
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	6153      	str	r3, [r2, #20]
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0xa4>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800102a:	230c      	movs	r3, #12
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001032:	2301      	movs	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800103a:	2307      	movs	r3, #7
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f001 f968 	bl	800231c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_3; // UART2 RX
 800104c:	2308      	movs	r3, #8
 800104e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f001 f95f 	bl	800231c <HAL_GPIO_Init>
  
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800105e:	2026      	movs	r0, #38	; 0x26
 8001060:	f001 f8f7 	bl	8002252 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 1,0);
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	2026      	movs	r0, #38	; 0x26
 800106a:	f001 f8d6 	bl	800221a <HAL_NVIC_SetPriority>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	; 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40004400 	.word	0x40004400
 800107c:	40021000 	.word	0x40021000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 f966 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80010d8:	f001 f8d5 	bl	8002286 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <USB_HP_CAN_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
// DWI: Enable IRQ Handlers for CAN

void USB_HP_CAN_TX_IRQHandler (void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80010e6:	f000 fdbb 	bl	8001c60 <HAL_CAN_IRQHandler>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200002dc 	.word	0x200002dc

080010f4 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler (void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80010fa:	f000 fdb1 	bl	8001c60 <HAL_CAN_IRQHandler>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200002dc 	.word	0x200002dc

08001108 <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler (void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <CAN_RX1_IRQHandler+0x10>)
 800110e:	f000 fda7 	bl	8001c60 <HAL_CAN_IRQHandler>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200002dc 	.word	0x200002dc

0800111c <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler (void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <CAN_SCE_IRQHandler+0x10>)
 8001122:	f000 fd9d 	bl	8001c60 <HAL_CAN_IRQHandler>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200002dc 	.word	0x200002dc

08001130 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <USART2_IRQHandler+0x10>)
 8001136:	f003 fa97 	bl	8004668 <HAL_UART_IRQHandler>

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000378 	.word	0x20000378

08001144 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <TIM6_DAC_IRQHandler+0x10>)
 800114a:	f002 fe1e 	bl	8003d8a <HAL_TIM_IRQHandler>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000338 	.word	0x20000338

08001158 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	// HAL_TIM_IRQHandler(&htim7);
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e00a      	b.n	800118e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001178:	f3af 8000 	nop.w
 800117c:	4601      	mov	r1, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	60ba      	str	r2, [r7, #8]
 8001184:	b2ca      	uxtb	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	dbf0      	blt.n	8001178 <_read+0x12>
	}

return len;
 8001196:	687b      	ldr	r3, [r7, #4]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e009      	b.n	80011c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	60ba      	str	r2, [r7, #8]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3301      	adds	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dbf1      	blt.n	80011b2 <_write+0x12>
	}
	return len;
 80011ce:	687b      	ldr	r3, [r7, #4]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_close>:

int _close(int file)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	return -1;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001200:	605a      	str	r2, [r3, #4]
	return 0;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_isatty>:

int _isatty(int file)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	return 1;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
	return 0;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <_sbrk+0x50>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x16>
		heap_end = &end;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <_sbrk+0x50>)
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <_sbrk+0x54>)
 8001254:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <_sbrk+0x50>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <_sbrk+0x50>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	466a      	mov	r2, sp
 8001266:	4293      	cmp	r3, r2
 8001268:	d907      	bls.n	800127a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800126a:	f004 f841 	bl	80052f0 <__errno>
 800126e:	4602      	mov	r2, r0
 8001270:	230c      	movs	r3, #12
 8001272:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
 8001278:	e006      	b.n	8001288 <_sbrk+0x48>
	}

	heap_end += incr;
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <_sbrk+0x50>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a03      	ldr	r2, [pc, #12]	; (8001290 <_sbrk+0x50>)
 8001284:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200002d0 	.word	0x200002d0
 8001294:	20000488 	.word	0x20000488

08001298 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <SystemInit+0x28>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <SystemInit+0x28>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SystemInit+0x28>)
 80012ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012b2:	609a      	str	r2, [r3, #8]
#endif
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012ca:	e003      	b.n	80012d4 <LoopCopyDataInit>

080012cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012d2:	3104      	adds	r1, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012d4:	480b      	ldr	r0, [pc, #44]	; (8001304 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012dc:	d3f6      	bcc.n	80012cc <CopyDataInit>
	ldr	r2, =_sbss
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <LoopForever+0x12>)
	b	LoopFillZerobss
 80012e0:	e002      	b.n	80012e8 <LoopFillZerobss>

080012e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012e4:	f842 3b04 	str.w	r3, [r2], #4

080012e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <LoopForever+0x16>)
	cmp	r2, r3
 80012ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012ec:	d3f9      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ee:	f7ff ffd3 	bl	8001298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f004 f803 	bl	80052fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f6:	f7fe ffdb 	bl	80002b0 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012fc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001300:	080070ec 	.word	0x080070ec
	ldr	r0, =_sdata
 8001304:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001308:	2000029c 	.word	0x2000029c
	ldr	r2, =_sbss
 800130c:	2000029c 	.word	0x2000029c
	ldr	r3, = _ebss
 8001310:	20000488 	.word	0x20000488

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x28>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 ff6b 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fd7a 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 ff83 	bl	800226e <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 ff4b 	bl	800221a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200000c0 	.word	0x200000c0
 800139c:	200000c8 	.word	0x200000c8
 80013a0:	200000c4 	.word	0x200000c4

080013a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	200000c8 	.word	0x200000c8
 80013c8:	20000480 	.word	0x20000480

080013cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000480 	.word	0x20000480

080013e4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_Delay+0x40>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200000c8 	.word	0x200000c8

08001428 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0ed      	b.n	8001616 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fd2e 	bl	8000ea8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0202 	bic.w	r2, r2, #2
 800145a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800145c:	f7ff ffb6 	bl	80013cc <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001462:	e012      	b.n	800148a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001464:	f7ff ffb2 	bl	80013cc <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b0a      	cmp	r3, #10
 8001470:	d90b      	bls.n	800148a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2205      	movs	r2, #5
 8001482:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0c5      	b.n	8001616 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e5      	bne.n	8001464 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a8:	f7ff ff90 	bl	80013cc <HAL_GetTick>
 80014ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ae:	e012      	b.n	80014d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014b0:	f7ff ff8c 	bl	80013cc <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b0a      	cmp	r3, #10
 80014bc:	d90b      	bls.n	80014d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2205      	movs	r2, #5
 80014ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e09f      	b.n	8001616 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0e5      	beq.n	80014b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7e1b      	ldrb	r3, [r3, #24]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d108      	bne.n	80014fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e007      	b.n	800150e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7e5b      	ldrb	r3, [r3, #25]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d108      	bne.n	8001528 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e007      	b.n	8001538 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001536:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e9b      	ldrb	r3, [r3, #26]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d108      	bne.n	8001552 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0220 	orr.w	r2, r2, #32
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e007      	b.n	8001562 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0220 	bic.w	r2, r2, #32
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7edb      	ldrb	r3, [r3, #27]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d108      	bne.n	800157c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0210 	bic.w	r2, r2, #16
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e007      	b.n	800158c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0210 	orr.w	r2, r2, #16
 800158a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7f1b      	ldrb	r3, [r3, #28]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d108      	bne.n	80015a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0208 	orr.w	r2, r2, #8
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	e007      	b.n	80015b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0208 	bic.w	r2, r2, #8
 80015b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7f5b      	ldrb	r3, [r3, #29]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d108      	bne.n	80015d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 0204 	orr.w	r2, r2, #4
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e007      	b.n	80015e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0204 	bic.w	r2, r2, #4
 80015de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	ea42 0103 	orr.w	r1, r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	1e5a      	subs	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800161e:	b480      	push	{r7}
 8001620:	b087      	sub	sp, #28
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001634:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001636:	7cfb      	ldrb	r3, [r7, #19]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d003      	beq.n	8001644 <HAL_CAN_ConfigFilter+0x26>
 800163c:	7cfb      	ldrb	r3, [r7, #19]
 800163e:	2b02      	cmp	r3, #2
 8001640:	f040 80aa 	bne.w	8001798 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800164a:	f043 0201 	orr.w	r2, r3, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2201      	movs	r2, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d123      	bne.n	80016c6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43db      	mvns	r3, r3
 8001688:	401a      	ands	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3248      	adds	r2, #72	; 0x48
 80016a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016bc:	6979      	ldr	r1, [r7, #20]
 80016be:	3348      	adds	r3, #72	; 0x48
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d122      	bne.n	8001714 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3248      	adds	r2, #72	; 0x48
 80016f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001708:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800170a:	6979      	ldr	r1, [r7, #20]
 800170c:	3348      	adds	r3, #72	; 0x48
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d109      	bne.n	8001730 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	43db      	mvns	r3, r3
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800172e:	e007      	b.n	8001740 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	431a      	orrs	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800175a:	e007      	b.n	800176c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	431a      	orrs	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d107      	bne.n	8001784 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	431a      	orrs	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800178a:	f023 0201 	bic.w	r2, r3, #1
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	e006      	b.n	80017a6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
  }
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d12e      	bne.n	8001824 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017de:	f7ff fdf5 	bl	80013cc <HAL_GetTick>
 80017e2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017e4:	e012      	b.n	800180c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017e6:	f7ff fdf1 	bl	80013cc <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b0a      	cmp	r3, #10
 80017f2:	d90b      	bls.n	800180c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2205      	movs	r2, #5
 8001804:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e012      	b.n	8001832 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1e5      	bne.n	80017e6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	e006      	b.n	8001832 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
  }
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800183a:	b480      	push	{r7}
 800183c:	b089      	sub	sp, #36	; 0x24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001858:	7ffb      	ldrb	r3, [r7, #31]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d003      	beq.n	8001866 <HAL_CAN_AddTxMessage+0x2c>
 800185e:	7ffb      	ldrb	r3, [r7, #31]
 8001860:	2b02      	cmp	r3, #2
 8001862:	f040 80b8 	bne.w	80019d6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10a      	bne.n	8001886 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001876:	2b00      	cmp	r3, #0
 8001878:	d105      	bne.n	8001886 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80a0 	beq.w	80019c6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	0e1b      	lsrs	r3, r3, #24
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d907      	bls.n	80018a6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e09e      	b.n	80019e4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018a6:	2201      	movs	r2, #1
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018c2:	68f9      	ldr	r1, [r7, #12]
 80018c4:	6809      	ldr	r1, [r1, #0]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3318      	adds	r3, #24
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	440b      	add	r3, r1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e00f      	b.n	80018f4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018de:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80018e8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3318      	adds	r3, #24
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	440b      	add	r3, r1
 80018f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6819      	ldr	r1, [r3, #0]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3318      	adds	r3, #24
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	440b      	add	r3, r1
 8001904:	3304      	adds	r3, #4
 8001906:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	7d1b      	ldrb	r3, [r3, #20]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d111      	bne.n	8001934 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3318      	adds	r3, #24
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	3304      	adds	r3, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	6811      	ldr	r1, [r2, #0]
 8001924:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3318      	adds	r3, #24
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	440b      	add	r3, r1
 8001930:	3304      	adds	r3, #4
 8001932:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3307      	adds	r3, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	061a      	lsls	r2, r3, #24
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3306      	adds	r3, #6
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	041b      	lsls	r3, r3, #16
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3305      	adds	r3, #5
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	4313      	orrs	r3, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	3204      	adds	r2, #4
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	4610      	mov	r0, r2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	6811      	ldr	r1, [r2, #0]
 800195c:	ea43 0200 	orr.w	r2, r3, r0
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	440b      	add	r3, r1
 8001966:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800196a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3303      	adds	r3, #3
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	061a      	lsls	r2, r3, #24
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3302      	adds	r3, #2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3301      	adds	r3, #1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	4313      	orrs	r3, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	4610      	mov	r0, r2
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	6811      	ldr	r1, [r2, #0]
 8001992:	ea43 0200 	orr.w	r2, r3, r0
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	440b      	add	r3, r1
 800199c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80019a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3318      	adds	r3, #24
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	6811      	ldr	r1, [r2, #0]
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3318      	adds	r3, #24
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	440b      	add	r3, r1
 80019c0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e00e      	b.n	80019e4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e006      	b.n	80019e4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
  }
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3724      	adds	r7, #36	; 0x24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d003      	beq.n	8001a14 <HAL_CAN_GetRxMessage+0x24>
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	f040 80f3 	bne.w	8001bfa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10e      	bne.n	8001a38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d116      	bne.n	8001a56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0e7      	b.n	8001c08 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d107      	bne.n	8001a56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0d8      	b.n	8001c08 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	331b      	adds	r3, #27
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0204 	and.w	r2, r3, #4
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10c      	bne.n	8001a8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	331b      	adds	r3, #27
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4413      	add	r3, r2
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0d5b      	lsrs	r3, r3, #21
 8001a84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e00b      	b.n	8001aa6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	331b      	adds	r3, #27
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	4413      	add	r3, r2
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	331b      	adds	r3, #27
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4413      	add	r3, r2
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0202 	and.w	r2, r3, #2
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	331b      	adds	r3, #27
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3304      	adds	r3, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 020f 	and.w	r2, r3, #15
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	331b      	adds	r3, #27
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4413      	add	r3, r2
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	331b      	adds	r3, #27
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	0a1a      	lsrs	r2, r3, #8
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0c1a      	lsrs	r2, r3, #16
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e1a      	lsrs	r2, r3, #24
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3303      	adds	r3, #3
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4413      	add	r3, r2
 8001b8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0a1a      	lsrs	r2, r3, #8
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3305      	adds	r3, #5
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0c1a      	lsrs	r2, r3, #16
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	3306      	adds	r3, #6
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0e1a      	lsrs	r2, r3, #24
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	3307      	adds	r3, #7
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d108      	bne.n	8001be6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0220 	orr.w	r2, r2, #32
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	e007      	b.n	8001bf6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0220 	orr.w	r2, r2, #32
 8001bf4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e006      	b.n	8001c08 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
  }
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c24:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d002      	beq.n	8001c32 <HAL_CAN_ActivateNotification+0x1e>
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d109      	bne.n	8001c46 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6959      	ldr	r1, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e006      	b.n	8001c54 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
  }
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d07c      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d023      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe fe8c 	bl	80009e0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001cc8:	e016      	b.n	8001cf8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	e00c      	b.n	8001cf8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	e002      	b.n	8001cf8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f965 	bl	8001fc2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d024      	beq.n	8001d4c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7fe fe78 	bl	8000a0c <HAL_CAN_TxMailbox1CompleteCallback>
 8001d1c:	e016      	b.n	8001d4c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	e00c      	b.n	8001d4c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	e002      	b.n	8001d4c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f945 	bl	8001fd6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d024      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fe64 	bl	8000a38 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d70:	e016      	b.n	8001da0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
 8001d84:	e00c      	b.n	8001da0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
 8001d98:	e002      	b.n	8001da0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f925 	bl	8001fea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00c      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2208      	movs	r2, #8
 8001dde:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f90c 	bl	8001ffe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d009      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fe30 	bl	8000a64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00c      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2210      	movs	r2, #16
 8001e26:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2208      	movs	r2, #8
 8001e42:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8ee 	bl	8002026 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d009      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8d5 	bl	8002012 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2210      	movs	r2, #16
 8001e82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f8d8 	bl	800203a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8d1 	bl	800204e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d075      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d06c      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d03d      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d038      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f2e:	2b30      	cmp	r3, #48	; 0x30
 8001f30:	d017      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x302>
 8001f32:	2b30      	cmp	r3, #48	; 0x30
 8001f34:	d804      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x2e0>
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d009      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x2ee>
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d00c      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f3e:	e024      	b.n	8001f8a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001f40:	2b50      	cmp	r3, #80	; 0x50
 8001f42:	d018      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x316>
 8001f44:	2b60      	cmp	r3, #96	; 0x60
 8001f46:	d01b      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x320>
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d00f      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x30c>
            break;
 8001f4c:	e01d      	b.n	8001f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f56:	e018      	b.n	8001f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f043 0310 	orr.w	r3, r3, #16
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f60:	e013      	b.n	8001f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f043 0320 	orr.w	r3, r3, #32
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f6a:	e00e      	b.n	8001f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f74:	e009      	b.n	8001f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f7e:	e004      	b.n	8001f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f88:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f98:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7fe fd7b 	bl	8000ab0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	; (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	; (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	; (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff29 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff3e 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff8e 	bl	8002158 <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5d 	bl	8002104 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff31 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffa2 	bl	80021c0 <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800228a:	f000 f802 	bl	8002292 <HAL_SYSTICK_Callback>
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d005      	beq.n	80022c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2204      	movs	r2, #4
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e027      	b.n	8002312 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 020e 	bic.w	r2, r2, #14
 80022d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
    } 
  }
  return status;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	e160      	b.n	80025ee <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8152 	beq.w	80025e8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x38>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b12      	cmp	r3, #18
 8002352:	d123      	bne.n	800239c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	6939      	ldr	r1, [r7, #16]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d00b      	beq.n	80023f0 <HAL_GPIO_Init+0xd4>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d007      	beq.n	80023f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e4:	2b11      	cmp	r3, #17
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b12      	cmp	r3, #18
 80023ee:	d130      	bne.n	8002452 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002426:	2201      	movs	r2, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0201 	and.w	r2, r3, #1
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	2203      	movs	r2, #3
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80ac 	beq.w	80025e8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002490:	4b5e      	ldr	r3, [pc, #376]	; (800260c <HAL_GPIO_Init+0x2f0>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a5d      	ldr	r2, [pc, #372]	; (800260c <HAL_GPIO_Init+0x2f0>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b5b      	ldr	r3, [pc, #364]	; (800260c <HAL_GPIO_Init+0x2f0>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a8:	4a59      	ldr	r2, [pc, #356]	; (8002610 <HAL_GPIO_Init+0x2f4>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d2:	d025      	beq.n	8002520 <HAL_GPIO_Init+0x204>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <HAL_GPIO_Init+0x2f8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d01f      	beq.n	800251c <HAL_GPIO_Init+0x200>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_GPIO_Init+0x2fc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d019      	beq.n	8002518 <HAL_GPIO_Init+0x1fc>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_GPIO_Init+0x300>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d013      	beq.n	8002514 <HAL_GPIO_Init+0x1f8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <HAL_GPIO_Init+0x304>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00d      	beq.n	8002510 <HAL_GPIO_Init+0x1f4>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <HAL_GPIO_Init+0x308>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d007      	beq.n	800250c <HAL_GPIO_Init+0x1f0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_GPIO_Init+0x30c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_GPIO_Init+0x1ec>
 8002504:	2306      	movs	r3, #6
 8002506:	e00c      	b.n	8002522 <HAL_GPIO_Init+0x206>
 8002508:	2307      	movs	r3, #7
 800250a:	e00a      	b.n	8002522 <HAL_GPIO_Init+0x206>
 800250c:	2305      	movs	r3, #5
 800250e:	e008      	b.n	8002522 <HAL_GPIO_Init+0x206>
 8002510:	2304      	movs	r3, #4
 8002512:	e006      	b.n	8002522 <HAL_GPIO_Init+0x206>
 8002514:	2303      	movs	r3, #3
 8002516:	e004      	b.n	8002522 <HAL_GPIO_Init+0x206>
 8002518:	2302      	movs	r3, #2
 800251a:	e002      	b.n	8002522 <HAL_GPIO_Init+0x206>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_GPIO_Init+0x206>
 8002520:	2300      	movs	r3, #0
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	f002 0203 	and.w	r2, r2, #3
 8002528:	0092      	lsls	r2, r2, #2
 800252a:	4093      	lsls	r3, r2
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002532:	4937      	ldr	r1, [pc, #220]	; (8002610 <HAL_GPIO_Init+0x2f4>)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3302      	adds	r3, #2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_GPIO_Init+0x310>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002564:	4a31      	ldr	r2, [pc, #196]	; (800262c <HAL_GPIO_Init+0x310>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800256a:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_GPIO_Init+0x310>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800258e:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_GPIO_Init+0x310>)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_GPIO_Init+0x310>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025b8:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_GPIO_Init+0x310>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_GPIO_Init+0x310>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025e2:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_GPIO_Init+0x310>)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3301      	adds	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f ae97 	bne.w	800232c <HAL_GPIO_Init+0x10>
  }
}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	48000400 	.word	0x48000400
 8002618:	48000800 	.word	0x48000800
 800261c:	48000c00 	.word	0x48000c00
 8002620:	48001000 	.word	0x48001000
 8002624:	48001400 	.word	0x48001400
 8002628:	48001800 	.word	0x48001800
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
 800263c:	4613      	mov	r3, r2
 800263e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002640:	787b      	ldrb	r3, [r7, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800264c:	e002      	b.n	8002654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002666:	af00      	add	r7, sp, #0
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	f000 bf01 	b.w	800347c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8160 	beq.w	800294a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800268a:	4bae      	ldr	r3, [pc, #696]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b04      	cmp	r3, #4
 8002694:	d00c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002696:	4bab      	ldr	r3, [pc, #684]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d159      	bne.n	8002756 <HAL_RCC_OscConfig+0xf6>
 80026a2:	4ba8      	ldr	r3, [pc, #672]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80026aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ae:	d152      	bne.n	8002756 <HAL_RCC_OscConfig+0xf6>
 80026b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_OscConfig+0x82>
 80026dc:	4b99      	ldr	r3, [pc, #612]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0xae>
 80026e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80026f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026fe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800270a:	4b8e      	ldr	r3, [pc, #568]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002712:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002716:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800271a:	fa92 f2a2 	rbit	r2, r2
 800271e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002722:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f002 021f 	and.w	r2, r2, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8102 	beq.w	8002948 <HAL_RCC_OscConfig+0x2e8>
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 80fc 	bne.w	8002948 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	f000 be93 	b.w	800347c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x110>
 8002762:	4b78      	ldr	r3, [pc, #480]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a77      	ldr	r2, [pc, #476]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e030      	b.n	80027d2 <HAL_RCC_OscConfig+0x172>
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x134>
 800277a:	4b72      	ldr	r3, [pc, #456]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a71      	ldr	r2, [pc, #452]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6e      	ldr	r2, [pc, #440]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 800278c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01e      	b.n	80027d2 <HAL_RCC_OscConfig+0x172>
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279e:	d10c      	bne.n	80027ba <HAL_RCC_OscConfig+0x15a>
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a67      	ldr	r2, [pc, #412]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80027a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b65      	ldr	r3, [pc, #404]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a64      	ldr	r2, [pc, #400]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80027b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	e00b      	b.n	80027d2 <HAL_RCC_OscConfig+0x172>
 80027ba:	4b62      	ldr	r3, [pc, #392]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a61      	ldr	r2, [pc, #388]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a5e      	ldr	r2, [pc, #376]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80027cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d059      	beq.n	8002890 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe fdf6 	bl	80013cc <HAL_GetTick>
 80027e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e6:	f7fe fdf1 	bl	80013cc <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d902      	bls.n	80027fc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	f000 be40 	b.w	800347c <HAL_RCC_OscConfig+0xe1c>
 80027fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002800:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002810:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d102      	bne.n	800282e <HAL_RCC_OscConfig+0x1ce>
 8002828:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0x1fa>
 800282e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002832:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002846:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800284a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800285e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002862:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002866:	fa92 f2a2 	rbit	r2, r2
 800286a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800286e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ab      	beq.n	80027e6 <HAL_RCC_OscConfig+0x186>
 800288e:	e05c      	b.n	800294a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe fd9c 	bl	80013cc <HAL_GetTick>
 8002894:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289a:	f7fe fd97 	bl	80013cc <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d902      	bls.n	80028b0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	f000 bde6 	b.w	800347c <HAL_RCC_OscConfig+0xe1c>
 80028b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80028c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_OscConfig+0x282>
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x2ae>
 80028e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80028f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_RCC_OscConfig+0x2e4>)
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002912:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002916:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800291a:	fa92 f2a2 	rbit	r2, r2
 800291e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002922:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f042 0220 	orr.w	r2, r2, #32
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f002 021f 	and.w	r2, r2, #31
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f202 	lsl.w	r2, r1, r2
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1ab      	bne.n	800289a <HAL_RCC_OscConfig+0x23a>
 8002942:	e002      	b.n	800294a <HAL_RCC_OscConfig+0x2ea>
 8002944:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8170 	beq.w	8002c3a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800295a:	4bd0      	ldr	r3, [pc, #832]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00c      	beq.n	8002980 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002966:	4bcd      	ldr	r3, [pc, #820]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d16d      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3ee>
 8002972:	4bca      	ldr	r3, [pc, #808]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800297a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800297e:	d166      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3ee>
 8002980:	2302      	movs	r3, #2
 8002982:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002992:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_OscConfig+0x350>
 80029aa:	4bbc      	ldr	r3, [pc, #752]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	e013      	b.n	80029d8 <HAL_RCC_OscConfig+0x378>
 80029b0:	2302      	movs	r3, #2
 80029b2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029c8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029d4:	4bb1      	ldr	r3, [pc, #708]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2202      	movs	r2, #2
 80029da:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80029de:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80029e2:	fa92 f2a2 	rbit	r2, r2
 80029e6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80029ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029ee:	fab2 f282 	clz	r2, r2
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f042 0220 	orr.w	r2, r2, #32
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	f002 021f 	and.w	r2, r2, #31
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_RCC_OscConfig+0x3ba>
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d002      	beq.n	8002a1a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f000 bd31 	b.w	800347c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1a:	4ba0      	ldr	r3, [pc, #640]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	21f8      	movs	r1, #248	; 0xf8
 8002a2a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002a32:	fa91 f1a1 	rbit	r1, r1
 8002a36:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002a3a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a3e:	fab1 f181 	clz	r1, r1
 8002a42:	b2c9      	uxtb	r1, r1
 8002a44:	408b      	lsls	r3, r1
 8002a46:	4995      	ldr	r1, [pc, #596]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4c:	e0f5      	b.n	8002c3a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8085 	beq.w	8002b64 <HAL_RCC_OscConfig+0x504>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002a6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	461a      	mov	r2, r3
 8002a82:	2301      	movs	r3, #1
 8002a84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe fca1 	bl	80013cc <HAL_GetTick>
 8002a8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a90:	f7fe fc9c 	bl	80013cc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d902      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	f000 bceb 	b.w	800347c <HAL_RCC_OscConfig+0xe1c>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002ab8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d102      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x476>
 8002ad0:	4b72      	ldr	r3, [pc, #456]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	e013      	b.n	8002afe <HAL_RCC_OscConfig+0x49e>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002ae8:	2302      	movs	r3, #2
 8002aea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002aee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002afa:	4b68      	ldr	r3, [pc, #416]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2202      	movs	r2, #2
 8002b00:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002b04:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002b08:	fa92 f2a2 	rbit	r2, r2
 8002b0c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002b10:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b14:	fab2 f282 	clz	r2, r2
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	f042 0220 	orr.w	r2, r2, #32
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	f002 021f 	and.w	r2, r2, #31
 8002b24:	2101      	movs	r1, #1
 8002b26:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0af      	beq.n	8002a90 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b5a      	ldr	r3, [pc, #360]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	21f8      	movs	r1, #248	; 0xf8
 8002b40:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002b48:	fa91 f1a1 	rbit	r1, r1
 8002b4c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002b50:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b54:	fab1 f181 	clz	r1, r1
 8002b58:	b2c9      	uxtb	r1, r1
 8002b5a:	408b      	lsls	r3, r1
 8002b5c:	494f      	ldr	r1, [pc, #316]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
 8002b62:	e06a      	b.n	8002c3a <HAL_RCC_OscConfig+0x5da>
 8002b64:	2301      	movs	r3, #1
 8002b66:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002b76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fc1c 	bl	80013cc <HAL_GetTick>
 8002b94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7fe fc17 	bl	80013cc <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d902      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	f000 bc66 	b.w	800347c <HAL_RCC_OscConfig+0xe1c>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002bc2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d102      	bne.n	8002be0 <HAL_RCC_OscConfig+0x580>
 8002bda:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	e013      	b.n	8002c08 <HAL_RCC_OscConfig+0x5a8>
 8002be0:	2302      	movs	r3, #2
 8002be2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bf8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_RCC_OscConfig+0x63c>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002c0e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002c12:	fa92 f2a2 	rbit	r2, r2
 8002c16:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002c1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c1e:	fab2 f282 	clz	r2, r2
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f042 0220 	orr.w	r2, r2, #32
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f002 021f 	and.w	r2, r2, #31
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1af      	bne.n	8002b9a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80da 	beq.w	8002dfe <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d069      	beq.n	8002d28 <HAL_RCC_OscConfig+0x6c8>
 8002c54:	2301      	movs	r3, #1
 8002c56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002c66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_OscConfig+0x640>)
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe fba5 	bl	80013cc <HAL_GetTick>
 8002c82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c86:	e00d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c88:	f7fe fba0 	bl	80013cc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d905      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e3ef      	b.n	800347c <HAL_RCC_OscConfig+0xe1c>
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	10908120 	.word	0x10908120
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cae:	fa93 f2a3 	rbit	r2, r3
 8002cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	fa93 f2a3 	rbit	r2, r3
 8002cca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	fa93 f2a3 	rbit	r2, r3
 8002ce2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ce6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce8:	4ba4      	ldr	r3, [pc, #656]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	6019      	str	r1, [r3, #0]
 8002cf4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f1a3 	rbit	r1, r3
 8002cfe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d02:	6019      	str	r1, [r3, #0]
  return result;
 8002d04:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0b0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x628>
 8002d26:	e06a      	b.n	8002dfe <HAL_RCC_OscConfig+0x79e>
 8002d28:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	fa93 f2a3 	rbit	r2, r3
 8002d3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d3e:	601a      	str	r2, [r3, #0]
  return result;
 8002d40:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d44:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b8c      	ldr	r3, [pc, #560]	; (8002f80 <HAL_RCC_OscConfig+0x920>)
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	461a      	mov	r2, r3
 8002d56:	2300      	movs	r3, #0
 8002d58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fb37 	bl	80013cc <HAL_GetTick>
 8002d5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d62:	e009      	b.n	8002d78 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fe fb32 	bl	80013cc <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e381      	b.n	800347c <HAL_RCC_OscConfig+0xe1c>
 8002d78:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	fa93 f2a3 	rbit	r2, r3
 8002d8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d94:	2202      	movs	r2, #2
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dac:	2202      	movs	r2, #2
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002dbe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc0:	4b6e      	ldr	r3, [pc, #440]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dc8:	2102      	movs	r1, #2
 8002dca:	6019      	str	r1, [r3, #0]
 8002dcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	fa93 f1a3 	rbit	r1, r3
 8002dd6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002dda:	6019      	str	r1, [r3, #0]
  return result;
 8002ddc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1b2      	bne.n	8002d64 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8157 	beq.w	80030bc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e14:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d112      	bne.n	8002e46 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e20:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	4a55      	ldr	r2, [pc, #340]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	61d3      	str	r3, [r2, #28]
 8002e2c:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b4f      	ldr	r3, [pc, #316]	; (8002f84 <HAL_RCC_OscConfig+0x924>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11a      	bne.n	8002e88 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <HAL_RCC_OscConfig+0x924>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a4b      	ldr	r2, [pc, #300]	; (8002f84 <HAL_RCC_OscConfig+0x924>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fab5 	bl	80013cc <HAL_GetTick>
 8002e62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	e009      	b.n	8002e7c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e68:	f7fe fab0 	bl	80013cc <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	; 0x64
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e2ff      	b.n	800347c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <HAL_RCC_OscConfig+0x924>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ef      	beq.n	8002e68 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x840>
 8002e92:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a39      	ldr	r2, [pc, #228]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	e02f      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a0>
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x864>
 8002eaa:	4b34      	ldr	r3, [pc, #208]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a33      	ldr	r2, [pc, #204]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a30      	ldr	r2, [pc, #192]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6213      	str	r3, [r2, #32]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a0>
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b05      	cmp	r3, #5
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x888>
 8002ece:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002ed4:	f043 0304 	orr.w	r3, r3, #4
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a27      	ldr	r2, [pc, #156]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a0>
 8002ee8:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002efa:	f023 0304 	bic.w	r3, r3, #4
 8002efe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d06a      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe fa5f 	bl	80013cc <HAL_GetTick>
 8002f0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe fa5a 	bl	80013cc <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e2a7      	b.n	800347c <HAL_RCC_OscConfig+0xe1c>
 8002f2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f30:	2202      	movs	r2, #2
 8002f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fa93 f2a3 	rbit	r2, r3
 8002f3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f48:	2202      	movs	r2, #2
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	fa93 f2a3 	rbit	r2, r3
 8002f56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f5a:	601a      	str	r2, [r3, #0]
  return result;
 8002f5c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d108      	bne.n	8002f88 <HAL_RCC_OscConfig+0x928>
 8002f76:	4b01      	ldr	r3, [pc, #4]	; (8002f7c <HAL_RCC_OscConfig+0x91c>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	e013      	b.n	8002fa4 <HAL_RCC_OscConfig+0x944>
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	10908120 	.word	0x10908120
 8002f84:	40007000 	.word	0x40007000
 8002f88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	4bc0      	ldr	r3, [pc, #768]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002fa8:	2102      	movs	r1, #2
 8002faa:	6011      	str	r1, [r2, #0]
 8002fac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	fa92 f1a2 	rbit	r1, r2
 8002fb6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fba:	6011      	str	r1, [r2, #0]
  return result;
 8002fbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	fab2 f282 	clz	r2, r2
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f002 021f 	and.w	r2, r2, #31
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d09a      	beq.n	8002f14 <HAL_RCC_OscConfig+0x8b4>
 8002fde:	e063      	b.n	80030a8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe f9f4 	bl	80013cc <HAL_GetTick>
 8002fe4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe8:	e00b      	b.n	8003002 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe f9ef 	bl	80013cc <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e23c      	b.n	800347c <HAL_RCC_OscConfig+0xe1c>
 8003002:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003006:	2202      	movs	r2, #2
 8003008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	fa93 f2a3 	rbit	r2, r3
 8003014:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800301e:	2202      	movs	r2, #2
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003030:	601a      	str	r2, [r3, #0]
  return result;
 8003032:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003036:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f043 0302 	orr.w	r3, r3, #2
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d102      	bne.n	8003052 <HAL_RCC_OscConfig+0x9f2>
 800304c:	4b95      	ldr	r3, [pc, #596]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	e00d      	b.n	800306e <HAL_RCC_OscConfig+0xa0e>
 8003052:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003056:	2202      	movs	r2, #2
 8003058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fa93 f2a3 	rbit	r2, r3
 8003064:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	4b8e      	ldr	r3, [pc, #568]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003072:	2102      	movs	r1, #2
 8003074:	6011      	str	r1, [r2, #0]
 8003076:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	fa92 f1a2 	rbit	r1, r2
 8003080:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003084:	6011      	str	r1, [r2, #0]
  return result;
 8003086:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	fab2 f282 	clz	r2, r2
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f002 021f 	and.w	r2, r2, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f202 	lsl.w	r2, r1, r2
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1a0      	bne.n	8002fea <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b0:	4b7c      	ldr	r3, [pc, #496]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4a7b      	ldr	r2, [pc, #492]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80030b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 81d9 	beq.w	800347a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c8:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	f000 81a6 	beq.w	8003422 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	f040 811e 	bne.w	800331e <HAL_RCC_OscConfig+0xcbe>
 80030e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80030e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030fa:	601a      	str	r2, [r3, #0]
  return result;
 80030fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003100:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800310c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	461a      	mov	r2, r3
 8003114:	2300      	movs	r3, #0
 8003116:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe f958 	bl	80013cc <HAL_GetTick>
 800311c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003120:	e009      	b.n	8003136 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003122:	f7fe f953 	bl	80013cc <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e1a2      	b.n	800347c <HAL_RCC_OscConfig+0xe1c>
 8003136:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800313a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800314e:	601a      	str	r2, [r3, #0]
  return result;
 8003150:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003154:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d102      	bne.n	8003170 <HAL_RCC_OscConfig+0xb10>
 800316a:	4b4e      	ldr	r3, [pc, #312]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	e01b      	b.n	80031a8 <HAL_RCC_OscConfig+0xb48>
 8003170:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003174:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fa93 f2a3 	rbit	r2, r3
 8003184:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800318e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80031ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031b0:	6011      	str	r1, [r2, #0]
 80031b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	fa92 f1a2 	rbit	r1, r2
 80031bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031c0:	6011      	str	r1, [r2, #0]
  return result;
 80031c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	fab2 f282 	clz	r2, r2
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	f042 0220 	orr.w	r2, r2, #32
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f002 021f 	and.w	r2, r2, #31
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f202 	lsl.w	r2, r1, r2
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d19e      	bne.n	8003122 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e4:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	f023 020f 	bic.w	r2, r3, #15
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	492c      	ldr	r1, [pc, #176]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80031f8:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a19      	ldr	r1, [r3, #32]
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	430b      	orrs	r3, r1
 800320e:	4925      	ldr	r1, [pc, #148]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800321c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	fa93 f2a3 	rbit	r2, r3
 8003228:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800322c:	601a      	str	r2, [r3, #0]
  return result;
 800322e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003232:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800323e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	461a      	mov	r2, r3
 8003246:	2301      	movs	r3, #1
 8003248:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fe f8bf 	bl	80013cc <HAL_GetTick>
 800324e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003252:	e009      	b.n	8003268 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003254:	f7fe f8ba 	bl	80013cc <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e109      	b.n	800347c <HAL_RCC_OscConfig+0xe1c>
 8003268:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800326c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fa93 f2a3 	rbit	r2, r3
 800327c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003280:	601a      	str	r2, [r3, #0]
  return result;
 8003282:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003286:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0xc48>
 800329c:	4b01      	ldr	r3, [pc, #4]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	e01e      	b.n	80032e0 <HAL_RCC_OscConfig+0xc80>
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	fa93 f2a3 	rbit	r2, r3
 80032bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCC_OscConfig+0xe28>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80032e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032e8:	6011      	str	r1, [r2, #0]
 80032ea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	fa92 f1a2 	rbit	r1, r2
 80032f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032f8:	6011      	str	r1, [r2, #0]
  return result;
 80032fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	fab2 f282 	clz	r2, r2
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	f042 0220 	orr.w	r2, r2, #32
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f002 021f 	and.w	r2, r2, #31
 8003310:	2101      	movs	r1, #1
 8003312:	fa01 f202 	lsl.w	r2, r1, r2
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d09b      	beq.n	8003254 <HAL_RCC_OscConfig+0xbf4>
 800331c:	e0ad      	b.n	800347a <HAL_RCC_OscConfig+0xe1a>
 800331e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003322:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003336:	601a      	str	r2, [r3, #0]
  return result;
 8003338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800333c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003348:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	461a      	mov	r2, r3
 8003350:	2300      	movs	r3, #0
 8003352:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe f83a 	bl	80013cc <HAL_GetTick>
 8003358:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335c:	e009      	b.n	8003372 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335e:	f7fe f835 	bl	80013cc <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e084      	b.n	800347c <HAL_RCC_OscConfig+0xe1c>
 8003372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800338a:	601a      	str	r2, [r3, #0]
  return result;
 800338c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003390:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_RCC_OscConfig+0xd4c>
 80033a6:	4b38      	ldr	r3, [pc, #224]	; (8003488 <HAL_RCC_OscConfig+0xe28>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0xd84>
 80033ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f107 0320 	add.w	r3, r7, #32
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f107 031c 	add.w	r3, r7, #28
 80033ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f107 031c 	add.w	r3, r7, #28
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	fa93 f2a3 	rbit	r2, r3
 80033da:	f107 0318 	add.w	r3, r7, #24
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_RCC_OscConfig+0xe28>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f107 0214 	add.w	r2, r7, #20
 80033e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033ec:	6011      	str	r1, [r2, #0]
 80033ee:	f107 0214 	add.w	r2, r7, #20
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	fa92 f1a2 	rbit	r1, r2
 80033f8:	f107 0210 	add.w	r2, r7, #16
 80033fc:	6011      	str	r1, [r2, #0]
  return result;
 80033fe:	f107 0210 	add.w	r2, r7, #16
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	fab2 f282 	clz	r2, r2
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	f042 0220 	orr.w	r2, r2, #32
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	f002 021f 	and.w	r2, r2, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d19e      	bne.n	800335e <HAL_RCC_OscConfig+0xcfe>
 8003420:	e02b      	b.n	800347a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e025      	b.n	800347c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_RCC_OscConfig+0xe28>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_RCC_OscConfig+0xe28>)
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003440:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003444:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003448:	1d3b      	adds	r3, r7, #4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	429a      	cmp	r2, r3
 8003450:	d111      	bne.n	8003476 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003452:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003456:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003460:	429a      	cmp	r2, r3
 8003462:	d108      	bne.n	8003476 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003464:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003468:	f003 020f 	and.w	r2, r3, #15
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003472:	429a      	cmp	r2, r3
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000

0800348c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b09e      	sub	sp, #120	; 0x78
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e162      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a4:	4b90      	ldr	r3, [pc, #576]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d910      	bls.n	80034d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b8d      	ldr	r3, [pc, #564]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 0207 	bic.w	r2, r3, #7
 80034ba:	498b      	ldr	r1, [pc, #556]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e14a      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e0:	4b82      	ldr	r3, [pc, #520]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	497f      	ldr	r1, [pc, #508]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80dc 	beq.w	80036b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d13c      	bne.n	8003582 <HAL_RCC_ClockConfig+0xf6>
 8003508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d102      	bne.n	8003532 <HAL_RCC_ClockConfig+0xa6>
 800352c:	4b6f      	ldr	r3, [pc, #444]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	e00f      	b.n	8003552 <HAL_RCC_ClockConfig+0xc6>
 8003532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003536:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	667b      	str	r3, [r7, #100]	; 0x64
 8003540:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003544:	663b      	str	r3, [r7, #96]	; 0x60
 8003546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800354e:	4b67      	ldr	r3, [pc, #412]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003556:	65ba      	str	r2, [r7, #88]	; 0x58
 8003558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800355a:	fa92 f2a2 	rbit	r2, r2
 800355e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003562:	fab2 f282 	clz	r2, r2
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f042 0220 	orr.w	r2, r2, #32
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f002 021f 	and.w	r2, r2, #31
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f202 	lsl.w	r2, r1, r2
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d17b      	bne.n	8003676 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0f3      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d13c      	bne.n	8003604 <HAL_RCC_ClockConfig+0x178>
 800358a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d102      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x128>
 80035ae:	4b4f      	ldr	r3, [pc, #316]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	e00f      	b.n	80035d4 <HAL_RCC_ClockConfig+0x148>
 80035b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	647b      	str	r3, [r7, #68]	; 0x44
 80035c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035c6:	643b      	str	r3, [r7, #64]	; 0x40
 80035c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d0:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80035da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035dc:	fa92 f2a2 	rbit	r2, r2
 80035e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e4:	fab2 f282 	clz	r2, r2
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f042 0220 	orr.w	r2, r2, #32
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	f002 021f 	and.w	r2, r2, #31
 80035f4:	2101      	movs	r1, #1
 80035f6:	fa01 f202 	lsl.w	r2, r1, r2
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d13a      	bne.n	8003676 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0b2      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
 8003604:	2302      	movs	r3, #2
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d102      	bne.n	800362c <HAL_RCC_ClockConfig+0x1a0>
 8003626:	4b31      	ldr	r3, [pc, #196]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	e00d      	b.n	8003648 <HAL_RCC_ClockConfig+0x1bc>
 800362c:	2302      	movs	r3, #2
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	2302      	movs	r3, #2
 800363a:	623b      	str	r3, [r7, #32]
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2202      	movs	r2, #2
 800364a:	61ba      	str	r2, [r7, #24]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	fa92 f2a2 	rbit	r2, r2
 8003652:	617a      	str	r2, [r7, #20]
  return result;
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	fab2 f282 	clz	r2, r2
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f002 021f 	and.w	r2, r2, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e079      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f023 0203 	bic.w	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	491a      	ldr	r1, [pc, #104]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003688:	f7fd fea0 	bl	80013cc <HAL_GetTick>
 800368c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003690:	f7fd fe9c 	bl	80013cc <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e061      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 020c 	and.w	r2, r3, #12
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d1eb      	bne.n	8003690 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d214      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 0207 	bic.w	r2, r3, #7
 80036ce:	4906      	ldr	r1, [pc, #24]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e040      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
 80036e8:	40022000 	.word	0x40022000
 80036ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_RCC_ClockConfig+0x2e8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	491a      	ldr	r1, [pc, #104]	; (8003774 <HAL_RCC_ClockConfig+0x2e8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371a:	4b16      	ldr	r3, [pc, #88]	; (8003774 <HAL_RCC_ClockConfig+0x2e8>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4912      	ldr	r1, [pc, #72]	; (8003774 <HAL_RCC_ClockConfig+0x2e8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800372e:	f000 f829 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003732:	4601      	mov	r1, r0
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_RCC_ClockConfig+0x2e8>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373c:	22f0      	movs	r2, #240	; 0xf0
 800373e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	fa92 f2a2 	rbit	r2, r2
 8003746:	60fa      	str	r2, [r7, #12]
  return result;
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	fab2 f282 	clz	r2, r2
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	40d3      	lsrs	r3, r2
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <HAL_RCC_ClockConfig+0x2ec>)
 8003754:	5cd3      	ldrb	r3, [r2, r3]
 8003756:	fa21 f303 	lsr.w	r3, r1, r3
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <HAL_RCC_ClockConfig+0x2f0>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_RCC_ClockConfig+0x2f4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fdee 	bl	8001344 <HAL_InitTick>
  
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3778      	adds	r7, #120	; 0x78
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	08006eec 	.word	0x08006eec
 800377c:	200000c0 	.word	0x200000c0
 8003780:	200000c4 	.word	0x200000c4

08003784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	b08b      	sub	sp, #44	; 0x2c
 8003788:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800379e:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x30>
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x36>
 80037b2:	e03f      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037b4:	4b25      	ldr	r3, [pc, #148]	; (800384c <HAL_RCC_GetSysClockFreq+0xc8>)
 80037b6:	623b      	str	r3, [r7, #32]
      break;
 80037b8:	e03f      	b.n	800383a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	fa92 f2a2 	rbit	r2, r2
 80037cc:	607a      	str	r2, [r7, #4]
  return result;
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	fab2 f282 	clz	r2, r2
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	40d3      	lsrs	r3, r2
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037da:	5cd3      	ldrb	r3, [r2, r3]
 80037dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037de:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	220f      	movs	r2, #15
 80037e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	fa92 f2a2 	rbit	r2, r2
 80037f0:	60fa      	str	r2, [r7, #12]
  return result;
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	fab2 f282 	clz	r2, r2
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	40d3      	lsrs	r3, r2
 80037fc:	4a15      	ldr	r2, [pc, #84]	; (8003854 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800380c:	4a0f      	ldr	r2, [pc, #60]	; (800384c <HAL_RCC_GetSysClockFreq+0xc8>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	fbb2 f2f3 	udiv	r2, r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
 800381c:	e007      	b.n	800382e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800381e:	4a0b      	ldr	r2, [pc, #44]	; (800384c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	fbb2 f2f3 	udiv	r2, r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	623b      	str	r3, [r7, #32]
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003836:	623b      	str	r3, [r7, #32]
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	6a3b      	ldr	r3, [r7, #32]
}
 800383c:	4618      	mov	r0, r3
 800383e:	372c      	adds	r7, #44	; 0x2c
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40021000 	.word	0x40021000
 800384c:	007a1200 	.word	0x007a1200
 8003850:	08006f04 	.word	0x08006f04
 8003854:	08006f14 	.word	0x08006f14

08003858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800385c:	4b03      	ldr	r3, [pc, #12]	; (800386c <HAL_RCC_GetHCLKFreq+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	200000c0 	.word	0x200000c0

08003870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003876:	f7ff ffef 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 800387a:	4601      	mov	r1, r0
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003884:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003888:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	fa92 f2a2 	rbit	r2, r2
 8003890:	603a      	str	r2, [r7, #0]
  return result;
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	fab2 f282 	clz	r2, r2
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	40d3      	lsrs	r3, r2
 800389c:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800389e:	5cd3      	ldrb	r3, [r2, r3]
 80038a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08006efc 	.word	0x08006efc

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038ba:	f7ff ffcd 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 80038be:	4601      	mov	r1, r0
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80038c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	fa92 f2a2 	rbit	r2, r2
 80038d4:	603a      	str	r2, [r7, #0]
  return result;
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	fab2 f282 	clz	r2, r2
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	40d3      	lsrs	r3, r2
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000
 80038f4:	08006efc 	.word	0x08006efc

080038f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b092      	sub	sp, #72	; 0x48
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80d7 	beq.w	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800391c:	4b4e      	ldr	r3, [pc, #312]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10e      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	4a4a      	ldr	r2, [pc, #296]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003932:	61d3      	str	r3, [r2, #28]
 8003934:	4b48      	ldr	r3, [pc, #288]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003946:	4b45      	ldr	r3, [pc, #276]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d118      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003952:	4b42      	ldr	r3, [pc, #264]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a41      	ldr	r2, [pc, #260]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395e:	f7fd fd35 	bl	80013cc <HAL_GetTick>
 8003962:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	e008      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003966:	f7fd fd31 	bl	80013cc <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b64      	cmp	r3, #100	; 0x64
 8003972:	d901      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e1d6      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003984:	4b34      	ldr	r3, [pc, #208]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8084 	beq.w	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d07c      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	461a      	mov	r2, r3
 80039ce:	2301      	movs	r3, #1
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	461a      	mov	r2, r3
 80039f2:	2300      	movs	r3, #0
 80039f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039f6:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04b      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fd fce1 	bl	80013cc <HAL_GetTick>
 8003a0a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fd fcdd 	bl	80013cc <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e180      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003a24:	2302      	movs	r3, #2
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a30:	2302      	movs	r3, #2
 8003a32:	623b      	str	r3, [r7, #32]
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	61fb      	str	r3, [r7, #28]
  return result;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f043 0302 	orr.w	r3, r3, #2
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d108      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a52:	4b01      	ldr	r3, [pc, #4]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	e00d      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	10908100 	.word	0x10908100
 8003a64:	2302      	movs	r3, #2
 8003a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	4ba0      	ldr	r3, [pc, #640]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	2202      	movs	r2, #2
 8003a76:	613a      	str	r2, [r7, #16]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	fa92 f2a2 	rbit	r2, r2
 8003a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	fab2 f282 	clz	r2, r2
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	f002 021f 	and.w	r2, r2, #31
 8003a92:	2101      	movs	r1, #1
 8003a94:	fa01 f202 	lsl.w	r2, r1, r2
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0b7      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a9e:	4b95      	ldr	r3, [pc, #596]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4992      	ldr	r1, [pc, #584]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab8:	4b8e      	ldr	r3, [pc, #568]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4a8d      	ldr	r2, [pc, #564]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ad0:	4b88      	ldr	r3, [pc, #544]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	f023 0203 	bic.w	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4985      	ldr	r1, [pc, #532]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aee:	4b81      	ldr	r3, [pc, #516]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	497e      	ldr	r1, [pc, #504]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b0c:	4b79      	ldr	r3, [pc, #484]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	4976      	ldr	r1, [pc, #472]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b2a:	4b72      	ldr	r3, [pc, #456]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f023 0210 	bic.w	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	496f      	ldr	r1, [pc, #444]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b48:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	4967      	ldr	r1, [pc, #412]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b66:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f023 0220 	bic.w	r2, r3, #32
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4960      	ldr	r1, [pc, #384]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b84:	4b5b      	ldr	r3, [pc, #364]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	4958      	ldr	r1, [pc, #352]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ba2:	4b54      	ldr	r3, [pc, #336]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	4951      	ldr	r1, [pc, #324]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bc0:	4b4c      	ldr	r3, [pc, #304]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	4949      	ldr	r1, [pc, #292]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bde:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4942      	ldr	r1, [pc, #264]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	493a      	ldr	r1, [pc, #232]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	4933      	ldr	r1, [pc, #204]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c38:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	492b      	ldr	r1, [pc, #172]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003c56:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4924      	ldr	r1, [pc, #144]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003c74:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	491c      	ldr	r1, [pc, #112]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	4915      	ldr	r1, [pc, #84]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	490d      	ldr	r1, [pc, #52]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cda:	4906      	ldr	r1, [pc, #24]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00c      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003cec:	4b01      	ldr	r3, [pc, #4]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	e002      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	490b      	ldr	r1, [pc, #44]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1e:	4904      	ldr	r1, [pc, #16]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3748      	adds	r7, #72	; 0x48
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000

08003d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e01d      	b.n	8003d82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fd f908 	bl	8000f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f000 f950 	bl	8004018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d122      	bne.n	8003de6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d11b      	bne.n	8003de6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0202 	mvn.w	r2, #2
 8003db6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f905 	bl	8003fdc <HAL_TIM_IC_CaptureCallback>
 8003dd2:	e005      	b.n	8003de0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f8f7 	bl	8003fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f908 	bl	8003ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d122      	bne.n	8003e3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d11b      	bne.n	8003e3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f06f 0204 	mvn.w	r2, #4
 8003e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f8db 	bl	8003fdc <HAL_TIM_IC_CaptureCallback>
 8003e26:	e005      	b.n	8003e34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f8cd 	bl	8003fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8de 	bl	8003ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d122      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d11b      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f06f 0208 	mvn.w	r2, #8
 8003e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2204      	movs	r2, #4
 8003e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f8b1 	bl	8003fdc <HAL_TIM_IC_CaptureCallback>
 8003e7a:	e005      	b.n	8003e88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f8a3 	bl	8003fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8b4 	bl	8003ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d122      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b10      	cmp	r3, #16
 8003ea8:	d11b      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f06f 0210 	mvn.w	r2, #16
 8003eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f887 	bl	8003fdc <HAL_TIM_IC_CaptureCallback>
 8003ece:	e005      	b.n	8003edc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f879 	bl	8003fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f88a 	bl	8003ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d10e      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d107      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f06f 0201 	mvn.w	r2, #1
 8003f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fc fc9b 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f18:	2b80      	cmp	r3, #128	; 0x80
 8003f1a:	d10e      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	2b80      	cmp	r3, #128	; 0x80
 8003f28:	d107      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f9a3 	bl	8004280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f48:	d10e      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d107      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f996 	bl	8004294 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d10e      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d107      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f838 	bl	8004004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0220 	mvn.w	r2, #32
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f956 	bl	800426c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a42      	ldr	r2, [pc, #264]	; (8004134 <TIM_Base_SetConfig+0x11c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d00f      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a3f      	ldr	r2, [pc, #252]	; (8004138 <TIM_Base_SetConfig+0x120>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00b      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3e      	ldr	r2, [pc, #248]	; (800413c <TIM_Base_SetConfig+0x124>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3d      	ldr	r2, [pc, #244]	; (8004140 <TIM_Base_SetConfig+0x128>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3c      	ldr	r2, [pc, #240]	; (8004144 <TIM_Base_SetConfig+0x12c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d108      	bne.n	800406a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a31      	ldr	r2, [pc, #196]	; (8004134 <TIM_Base_SetConfig+0x11c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01f      	beq.n	80040b2 <TIM_Base_SetConfig+0x9a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d01b      	beq.n	80040b2 <TIM_Base_SetConfig+0x9a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2e      	ldr	r2, [pc, #184]	; (8004138 <TIM_Base_SetConfig+0x120>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d017      	beq.n	80040b2 <TIM_Base_SetConfig+0x9a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2d      	ldr	r2, [pc, #180]	; (800413c <TIM_Base_SetConfig+0x124>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <TIM_Base_SetConfig+0x9a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2c      	ldr	r2, [pc, #176]	; (8004140 <TIM_Base_SetConfig+0x128>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00f      	beq.n	80040b2 <TIM_Base_SetConfig+0x9a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a2c      	ldr	r2, [pc, #176]	; (8004148 <TIM_Base_SetConfig+0x130>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00b      	beq.n	80040b2 <TIM_Base_SetConfig+0x9a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a2b      	ldr	r2, [pc, #172]	; (800414c <TIM_Base_SetConfig+0x134>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <TIM_Base_SetConfig+0x9a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2a      	ldr	r2, [pc, #168]	; (8004150 <TIM_Base_SetConfig+0x138>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d003      	beq.n	80040b2 <TIM_Base_SetConfig+0x9a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a25      	ldr	r2, [pc, #148]	; (8004144 <TIM_Base_SetConfig+0x12c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d108      	bne.n	80040c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a12      	ldr	r2, [pc, #72]	; (8004134 <TIM_Base_SetConfig+0x11c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <TIM_Base_SetConfig+0x100>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a13      	ldr	r2, [pc, #76]	; (8004140 <TIM_Base_SetConfig+0x128>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00f      	beq.n	8004118 <TIM_Base_SetConfig+0x100>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a13      	ldr	r2, [pc, #76]	; (8004148 <TIM_Base_SetConfig+0x130>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00b      	beq.n	8004118 <TIM_Base_SetConfig+0x100>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a12      	ldr	r2, [pc, #72]	; (800414c <TIM_Base_SetConfig+0x134>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <TIM_Base_SetConfig+0x100>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a11      	ldr	r2, [pc, #68]	; (8004150 <TIM_Base_SetConfig+0x138>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_Base_SetConfig+0x100>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <TIM_Base_SetConfig+0x12c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d103      	bne.n	8004120 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	615a      	str	r2, [r3, #20]
}
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40012c00 	.word	0x40012c00
 8004138:	40000400 	.word	0x40000400
 800413c:	40000800 	.word	0x40000800
 8004140:	40013400 	.word	0x40013400
 8004144:	40015000 	.word	0x40015000
 8004148:	40014000 	.word	0x40014000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800

08004154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004168:	2302      	movs	r3, #2
 800416a:	e06d      	b.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a30      	ldr	r2, [pc, #192]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d009      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2d      	ldr	r2, [pc, #180]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d108      	bne.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01d      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e8:	d018      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a15      	ldr	r2, [pc, #84]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a11      	ldr	r2, [pc, #68]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d10c      	bne.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004222:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40013400 	.word	0x40013400
 800425c:	40015000 	.word	0x40015000
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800
 8004268:	40014000 	.word	0x40014000

0800426c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e040      	b.n	800433c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fc fe84 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	; 0x24
 80042d4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fb0e 	bl	8004908 <UART_SetConfig>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e022      	b.n	800433c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fd1c 	bl	8004d3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fda3 	bl	8004e80 <UART_CheckIdleState>
 800433a:	4603      	mov	r3, r0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	2b20      	cmp	r3, #32
 800435a:	f040 8081 	bne.w	8004460 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_UART_Transmit+0x26>
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e079      	b.n	8004462 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_UART_Transmit+0x38>
 8004378:	2302      	movs	r3, #2
 800437a:	e072      	b.n	8004462 <HAL_UART_Transmit+0x11e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2221      	movs	r2, #33	; 0x21
 800438e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004390:	f7fd f81c 	bl	80013cc <HAL_GetTick>
 8004394:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	88fa      	ldrh	r2, [r7, #6]
 800439a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ae:	d108      	bne.n	80043c2 <HAL_UART_Transmit+0x7e>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e003      	b.n	80043ca <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043ca:	e02d      	b.n	8004428 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2200      	movs	r2, #0
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fd97 	bl	8004f0a <UART_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e03d      	b.n	8004462 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f8:	b292      	uxth	r2, r2
 80043fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	3302      	adds	r3, #2
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e008      	b.n	8004416 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	b292      	uxth	r2, r2
 800440e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	3301      	adds	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1cb      	bne.n	80043cc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2200      	movs	r2, #0
 800443c:	2140      	movs	r1, #64	; 0x40
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fd63 	bl	8004f0a <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e009      	b.n	8004462 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447e:	2b20      	cmp	r3, #32
 8004480:	d144      	bne.n	800450c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_UART_Transmit_IT+0x22>
 8004488:	88fb      	ldrh	r3, [r7, #6]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e03d      	b.n	800450e <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_UART_Transmit_IT+0x34>
 800449c:	2302      	movs	r3, #2
 800449e:	e036      	b.n	800450e <HAL_UART_Transmit_IT+0xa2>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	88fa      	ldrh	r2, [r7, #6]
 80044b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	88fa      	ldrh	r2, [r7, #6]
 80044ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2221      	movs	r2, #33	; 0x21
 80044ce:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d8:	d107      	bne.n	80044ea <HAL_UART_Transmit_IT+0x7e>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a0d      	ldr	r2, [pc, #52]	; (800451c <HAL_UART_Transmit_IT+0xb0>)
 80044e6:	665a      	str	r2, [r3, #100]	; 0x64
 80044e8:	e002      	b.n	80044f0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a0c      	ldr	r2, [pc, #48]	; (8004520 <HAL_UART_Transmit_IT+0xb4>)
 80044ee:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004506:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	080050e1 	.word	0x080050e1
 8004520:	0800506d 	.word	0x0800506d

08004524 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004536:	2b20      	cmp	r3, #32
 8004538:	f040 808a 	bne.w	8004650 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_UART_Receive_IT+0x24>
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e082      	b.n	8004652 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_UART_Receive_IT+0x36>
 8004556:	2302      	movs	r3, #2
 8004558:	e07b      	b.n	8004652 <HAL_UART_Receive_IT+0x12e>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	88fa      	ldrh	r2, [r7, #6]
 800456c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	88fa      	ldrh	r2, [r7, #6]
 8004574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004586:	d10e      	bne.n	80045a6 <HAL_UART_Receive_IT+0x82>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d105      	bne.n	800459c <HAL_UART_Receive_IT+0x78>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004596:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800459a:	e02d      	b.n	80045f8 <HAL_UART_Receive_IT+0xd4>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	22ff      	movs	r2, #255	; 0xff
 80045a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045a4:	e028      	b.n	80045f8 <HAL_UART_Receive_IT+0xd4>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10d      	bne.n	80045ca <HAL_UART_Receive_IT+0xa6>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <HAL_UART_Receive_IT+0x9c>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	22ff      	movs	r2, #255	; 0xff
 80045ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045be:	e01b      	b.n	80045f8 <HAL_UART_Receive_IT+0xd4>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	227f      	movs	r2, #127	; 0x7f
 80045c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045c8:	e016      	b.n	80045f8 <HAL_UART_Receive_IT+0xd4>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045d2:	d10d      	bne.n	80045f0 <HAL_UART_Receive_IT+0xcc>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <HAL_UART_Receive_IT+0xc2>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	227f      	movs	r2, #127	; 0x7f
 80045e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045e4:	e008      	b.n	80045f8 <HAL_UART_Receive_IT+0xd4>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	223f      	movs	r2, #63	; 0x3f
 80045ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045ee:	e003      	b.n	80045f8 <HAL_UART_Receive_IT+0xd4>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2222      	movs	r2, #34	; 0x22
 8004602:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461c:	d107      	bne.n	800462e <HAL_UART_Receive_IT+0x10a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <HAL_UART_Receive_IT+0x13c>)
 800462a:	661a      	str	r2, [r3, #96]	; 0x60
 800462c:	e002      	b.n	8004634 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4a0c      	ldr	r2, [pc, #48]	; (8004664 <HAL_UART_Receive_IT+0x140>)
 8004632:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800464a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	e000      	b.n	8004652 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004650:	2302      	movs	r3, #2
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	08005235 	.word	0x08005235
 8004664:	0800518f 	.word	0x0800518f

08004668 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	f640 030f 	movw	r3, #2063	; 0x80f
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d113      	bne.n	80046c0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00e      	beq.n	80046c0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8114 	beq.w	80048de <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
      }
      return;
 80046be:	e10e      	b.n	80048de <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80d6 	beq.w	8004874 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d105      	bne.n	80046de <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80cb 	beq.w	8004874 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00e      	beq.n	8004706 <HAL_UART_IRQHandler+0x9e>
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2201      	movs	r2, #1
 80046f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046fe:	f043 0201 	orr.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00e      	beq.n	800472e <HAL_UART_IRQHandler+0xc6>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2202      	movs	r2, #2
 8004720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004726:	f043 0204 	orr.w	r2, r3, #4
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <HAL_UART_IRQHandler+0xee>
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2204      	movs	r2, #4
 8004748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474e:	f043 0202 	orr.w	r2, r3, #2
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d013      	beq.n	8004788 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d104      	bne.n	8004774 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2208      	movs	r2, #8
 800477a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004780:	f043 0208 	orr.w	r2, r3, #8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00f      	beq.n	80047b2 <HAL_UART_IRQHandler+0x14a>
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8093 	beq.w	80048e2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d004      	beq.n	80047fe <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d031      	beq.n	8004862 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fbfe 	bl	8005000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	d123      	bne.n	800485a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004820:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004826:	2b00      	cmp	r3, #0
 8004828:	d013      	beq.n	8004852 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800482e:	4a30      	ldr	r2, [pc, #192]	; (80048f0 <HAL_UART_IRQHandler+0x288>)
 8004830:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004836:	4618      	mov	r0, r3
 8004838:	f7fd fd32 	bl	80022a0 <HAL_DMA_Abort_IT>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800484c:	4610      	mov	r0, r2
 800484e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	e00e      	b.n	8004870 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f84e 	bl	80048f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	e00a      	b.n	8004870 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f84a 	bl	80048f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004860:	e006      	b.n	8004870 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f846 	bl	80048f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800486e:	e038      	b.n	80048e2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	bf00      	nop
    return;
 8004872:	e036      	b.n	80048e2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <HAL_UART_IRQHandler+0x232>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004890:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fd21 	bl	80052da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004898:	e026      	b.n	80048e8 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00d      	beq.n	80048c0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
    }
    return;
 80048be:	e012      	b.n	80048e6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00e      	beq.n	80048e8 <HAL_UART_IRQHandler+0x280>
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d009      	beq.n	80048e8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fc41 	bl	800515c <UART_EndTransmit_IT>
    return;
 80048da:	bf00      	nop
 80048dc:	e004      	b.n	80048e8 <HAL_UART_IRQHandler+0x280>
      return;
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <HAL_UART_IRQHandler+0x280>
    return;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_UART_IRQHandler+0x280>
    return;
 80048e6:	bf00      	nop
  }

}
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	08005041 	.word	0x08005041

080048f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4bac      	ldr	r3, [pc, #688]	; (8004be8 <UART_SetConfig+0x2e0>)
 8004938:	4013      	ands	r3, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	6939      	ldr	r1, [r7, #16]
 8004940:	430b      	orrs	r3, r1
 8004942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	430a      	orrs	r2, r1
 800497c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a9a      	ldr	r2, [pc, #616]	; (8004bec <UART_SetConfig+0x2e4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d121      	bne.n	80049cc <UART_SetConfig+0xc4>
 8004988:	4b99      	ldr	r3, [pc, #612]	; (8004bf0 <UART_SetConfig+0x2e8>)
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b03      	cmp	r3, #3
 8004992:	d817      	bhi.n	80049c4 <UART_SetConfig+0xbc>
 8004994:	a201      	add	r2, pc, #4	; (adr r2, 800499c <UART_SetConfig+0x94>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	080049ad 	.word	0x080049ad
 80049a0:	080049b9 	.word	0x080049b9
 80049a4:	080049bf 	.word	0x080049bf
 80049a8:	080049b3 	.word	0x080049b3
 80049ac:	2301      	movs	r3, #1
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e0b2      	b.n	8004b18 <UART_SetConfig+0x210>
 80049b2:	2302      	movs	r3, #2
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e0af      	b.n	8004b18 <UART_SetConfig+0x210>
 80049b8:	2304      	movs	r3, #4
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e0ac      	b.n	8004b18 <UART_SetConfig+0x210>
 80049be:	2308      	movs	r3, #8
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e0a9      	b.n	8004b18 <UART_SetConfig+0x210>
 80049c4:	2310      	movs	r3, #16
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	bf00      	nop
 80049ca:	e0a5      	b.n	8004b18 <UART_SetConfig+0x210>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a88      	ldr	r2, [pc, #544]	; (8004bf4 <UART_SetConfig+0x2ec>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d123      	bne.n	8004a1e <UART_SetConfig+0x116>
 80049d6:	4b86      	ldr	r3, [pc, #536]	; (8004bf0 <UART_SetConfig+0x2e8>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e2:	d012      	beq.n	8004a0a <UART_SetConfig+0x102>
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e8:	d802      	bhi.n	80049f0 <UART_SetConfig+0xe8>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <UART_SetConfig+0xf6>
 80049ee:	e012      	b.n	8004a16 <UART_SetConfig+0x10e>
 80049f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f4:	d00c      	beq.n	8004a10 <UART_SetConfig+0x108>
 80049f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049fa:	d003      	beq.n	8004a04 <UART_SetConfig+0xfc>
 80049fc:	e00b      	b.n	8004a16 <UART_SetConfig+0x10e>
 80049fe:	2300      	movs	r3, #0
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e089      	b.n	8004b18 <UART_SetConfig+0x210>
 8004a04:	2302      	movs	r3, #2
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e086      	b.n	8004b18 <UART_SetConfig+0x210>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e083      	b.n	8004b18 <UART_SetConfig+0x210>
 8004a10:	2308      	movs	r3, #8
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e080      	b.n	8004b18 <UART_SetConfig+0x210>
 8004a16:	2310      	movs	r3, #16
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	bf00      	nop
 8004a1c:	e07c      	b.n	8004b18 <UART_SetConfig+0x210>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a75      	ldr	r2, [pc, #468]	; (8004bf8 <UART_SetConfig+0x2f0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d123      	bne.n	8004a70 <UART_SetConfig+0x168>
 8004a28:	4b71      	ldr	r3, [pc, #452]	; (8004bf0 <UART_SetConfig+0x2e8>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004a30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a34:	d012      	beq.n	8004a5c <UART_SetConfig+0x154>
 8004a36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a3a:	d802      	bhi.n	8004a42 <UART_SetConfig+0x13a>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <UART_SetConfig+0x148>
 8004a40:	e012      	b.n	8004a68 <UART_SetConfig+0x160>
 8004a42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a46:	d00c      	beq.n	8004a62 <UART_SetConfig+0x15a>
 8004a48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a4c:	d003      	beq.n	8004a56 <UART_SetConfig+0x14e>
 8004a4e:	e00b      	b.n	8004a68 <UART_SetConfig+0x160>
 8004a50:	2300      	movs	r3, #0
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e060      	b.n	8004b18 <UART_SetConfig+0x210>
 8004a56:	2302      	movs	r3, #2
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e05d      	b.n	8004b18 <UART_SetConfig+0x210>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e05a      	b.n	8004b18 <UART_SetConfig+0x210>
 8004a62:	2308      	movs	r3, #8
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e057      	b.n	8004b18 <UART_SetConfig+0x210>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	bf00      	nop
 8004a6e:	e053      	b.n	8004b18 <UART_SetConfig+0x210>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a61      	ldr	r2, [pc, #388]	; (8004bfc <UART_SetConfig+0x2f4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d123      	bne.n	8004ac2 <UART_SetConfig+0x1ba>
 8004a7a:	4b5d      	ldr	r3, [pc, #372]	; (8004bf0 <UART_SetConfig+0x2e8>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a86:	d012      	beq.n	8004aae <UART_SetConfig+0x1a6>
 8004a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a8c:	d802      	bhi.n	8004a94 <UART_SetConfig+0x18c>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <UART_SetConfig+0x19a>
 8004a92:	e012      	b.n	8004aba <UART_SetConfig+0x1b2>
 8004a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a98:	d00c      	beq.n	8004ab4 <UART_SetConfig+0x1ac>
 8004a9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a9e:	d003      	beq.n	8004aa8 <UART_SetConfig+0x1a0>
 8004aa0:	e00b      	b.n	8004aba <UART_SetConfig+0x1b2>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e037      	b.n	8004b18 <UART_SetConfig+0x210>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e034      	b.n	8004b18 <UART_SetConfig+0x210>
 8004aae:	2304      	movs	r3, #4
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e031      	b.n	8004b18 <UART_SetConfig+0x210>
 8004ab4:	2308      	movs	r3, #8
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e02e      	b.n	8004b18 <UART_SetConfig+0x210>
 8004aba:	2310      	movs	r3, #16
 8004abc:	77fb      	strb	r3, [r7, #31]
 8004abe:	bf00      	nop
 8004ac0:	e02a      	b.n	8004b18 <UART_SetConfig+0x210>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a4e      	ldr	r2, [pc, #312]	; (8004c00 <UART_SetConfig+0x2f8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d123      	bne.n	8004b14 <UART_SetConfig+0x20c>
 8004acc:	4b48      	ldr	r3, [pc, #288]	; (8004bf0 <UART_SetConfig+0x2e8>)
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad8:	d012      	beq.n	8004b00 <UART_SetConfig+0x1f8>
 8004ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ade:	d802      	bhi.n	8004ae6 <UART_SetConfig+0x1de>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <UART_SetConfig+0x1ec>
 8004ae4:	e012      	b.n	8004b0c <UART_SetConfig+0x204>
 8004ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aea:	d00c      	beq.n	8004b06 <UART_SetConfig+0x1fe>
 8004aec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004af0:	d003      	beq.n	8004afa <UART_SetConfig+0x1f2>
 8004af2:	e00b      	b.n	8004b0c <UART_SetConfig+0x204>
 8004af4:	2300      	movs	r3, #0
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e00e      	b.n	8004b18 <UART_SetConfig+0x210>
 8004afa:	2302      	movs	r3, #2
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e00b      	b.n	8004b18 <UART_SetConfig+0x210>
 8004b00:	2304      	movs	r3, #4
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e008      	b.n	8004b18 <UART_SetConfig+0x210>
 8004b06:	2308      	movs	r3, #8
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e005      	b.n	8004b18 <UART_SetConfig+0x210>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	bf00      	nop
 8004b12:	e001      	b.n	8004b18 <UART_SetConfig+0x210>
 8004b14:	2310      	movs	r3, #16
 8004b16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b20:	f040 8090 	bne.w	8004c44 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004b24:	7ffb      	ldrb	r3, [r7, #31]
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d86c      	bhi.n	8004c04 <UART_SetConfig+0x2fc>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0x228>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b75 	.word	0x08004b75
 8004b38:	08004b95 	.word	0x08004b95
 8004b3c:	08004c05 	.word	0x08004c05
 8004b40:	08004bb1 	.word	0x08004bb1
 8004b44:	08004c05 	.word	0x08004c05
 8004b48:	08004c05 	.word	0x08004c05
 8004b4c:	08004c05 	.word	0x08004c05
 8004b50:	08004bd1 	.word	0x08004bd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b54:	f7fe fe8c 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 8004b58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	005a      	lsls	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	441a      	add	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	61bb      	str	r3, [r7, #24]
        break;
 8004b72:	e04a      	b.n	8004c0a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7fe fe9e 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8004b78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	005a      	lsls	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	441a      	add	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	61bb      	str	r3, [r7, #24]
        break;
 8004b92:	e03a      	b.n	8004c0a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004b9e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6852      	ldr	r2, [r2, #4]
 8004ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	61bb      	str	r3, [r7, #24]
        break;
 8004bae:	e02c      	b.n	8004c0a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb0:	f7fe fde8 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8004bb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	005a      	lsls	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	441a      	add	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	61bb      	str	r3, [r7, #24]
        break;
 8004bce:	e01c      	b.n	8004c0a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	61bb      	str	r3, [r7, #24]
        break;
 8004be6:	e010      	b.n	8004c0a <UART_SetConfig+0x302>
 8004be8:	efff69f3 	.word	0xefff69f3
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40004400 	.word	0x40004400
 8004bf8:	40004800 	.word	0x40004800
 8004bfc:	40004c00 	.word	0x40004c00
 8004c00:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	75fb      	strb	r3, [r7, #23]
        break;
 8004c08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b0f      	cmp	r3, #15
 8004c0e:	d916      	bls.n	8004c3e <UART_SetConfig+0x336>
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c16:	d212      	bcs.n	8004c3e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f023 030f 	bic.w	r3, r3, #15
 8004c20:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	897b      	ldrh	r3, [r7, #10]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	897a      	ldrh	r2, [r7, #10]
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	e072      	b.n	8004d24 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
 8004c42:	e06f      	b.n	8004d24 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004c44:	7ffb      	ldrb	r3, [r7, #31]
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d85b      	bhi.n	8004d02 <UART_SetConfig+0x3fa>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0x348>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08004c93 	.word	0x08004c93
 8004c58:	08004cb1 	.word	0x08004cb1
 8004c5c:	08004d03 	.word	0x08004d03
 8004c60:	08004ccd 	.word	0x08004ccd
 8004c64:	08004d03 	.word	0x08004d03
 8004c68:	08004d03 	.word	0x08004d03
 8004c6c:	08004d03 	.word	0x08004d03
 8004c70:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c74:	f7fe fdfc 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 8004c78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	085a      	lsrs	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	441a      	add	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	61bb      	str	r3, [r7, #24]
        break;
 8004c90:	e03a      	b.n	8004d08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c92:	f7fe fe0f 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8004c96:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	085a      	lsrs	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	441a      	add	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	61bb      	str	r3, [r7, #24]
        break;
 8004cae:	e02b      	b.n	8004d08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004cba:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6852      	ldr	r2, [r2, #4]
 8004cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	61bb      	str	r3, [r7, #24]
        break;
 8004cca:	e01d      	b.n	8004d08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ccc:	f7fe fd5a 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8004cd0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	085a      	lsrs	r2, r3, #1
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	441a      	add	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	61bb      	str	r3, [r7, #24]
        break;
 8004ce8:	e00e      	b.n	8004d08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	61bb      	str	r3, [r7, #24]
        break;
 8004d00:	e002      	b.n	8004d08 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
        break;
 8004d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b0f      	cmp	r3, #15
 8004d0c:	d908      	bls.n	8004d20 <UART_SetConfig+0x418>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d14:	d204      	bcs.n	8004d20 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	e001      	b.n	8004d24 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop

08004d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01a      	beq.n	8004e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3a:	d10a      	bne.n	8004e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e8e:	f7fc fa9d 	bl	80013cc <HAL_GetTick>
 8004e92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d10e      	bne.n	8004ec0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f82a 	bl	8004f0a <UART_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e020      	b.n	8004f02 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d10e      	bne.n	8004eec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ece:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f814 	bl	8004f0a <UART_WaitOnFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e00a      	b.n	8004f02 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	4613      	mov	r3, r2
 8004f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1a:	e05d      	b.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d059      	beq.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f24:	f7fc fa52 	bl	80013cc <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11b      	bne.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e042      	b.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d02b      	beq.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8e:	d123      	bne.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f98:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fa8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e00f      	b.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d092      	beq.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005016:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fc48 	bl	80048f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005078:	2b21      	cmp	r3, #33	; 0x21
 800507a:	d12b      	bne.n	80050d4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d110      	bne.n	80050aa <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005096:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050a6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80050a8:	e014      	b.n	80050d4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	b292      	uxth	r2, r2
 80050b6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ec:	2b21      	cmp	r3, #33	; 0x21
 80050ee:	d12f      	bne.n	8005150 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d110      	bne.n	800511e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800510a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800511c:	e018      	b.n	8005150 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005122:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	881a      	ldrh	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005130:	b292      	uxth	r2, r2
 8005132:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005138:	1c9a      	adds	r2, r3, #2
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005172:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7fb fbe5 	bl	8000950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800519c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a2:	2b22      	cmp	r3, #34	; 0x22
 80051a4:	d13a      	bne.n	800521c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051ac:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051ae:	89bb      	ldrh	r3, [r7, #12]
 80051b0:	b2d9      	uxtb	r1, r3
 80051b2:	89fb      	ldrh	r3, [r7, #14]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	400a      	ands	r2, r1
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d121      	bne.n	800522c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051f6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fb fb5f 	bl	80008d8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800521a:	e007      	b.n	800522c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	619a      	str	r2, [r3, #24]
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005242:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005248:	2b22      	cmp	r3, #34	; 0x22
 800524a:	d13a      	bne.n	80052c2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005252:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800525a:	89ba      	ldrh	r2, [r7, #12]
 800525c:	89fb      	ldrh	r3, [r7, #14]
 800525e:	4013      	ands	r3, r2
 8005260:	b29a      	uxth	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d121      	bne.n	80052d2 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800529c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fb fb0c 	bl	80008d8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052c0:	e007      	b.n	80052d2 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699a      	ldr	r2, [r3, #24]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0208 	orr.w	r2, r2, #8
 80052d0:	619a      	str	r2, [r3, #24]
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <__errno>:
 80052f0:	4b01      	ldr	r3, [pc, #4]	; (80052f8 <__errno+0x8>)
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	200000cc 	.word	0x200000cc

080052fc <__libc_init_array>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	4e0d      	ldr	r6, [pc, #52]	; (8005334 <__libc_init_array+0x38>)
 8005300:	4c0d      	ldr	r4, [pc, #52]	; (8005338 <__libc_init_array+0x3c>)
 8005302:	1ba4      	subs	r4, r4, r6
 8005304:	10a4      	asrs	r4, r4, #2
 8005306:	2500      	movs	r5, #0
 8005308:	42a5      	cmp	r5, r4
 800530a:	d109      	bne.n	8005320 <__libc_init_array+0x24>
 800530c:	4e0b      	ldr	r6, [pc, #44]	; (800533c <__libc_init_array+0x40>)
 800530e:	4c0c      	ldr	r4, [pc, #48]	; (8005340 <__libc_init_array+0x44>)
 8005310:	f001 fcba 	bl	8006c88 <_init>
 8005314:	1ba4      	subs	r4, r4, r6
 8005316:	10a4      	asrs	r4, r4, #2
 8005318:	2500      	movs	r5, #0
 800531a:	42a5      	cmp	r5, r4
 800531c:	d105      	bne.n	800532a <__libc_init_array+0x2e>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005324:	4798      	blx	r3
 8005326:	3501      	adds	r5, #1
 8005328:	e7ee      	b.n	8005308 <__libc_init_array+0xc>
 800532a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800532e:	4798      	blx	r3
 8005330:	3501      	adds	r5, #1
 8005332:	e7f2      	b.n	800531a <__libc_init_array+0x1e>
 8005334:	080070e4 	.word	0x080070e4
 8005338:	080070e4 	.word	0x080070e4
 800533c:	080070e4 	.word	0x080070e4
 8005340:	080070e8 	.word	0x080070e8

08005344 <memset>:
 8005344:	4402      	add	r2, r0
 8005346:	4603      	mov	r3, r0
 8005348:	4293      	cmp	r3, r2
 800534a:	d100      	bne.n	800534e <memset+0xa>
 800534c:	4770      	bx	lr
 800534e:	f803 1b01 	strb.w	r1, [r3], #1
 8005352:	e7f9      	b.n	8005348 <memset+0x4>

08005354 <_puts_r>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	460e      	mov	r6, r1
 8005358:	4605      	mov	r5, r0
 800535a:	b118      	cbz	r0, 8005364 <_puts_r+0x10>
 800535c:	6983      	ldr	r3, [r0, #24]
 800535e:	b90b      	cbnz	r3, 8005364 <_puts_r+0x10>
 8005360:	f000 fabe 	bl	80058e0 <__sinit>
 8005364:	69ab      	ldr	r3, [r5, #24]
 8005366:	68ac      	ldr	r4, [r5, #8]
 8005368:	b913      	cbnz	r3, 8005370 <_puts_r+0x1c>
 800536a:	4628      	mov	r0, r5
 800536c:	f000 fab8 	bl	80058e0 <__sinit>
 8005370:	4b23      	ldr	r3, [pc, #140]	; (8005400 <_puts_r+0xac>)
 8005372:	429c      	cmp	r4, r3
 8005374:	d117      	bne.n	80053a6 <_puts_r+0x52>
 8005376:	686c      	ldr	r4, [r5, #4]
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	071b      	lsls	r3, r3, #28
 800537c:	d51d      	bpl.n	80053ba <_puts_r+0x66>
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	b1db      	cbz	r3, 80053ba <_puts_r+0x66>
 8005382:	3e01      	subs	r6, #1
 8005384:	68a3      	ldr	r3, [r4, #8]
 8005386:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800538a:	3b01      	subs	r3, #1
 800538c:	60a3      	str	r3, [r4, #8]
 800538e:	b9e9      	cbnz	r1, 80053cc <_puts_r+0x78>
 8005390:	2b00      	cmp	r3, #0
 8005392:	da2e      	bge.n	80053f2 <_puts_r+0x9e>
 8005394:	4622      	mov	r2, r4
 8005396:	210a      	movs	r1, #10
 8005398:	4628      	mov	r0, r5
 800539a:	f000 f8cf 	bl	800553c <__swbuf_r>
 800539e:	3001      	adds	r0, #1
 80053a0:	d011      	beq.n	80053c6 <_puts_r+0x72>
 80053a2:	200a      	movs	r0, #10
 80053a4:	e011      	b.n	80053ca <_puts_r+0x76>
 80053a6:	4b17      	ldr	r3, [pc, #92]	; (8005404 <_puts_r+0xb0>)
 80053a8:	429c      	cmp	r4, r3
 80053aa:	d101      	bne.n	80053b0 <_puts_r+0x5c>
 80053ac:	68ac      	ldr	r4, [r5, #8]
 80053ae:	e7e3      	b.n	8005378 <_puts_r+0x24>
 80053b0:	4b15      	ldr	r3, [pc, #84]	; (8005408 <_puts_r+0xb4>)
 80053b2:	429c      	cmp	r4, r3
 80053b4:	bf08      	it	eq
 80053b6:	68ec      	ldreq	r4, [r5, #12]
 80053b8:	e7de      	b.n	8005378 <_puts_r+0x24>
 80053ba:	4621      	mov	r1, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 f921 	bl	8005604 <__swsetup_r>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d0dd      	beq.n	8005382 <_puts_r+0x2e>
 80053c6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	da04      	bge.n	80053da <_puts_r+0x86>
 80053d0:	69a2      	ldr	r2, [r4, #24]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	dc06      	bgt.n	80053e4 <_puts_r+0x90>
 80053d6:	290a      	cmp	r1, #10
 80053d8:	d004      	beq.n	80053e4 <_puts_r+0x90>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	6022      	str	r2, [r4, #0]
 80053e0:	7019      	strb	r1, [r3, #0]
 80053e2:	e7cf      	b.n	8005384 <_puts_r+0x30>
 80053e4:	4622      	mov	r2, r4
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 f8a8 	bl	800553c <__swbuf_r>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d1c9      	bne.n	8005384 <_puts_r+0x30>
 80053f0:	e7e9      	b.n	80053c6 <_puts_r+0x72>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	200a      	movs	r0, #10
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	6022      	str	r2, [r4, #0]
 80053fa:	7018      	strb	r0, [r3, #0]
 80053fc:	e7e5      	b.n	80053ca <_puts_r+0x76>
 80053fe:	bf00      	nop
 8005400:	08006f48 	.word	0x08006f48
 8005404:	08006f68 	.word	0x08006f68
 8005408:	08006f28 	.word	0x08006f28

0800540c <puts>:
 800540c:	4b02      	ldr	r3, [pc, #8]	; (8005418 <puts+0xc>)
 800540e:	4601      	mov	r1, r0
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	f7ff bf9f 	b.w	8005354 <_puts_r>
 8005416:	bf00      	nop
 8005418:	200000cc 	.word	0x200000cc

0800541c <siprintf>:
 800541c:	b40e      	push	{r1, r2, r3}
 800541e:	b500      	push	{lr}
 8005420:	b09c      	sub	sp, #112	; 0x70
 8005422:	ab1d      	add	r3, sp, #116	; 0x74
 8005424:	9002      	str	r0, [sp, #8]
 8005426:	9006      	str	r0, [sp, #24]
 8005428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800542c:	4809      	ldr	r0, [pc, #36]	; (8005454 <siprintf+0x38>)
 800542e:	9107      	str	r1, [sp, #28]
 8005430:	9104      	str	r1, [sp, #16]
 8005432:	4909      	ldr	r1, [pc, #36]	; (8005458 <siprintf+0x3c>)
 8005434:	f853 2b04 	ldr.w	r2, [r3], #4
 8005438:	9105      	str	r1, [sp, #20]
 800543a:	6800      	ldr	r0, [r0, #0]
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	a902      	add	r1, sp, #8
 8005440:	f000 fc50 	bl	8005ce4 <_svfiprintf_r>
 8005444:	9b02      	ldr	r3, [sp, #8]
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	b01c      	add	sp, #112	; 0x70
 800544c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005450:	b003      	add	sp, #12
 8005452:	4770      	bx	lr
 8005454:	200000cc 	.word	0x200000cc
 8005458:	ffff0208 	.word	0xffff0208

0800545c <siscanf>:
 800545c:	b40e      	push	{r1, r2, r3}
 800545e:	b530      	push	{r4, r5, lr}
 8005460:	b09c      	sub	sp, #112	; 0x70
 8005462:	ac1f      	add	r4, sp, #124	; 0x7c
 8005464:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005468:	f854 5b04 	ldr.w	r5, [r4], #4
 800546c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005470:	9002      	str	r0, [sp, #8]
 8005472:	9006      	str	r0, [sp, #24]
 8005474:	f7fa febe 	bl	80001f4 <strlen>
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <siscanf+0x4c>)
 800547a:	9003      	str	r0, [sp, #12]
 800547c:	9007      	str	r0, [sp, #28]
 800547e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005480:	480a      	ldr	r0, [pc, #40]	; (80054ac <siscanf+0x50>)
 8005482:	9401      	str	r4, [sp, #4]
 8005484:	2300      	movs	r3, #0
 8005486:	930f      	str	r3, [sp, #60]	; 0x3c
 8005488:	9314      	str	r3, [sp, #80]	; 0x50
 800548a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800548e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005492:	462a      	mov	r2, r5
 8005494:	4623      	mov	r3, r4
 8005496:	a902      	add	r1, sp, #8
 8005498:	6800      	ldr	r0, [r0, #0]
 800549a:	f000 fd75 	bl	8005f88 <__ssvfiscanf_r>
 800549e:	b01c      	add	sp, #112	; 0x70
 80054a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054a4:	b003      	add	sp, #12
 80054a6:	4770      	bx	lr
 80054a8:	080054d3 	.word	0x080054d3
 80054ac:	200000cc 	.word	0x200000cc

080054b0 <__sread>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	460c      	mov	r4, r1
 80054b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b8:	f001 f996 	bl	80067e8 <_read_r>
 80054bc:	2800      	cmp	r0, #0
 80054be:	bfab      	itete	ge
 80054c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054c2:	89a3      	ldrhlt	r3, [r4, #12]
 80054c4:	181b      	addge	r3, r3, r0
 80054c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054ca:	bfac      	ite	ge
 80054cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80054ce:	81a3      	strhlt	r3, [r4, #12]
 80054d0:	bd10      	pop	{r4, pc}

080054d2 <__seofread>:
 80054d2:	2000      	movs	r0, #0
 80054d4:	4770      	bx	lr

080054d6 <__swrite>:
 80054d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054da:	461f      	mov	r7, r3
 80054dc:	898b      	ldrh	r3, [r1, #12]
 80054de:	05db      	lsls	r3, r3, #23
 80054e0:	4605      	mov	r5, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	4616      	mov	r6, r2
 80054e6:	d505      	bpl.n	80054f4 <__swrite+0x1e>
 80054e8:	2302      	movs	r3, #2
 80054ea:	2200      	movs	r2, #0
 80054ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f0:	f000 fa80 	bl	80059f4 <_lseek_r>
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054fe:	81a3      	strh	r3, [r4, #12]
 8005500:	4632      	mov	r2, r6
 8005502:	463b      	mov	r3, r7
 8005504:	4628      	mov	r0, r5
 8005506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	f000 b869 	b.w	80055e0 <_write_r>

0800550e <__sseek>:
 800550e:	b510      	push	{r4, lr}
 8005510:	460c      	mov	r4, r1
 8005512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005516:	f000 fa6d 	bl	80059f4 <_lseek_r>
 800551a:	1c43      	adds	r3, r0, #1
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	bf15      	itete	ne
 8005520:	6560      	strne	r0, [r4, #84]	; 0x54
 8005522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800552a:	81a3      	strheq	r3, [r4, #12]
 800552c:	bf18      	it	ne
 800552e:	81a3      	strhne	r3, [r4, #12]
 8005530:	bd10      	pop	{r4, pc}

08005532 <__sclose>:
 8005532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005536:	f000 b8d3 	b.w	80056e0 <_close_r>
	...

0800553c <__swbuf_r>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	460e      	mov	r6, r1
 8005540:	4614      	mov	r4, r2
 8005542:	4605      	mov	r5, r0
 8005544:	b118      	cbz	r0, 800554e <__swbuf_r+0x12>
 8005546:	6983      	ldr	r3, [r0, #24]
 8005548:	b90b      	cbnz	r3, 800554e <__swbuf_r+0x12>
 800554a:	f000 f9c9 	bl	80058e0 <__sinit>
 800554e:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <__swbuf_r+0x98>)
 8005550:	429c      	cmp	r4, r3
 8005552:	d12a      	bne.n	80055aa <__swbuf_r+0x6e>
 8005554:	686c      	ldr	r4, [r5, #4]
 8005556:	69a3      	ldr	r3, [r4, #24]
 8005558:	60a3      	str	r3, [r4, #8]
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	071a      	lsls	r2, r3, #28
 800555e:	d52e      	bpl.n	80055be <__swbuf_r+0x82>
 8005560:	6923      	ldr	r3, [r4, #16]
 8005562:	b363      	cbz	r3, 80055be <__swbuf_r+0x82>
 8005564:	6923      	ldr	r3, [r4, #16]
 8005566:	6820      	ldr	r0, [r4, #0]
 8005568:	1ac0      	subs	r0, r0, r3
 800556a:	6963      	ldr	r3, [r4, #20]
 800556c:	b2f6      	uxtb	r6, r6
 800556e:	4283      	cmp	r3, r0
 8005570:	4637      	mov	r7, r6
 8005572:	dc04      	bgt.n	800557e <__swbuf_r+0x42>
 8005574:	4621      	mov	r1, r4
 8005576:	4628      	mov	r0, r5
 8005578:	f000 f948 	bl	800580c <_fflush_r>
 800557c:	bb28      	cbnz	r0, 80055ca <__swbuf_r+0x8e>
 800557e:	68a3      	ldr	r3, [r4, #8]
 8005580:	3b01      	subs	r3, #1
 8005582:	60a3      	str	r3, [r4, #8]
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	6022      	str	r2, [r4, #0]
 800558a:	701e      	strb	r6, [r3, #0]
 800558c:	6963      	ldr	r3, [r4, #20]
 800558e:	3001      	adds	r0, #1
 8005590:	4283      	cmp	r3, r0
 8005592:	d004      	beq.n	800559e <__swbuf_r+0x62>
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	07db      	lsls	r3, r3, #31
 8005598:	d519      	bpl.n	80055ce <__swbuf_r+0x92>
 800559a:	2e0a      	cmp	r6, #10
 800559c:	d117      	bne.n	80055ce <__swbuf_r+0x92>
 800559e:	4621      	mov	r1, r4
 80055a0:	4628      	mov	r0, r5
 80055a2:	f000 f933 	bl	800580c <_fflush_r>
 80055a6:	b190      	cbz	r0, 80055ce <__swbuf_r+0x92>
 80055a8:	e00f      	b.n	80055ca <__swbuf_r+0x8e>
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <__swbuf_r+0x9c>)
 80055ac:	429c      	cmp	r4, r3
 80055ae:	d101      	bne.n	80055b4 <__swbuf_r+0x78>
 80055b0:	68ac      	ldr	r4, [r5, #8]
 80055b2:	e7d0      	b.n	8005556 <__swbuf_r+0x1a>
 80055b4:	4b09      	ldr	r3, [pc, #36]	; (80055dc <__swbuf_r+0xa0>)
 80055b6:	429c      	cmp	r4, r3
 80055b8:	bf08      	it	eq
 80055ba:	68ec      	ldreq	r4, [r5, #12]
 80055bc:	e7cb      	b.n	8005556 <__swbuf_r+0x1a>
 80055be:	4621      	mov	r1, r4
 80055c0:	4628      	mov	r0, r5
 80055c2:	f000 f81f 	bl	8005604 <__swsetup_r>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d0cc      	beq.n	8005564 <__swbuf_r+0x28>
 80055ca:	f04f 37ff 	mov.w	r7, #4294967295
 80055ce:	4638      	mov	r0, r7
 80055d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d2:	bf00      	nop
 80055d4:	08006f48 	.word	0x08006f48
 80055d8:	08006f68 	.word	0x08006f68
 80055dc:	08006f28 	.word	0x08006f28

080055e0 <_write_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4c07      	ldr	r4, [pc, #28]	; (8005600 <_write_r+0x20>)
 80055e4:	4605      	mov	r5, r0
 80055e6:	4608      	mov	r0, r1
 80055e8:	4611      	mov	r1, r2
 80055ea:	2200      	movs	r2, #0
 80055ec:	6022      	str	r2, [r4, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f7fb fdd6 	bl	80011a0 <_write>
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	d102      	bne.n	80055fe <_write_r+0x1e>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	b103      	cbz	r3, 80055fe <_write_r+0x1e>
 80055fc:	602b      	str	r3, [r5, #0]
 80055fe:	bd38      	pop	{r3, r4, r5, pc}
 8005600:	20000484 	.word	0x20000484

08005604 <__swsetup_r>:
 8005604:	4b32      	ldr	r3, [pc, #200]	; (80056d0 <__swsetup_r+0xcc>)
 8005606:	b570      	push	{r4, r5, r6, lr}
 8005608:	681d      	ldr	r5, [r3, #0]
 800560a:	4606      	mov	r6, r0
 800560c:	460c      	mov	r4, r1
 800560e:	b125      	cbz	r5, 800561a <__swsetup_r+0x16>
 8005610:	69ab      	ldr	r3, [r5, #24]
 8005612:	b913      	cbnz	r3, 800561a <__swsetup_r+0x16>
 8005614:	4628      	mov	r0, r5
 8005616:	f000 f963 	bl	80058e0 <__sinit>
 800561a:	4b2e      	ldr	r3, [pc, #184]	; (80056d4 <__swsetup_r+0xd0>)
 800561c:	429c      	cmp	r4, r3
 800561e:	d10f      	bne.n	8005640 <__swsetup_r+0x3c>
 8005620:	686c      	ldr	r4, [r5, #4]
 8005622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005626:	b29a      	uxth	r2, r3
 8005628:	0715      	lsls	r5, r2, #28
 800562a:	d42c      	bmi.n	8005686 <__swsetup_r+0x82>
 800562c:	06d0      	lsls	r0, r2, #27
 800562e:	d411      	bmi.n	8005654 <__swsetup_r+0x50>
 8005630:	2209      	movs	r2, #9
 8005632:	6032      	str	r2, [r6, #0]
 8005634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005638:	81a3      	strh	r3, [r4, #12]
 800563a:	f04f 30ff 	mov.w	r0, #4294967295
 800563e:	e03e      	b.n	80056be <__swsetup_r+0xba>
 8005640:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <__swsetup_r+0xd4>)
 8005642:	429c      	cmp	r4, r3
 8005644:	d101      	bne.n	800564a <__swsetup_r+0x46>
 8005646:	68ac      	ldr	r4, [r5, #8]
 8005648:	e7eb      	b.n	8005622 <__swsetup_r+0x1e>
 800564a:	4b24      	ldr	r3, [pc, #144]	; (80056dc <__swsetup_r+0xd8>)
 800564c:	429c      	cmp	r4, r3
 800564e:	bf08      	it	eq
 8005650:	68ec      	ldreq	r4, [r5, #12]
 8005652:	e7e6      	b.n	8005622 <__swsetup_r+0x1e>
 8005654:	0751      	lsls	r1, r2, #29
 8005656:	d512      	bpl.n	800567e <__swsetup_r+0x7a>
 8005658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800565a:	b141      	cbz	r1, 800566e <__swsetup_r+0x6a>
 800565c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005660:	4299      	cmp	r1, r3
 8005662:	d002      	beq.n	800566a <__swsetup_r+0x66>
 8005664:	4630      	mov	r0, r6
 8005666:	f000 fa3b 	bl	8005ae0 <_free_r>
 800566a:	2300      	movs	r3, #0
 800566c:	6363      	str	r3, [r4, #52]	; 0x34
 800566e:	89a3      	ldrh	r3, [r4, #12]
 8005670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005674:	81a3      	strh	r3, [r4, #12]
 8005676:	2300      	movs	r3, #0
 8005678:	6063      	str	r3, [r4, #4]
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f043 0308 	orr.w	r3, r3, #8
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	b94b      	cbnz	r3, 800569e <__swsetup_r+0x9a>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005694:	d003      	beq.n	800569e <__swsetup_r+0x9a>
 8005696:	4621      	mov	r1, r4
 8005698:	4630      	mov	r0, r6
 800569a:	f000 f9e1 	bl	8005a60 <__smakebuf_r>
 800569e:	89a2      	ldrh	r2, [r4, #12]
 80056a0:	f012 0301 	ands.w	r3, r2, #1
 80056a4:	d00c      	beq.n	80056c0 <__swsetup_r+0xbc>
 80056a6:	2300      	movs	r3, #0
 80056a8:	60a3      	str	r3, [r4, #8]
 80056aa:	6963      	ldr	r3, [r4, #20]
 80056ac:	425b      	negs	r3, r3
 80056ae:	61a3      	str	r3, [r4, #24]
 80056b0:	6923      	ldr	r3, [r4, #16]
 80056b2:	b953      	cbnz	r3, 80056ca <__swsetup_r+0xc6>
 80056b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80056bc:	d1ba      	bne.n	8005634 <__swsetup_r+0x30>
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	0792      	lsls	r2, r2, #30
 80056c2:	bf58      	it	pl
 80056c4:	6963      	ldrpl	r3, [r4, #20]
 80056c6:	60a3      	str	r3, [r4, #8]
 80056c8:	e7f2      	b.n	80056b0 <__swsetup_r+0xac>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e7f7      	b.n	80056be <__swsetup_r+0xba>
 80056ce:	bf00      	nop
 80056d0:	200000cc 	.word	0x200000cc
 80056d4:	08006f48 	.word	0x08006f48
 80056d8:	08006f68 	.word	0x08006f68
 80056dc:	08006f28 	.word	0x08006f28

080056e0 <_close_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4c06      	ldr	r4, [pc, #24]	; (80056fc <_close_r+0x1c>)
 80056e4:	2300      	movs	r3, #0
 80056e6:	4605      	mov	r5, r0
 80056e8:	4608      	mov	r0, r1
 80056ea:	6023      	str	r3, [r4, #0]
 80056ec:	f7fb fd74 	bl	80011d8 <_close>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_close_r+0x1a>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_close_r+0x1a>
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	20000484 	.word	0x20000484

08005700 <__sflush_r>:
 8005700:	898a      	ldrh	r2, [r1, #12]
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	4605      	mov	r5, r0
 8005708:	0710      	lsls	r0, r2, #28
 800570a:	460c      	mov	r4, r1
 800570c:	d458      	bmi.n	80057c0 <__sflush_r+0xc0>
 800570e:	684b      	ldr	r3, [r1, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	dc05      	bgt.n	8005720 <__sflush_r+0x20>
 8005714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	dc02      	bgt.n	8005720 <__sflush_r+0x20>
 800571a:	2000      	movs	r0, #0
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005722:	2e00      	cmp	r6, #0
 8005724:	d0f9      	beq.n	800571a <__sflush_r+0x1a>
 8005726:	2300      	movs	r3, #0
 8005728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800572c:	682f      	ldr	r7, [r5, #0]
 800572e:	6a21      	ldr	r1, [r4, #32]
 8005730:	602b      	str	r3, [r5, #0]
 8005732:	d032      	beq.n	800579a <__sflush_r+0x9a>
 8005734:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	075a      	lsls	r2, r3, #29
 800573a:	d505      	bpl.n	8005748 <__sflush_r+0x48>
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	1ac0      	subs	r0, r0, r3
 8005740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005742:	b10b      	cbz	r3, 8005748 <__sflush_r+0x48>
 8005744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005746:	1ac0      	subs	r0, r0, r3
 8005748:	2300      	movs	r3, #0
 800574a:	4602      	mov	r2, r0
 800574c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800574e:	6a21      	ldr	r1, [r4, #32]
 8005750:	4628      	mov	r0, r5
 8005752:	47b0      	blx	r6
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	d106      	bne.n	8005768 <__sflush_r+0x68>
 800575a:	6829      	ldr	r1, [r5, #0]
 800575c:	291d      	cmp	r1, #29
 800575e:	d848      	bhi.n	80057f2 <__sflush_r+0xf2>
 8005760:	4a29      	ldr	r2, [pc, #164]	; (8005808 <__sflush_r+0x108>)
 8005762:	40ca      	lsrs	r2, r1
 8005764:	07d6      	lsls	r6, r2, #31
 8005766:	d544      	bpl.n	80057f2 <__sflush_r+0xf2>
 8005768:	2200      	movs	r2, #0
 800576a:	6062      	str	r2, [r4, #4]
 800576c:	04d9      	lsls	r1, r3, #19
 800576e:	6922      	ldr	r2, [r4, #16]
 8005770:	6022      	str	r2, [r4, #0]
 8005772:	d504      	bpl.n	800577e <__sflush_r+0x7e>
 8005774:	1c42      	adds	r2, r0, #1
 8005776:	d101      	bne.n	800577c <__sflush_r+0x7c>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b903      	cbnz	r3, 800577e <__sflush_r+0x7e>
 800577c:	6560      	str	r0, [r4, #84]	; 0x54
 800577e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005780:	602f      	str	r7, [r5, #0]
 8005782:	2900      	cmp	r1, #0
 8005784:	d0c9      	beq.n	800571a <__sflush_r+0x1a>
 8005786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800578a:	4299      	cmp	r1, r3
 800578c:	d002      	beq.n	8005794 <__sflush_r+0x94>
 800578e:	4628      	mov	r0, r5
 8005790:	f000 f9a6 	bl	8005ae0 <_free_r>
 8005794:	2000      	movs	r0, #0
 8005796:	6360      	str	r0, [r4, #52]	; 0x34
 8005798:	e7c0      	b.n	800571c <__sflush_r+0x1c>
 800579a:	2301      	movs	r3, #1
 800579c:	4628      	mov	r0, r5
 800579e:	47b0      	blx	r6
 80057a0:	1c41      	adds	r1, r0, #1
 80057a2:	d1c8      	bne.n	8005736 <__sflush_r+0x36>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0c5      	beq.n	8005736 <__sflush_r+0x36>
 80057aa:	2b1d      	cmp	r3, #29
 80057ac:	d001      	beq.n	80057b2 <__sflush_r+0xb2>
 80057ae:	2b16      	cmp	r3, #22
 80057b0:	d101      	bne.n	80057b6 <__sflush_r+0xb6>
 80057b2:	602f      	str	r7, [r5, #0]
 80057b4:	e7b1      	b.n	800571a <__sflush_r+0x1a>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	e7ad      	b.n	800571c <__sflush_r+0x1c>
 80057c0:	690f      	ldr	r7, [r1, #16]
 80057c2:	2f00      	cmp	r7, #0
 80057c4:	d0a9      	beq.n	800571a <__sflush_r+0x1a>
 80057c6:	0793      	lsls	r3, r2, #30
 80057c8:	680e      	ldr	r6, [r1, #0]
 80057ca:	bf08      	it	eq
 80057cc:	694b      	ldreq	r3, [r1, #20]
 80057ce:	600f      	str	r7, [r1, #0]
 80057d0:	bf18      	it	ne
 80057d2:	2300      	movne	r3, #0
 80057d4:	eba6 0807 	sub.w	r8, r6, r7
 80057d8:	608b      	str	r3, [r1, #8]
 80057da:	f1b8 0f00 	cmp.w	r8, #0
 80057de:	dd9c      	ble.n	800571a <__sflush_r+0x1a>
 80057e0:	4643      	mov	r3, r8
 80057e2:	463a      	mov	r2, r7
 80057e4:	6a21      	ldr	r1, [r4, #32]
 80057e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b0      	blx	r6
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dc06      	bgt.n	80057fe <__sflush_r+0xfe>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e78e      	b.n	800571c <__sflush_r+0x1c>
 80057fe:	4407      	add	r7, r0
 8005800:	eba8 0800 	sub.w	r8, r8, r0
 8005804:	e7e9      	b.n	80057da <__sflush_r+0xda>
 8005806:	bf00      	nop
 8005808:	20400001 	.word	0x20400001

0800580c <_fflush_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	690b      	ldr	r3, [r1, #16]
 8005810:	4605      	mov	r5, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b1db      	cbz	r3, 800584e <_fflush_r+0x42>
 8005816:	b118      	cbz	r0, 8005820 <_fflush_r+0x14>
 8005818:	6983      	ldr	r3, [r0, #24]
 800581a:	b90b      	cbnz	r3, 8005820 <_fflush_r+0x14>
 800581c:	f000 f860 	bl	80058e0 <__sinit>
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <_fflush_r+0x48>)
 8005822:	429c      	cmp	r4, r3
 8005824:	d109      	bne.n	800583a <_fflush_r+0x2e>
 8005826:	686c      	ldr	r4, [r5, #4]
 8005828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800582c:	b17b      	cbz	r3, 800584e <_fflush_r+0x42>
 800582e:	4621      	mov	r1, r4
 8005830:	4628      	mov	r0, r5
 8005832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005836:	f7ff bf63 	b.w	8005700 <__sflush_r>
 800583a:	4b07      	ldr	r3, [pc, #28]	; (8005858 <_fflush_r+0x4c>)
 800583c:	429c      	cmp	r4, r3
 800583e:	d101      	bne.n	8005844 <_fflush_r+0x38>
 8005840:	68ac      	ldr	r4, [r5, #8]
 8005842:	e7f1      	b.n	8005828 <_fflush_r+0x1c>
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <_fflush_r+0x50>)
 8005846:	429c      	cmp	r4, r3
 8005848:	bf08      	it	eq
 800584a:	68ec      	ldreq	r4, [r5, #12]
 800584c:	e7ec      	b.n	8005828 <_fflush_r+0x1c>
 800584e:	2000      	movs	r0, #0
 8005850:	bd38      	pop	{r3, r4, r5, pc}
 8005852:	bf00      	nop
 8005854:	08006f48 	.word	0x08006f48
 8005858:	08006f68 	.word	0x08006f68
 800585c:	08006f28 	.word	0x08006f28

08005860 <std>:
 8005860:	2300      	movs	r3, #0
 8005862:	b510      	push	{r4, lr}
 8005864:	4604      	mov	r4, r0
 8005866:	e9c0 3300 	strd	r3, r3, [r0]
 800586a:	6083      	str	r3, [r0, #8]
 800586c:	8181      	strh	r1, [r0, #12]
 800586e:	6643      	str	r3, [r0, #100]	; 0x64
 8005870:	81c2      	strh	r2, [r0, #14]
 8005872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005876:	6183      	str	r3, [r0, #24]
 8005878:	4619      	mov	r1, r3
 800587a:	2208      	movs	r2, #8
 800587c:	305c      	adds	r0, #92	; 0x5c
 800587e:	f7ff fd61 	bl	8005344 <memset>
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x38>)
 8005884:	6263      	str	r3, [r4, #36]	; 0x24
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <std+0x3c>)
 8005888:	62a3      	str	r3, [r4, #40]	; 0x28
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <std+0x40>)
 800588c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <std+0x44>)
 8005890:	6224      	str	r4, [r4, #32]
 8005892:	6323      	str	r3, [r4, #48]	; 0x30
 8005894:	bd10      	pop	{r4, pc}
 8005896:	bf00      	nop
 8005898:	080054b1 	.word	0x080054b1
 800589c:	080054d7 	.word	0x080054d7
 80058a0:	0800550f 	.word	0x0800550f
 80058a4:	08005533 	.word	0x08005533

080058a8 <_cleanup_r>:
 80058a8:	4901      	ldr	r1, [pc, #4]	; (80058b0 <_cleanup_r+0x8>)
 80058aa:	f000 b885 	b.w	80059b8 <_fwalk_reent>
 80058ae:	bf00      	nop
 80058b0:	0800580d 	.word	0x0800580d

080058b4 <__sfmoreglue>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	1e4a      	subs	r2, r1, #1
 80058b8:	2568      	movs	r5, #104	; 0x68
 80058ba:	4355      	muls	r5, r2
 80058bc:	460e      	mov	r6, r1
 80058be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058c2:	f000 f95b 	bl	8005b7c <_malloc_r>
 80058c6:	4604      	mov	r4, r0
 80058c8:	b140      	cbz	r0, 80058dc <__sfmoreglue+0x28>
 80058ca:	2100      	movs	r1, #0
 80058cc:	e9c0 1600 	strd	r1, r6, [r0]
 80058d0:	300c      	adds	r0, #12
 80058d2:	60a0      	str	r0, [r4, #8]
 80058d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058d8:	f7ff fd34 	bl	8005344 <memset>
 80058dc:	4620      	mov	r0, r4
 80058de:	bd70      	pop	{r4, r5, r6, pc}

080058e0 <__sinit>:
 80058e0:	6983      	ldr	r3, [r0, #24]
 80058e2:	b510      	push	{r4, lr}
 80058e4:	4604      	mov	r4, r0
 80058e6:	bb33      	cbnz	r3, 8005936 <__sinit+0x56>
 80058e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80058ec:	6503      	str	r3, [r0, #80]	; 0x50
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <__sinit+0x58>)
 80058f0:	4a12      	ldr	r2, [pc, #72]	; (800593c <__sinit+0x5c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6282      	str	r2, [r0, #40]	; 0x28
 80058f6:	4298      	cmp	r0, r3
 80058f8:	bf04      	itt	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	6183      	streq	r3, [r0, #24]
 80058fe:	f000 f81f 	bl	8005940 <__sfp>
 8005902:	6060      	str	r0, [r4, #4]
 8005904:	4620      	mov	r0, r4
 8005906:	f000 f81b 	bl	8005940 <__sfp>
 800590a:	60a0      	str	r0, [r4, #8]
 800590c:	4620      	mov	r0, r4
 800590e:	f000 f817 	bl	8005940 <__sfp>
 8005912:	2200      	movs	r2, #0
 8005914:	60e0      	str	r0, [r4, #12]
 8005916:	2104      	movs	r1, #4
 8005918:	6860      	ldr	r0, [r4, #4]
 800591a:	f7ff ffa1 	bl	8005860 <std>
 800591e:	2201      	movs	r2, #1
 8005920:	2109      	movs	r1, #9
 8005922:	68a0      	ldr	r0, [r4, #8]
 8005924:	f7ff ff9c 	bl	8005860 <std>
 8005928:	2202      	movs	r2, #2
 800592a:	2112      	movs	r1, #18
 800592c:	68e0      	ldr	r0, [r4, #12]
 800592e:	f7ff ff97 	bl	8005860 <std>
 8005932:	2301      	movs	r3, #1
 8005934:	61a3      	str	r3, [r4, #24]
 8005936:	bd10      	pop	{r4, pc}
 8005938:	08006f24 	.word	0x08006f24
 800593c:	080058a9 	.word	0x080058a9

08005940 <__sfp>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	4b1b      	ldr	r3, [pc, #108]	; (80059b0 <__sfp+0x70>)
 8005944:	681e      	ldr	r6, [r3, #0]
 8005946:	69b3      	ldr	r3, [r6, #24]
 8005948:	4607      	mov	r7, r0
 800594a:	b913      	cbnz	r3, 8005952 <__sfp+0x12>
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff ffc7 	bl	80058e0 <__sinit>
 8005952:	3648      	adds	r6, #72	; 0x48
 8005954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005958:	3b01      	subs	r3, #1
 800595a:	d503      	bpl.n	8005964 <__sfp+0x24>
 800595c:	6833      	ldr	r3, [r6, #0]
 800595e:	b133      	cbz	r3, 800596e <__sfp+0x2e>
 8005960:	6836      	ldr	r6, [r6, #0]
 8005962:	e7f7      	b.n	8005954 <__sfp+0x14>
 8005964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005968:	b16d      	cbz	r5, 8005986 <__sfp+0x46>
 800596a:	3468      	adds	r4, #104	; 0x68
 800596c:	e7f4      	b.n	8005958 <__sfp+0x18>
 800596e:	2104      	movs	r1, #4
 8005970:	4638      	mov	r0, r7
 8005972:	f7ff ff9f 	bl	80058b4 <__sfmoreglue>
 8005976:	6030      	str	r0, [r6, #0]
 8005978:	2800      	cmp	r0, #0
 800597a:	d1f1      	bne.n	8005960 <__sfp+0x20>
 800597c:	230c      	movs	r3, #12
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	4604      	mov	r4, r0
 8005982:	4620      	mov	r0, r4
 8005984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <__sfp+0x74>)
 8005988:	6665      	str	r5, [r4, #100]	; 0x64
 800598a:	e9c4 5500 	strd	r5, r5, [r4]
 800598e:	60a5      	str	r5, [r4, #8]
 8005990:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005994:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005998:	2208      	movs	r2, #8
 800599a:	4629      	mov	r1, r5
 800599c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059a0:	f7ff fcd0 	bl	8005344 <memset>
 80059a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059ac:	e7e9      	b.n	8005982 <__sfp+0x42>
 80059ae:	bf00      	nop
 80059b0:	08006f24 	.word	0x08006f24
 80059b4:	ffff0001 	.word	0xffff0001

080059b8 <_fwalk_reent>:
 80059b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059bc:	4680      	mov	r8, r0
 80059be:	4689      	mov	r9, r1
 80059c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059c4:	2600      	movs	r6, #0
 80059c6:	b914      	cbnz	r4, 80059ce <_fwalk_reent+0x16>
 80059c8:	4630      	mov	r0, r6
 80059ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80059d2:	3f01      	subs	r7, #1
 80059d4:	d501      	bpl.n	80059da <_fwalk_reent+0x22>
 80059d6:	6824      	ldr	r4, [r4, #0]
 80059d8:	e7f5      	b.n	80059c6 <_fwalk_reent+0xe>
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d907      	bls.n	80059f0 <_fwalk_reent+0x38>
 80059e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059e4:	3301      	adds	r3, #1
 80059e6:	d003      	beq.n	80059f0 <_fwalk_reent+0x38>
 80059e8:	4629      	mov	r1, r5
 80059ea:	4640      	mov	r0, r8
 80059ec:	47c8      	blx	r9
 80059ee:	4306      	orrs	r6, r0
 80059f0:	3568      	adds	r5, #104	; 0x68
 80059f2:	e7ee      	b.n	80059d2 <_fwalk_reent+0x1a>

080059f4 <_lseek_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4c07      	ldr	r4, [pc, #28]	; (8005a14 <_lseek_r+0x20>)
 80059f8:	4605      	mov	r5, r0
 80059fa:	4608      	mov	r0, r1
 80059fc:	4611      	mov	r1, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	6022      	str	r2, [r4, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f7fb fc0f 	bl	8001226 <_lseek>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_lseek_r+0x1e>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_lseek_r+0x1e>
 8005a10:	602b      	str	r3, [r5, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	20000484 	.word	0x20000484

08005a18 <__swhatbuf_r>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	460e      	mov	r6, r1
 8005a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a20:	2900      	cmp	r1, #0
 8005a22:	b096      	sub	sp, #88	; 0x58
 8005a24:	4614      	mov	r4, r2
 8005a26:	461d      	mov	r5, r3
 8005a28:	da07      	bge.n	8005a3a <__swhatbuf_r+0x22>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	602b      	str	r3, [r5, #0]
 8005a2e:	89b3      	ldrh	r3, [r6, #12]
 8005a30:	061a      	lsls	r2, r3, #24
 8005a32:	d410      	bmi.n	8005a56 <__swhatbuf_r+0x3e>
 8005a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a38:	e00e      	b.n	8005a58 <__swhatbuf_r+0x40>
 8005a3a:	466a      	mov	r2, sp
 8005a3c:	f001 f87c 	bl	8006b38 <_fstat_r>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	dbf2      	blt.n	8005a2a <__swhatbuf_r+0x12>
 8005a44:	9a01      	ldr	r2, [sp, #4]
 8005a46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a4e:	425a      	negs	r2, r3
 8005a50:	415a      	adcs	r2, r3
 8005a52:	602a      	str	r2, [r5, #0]
 8005a54:	e7ee      	b.n	8005a34 <__swhatbuf_r+0x1c>
 8005a56:	2340      	movs	r3, #64	; 0x40
 8005a58:	2000      	movs	r0, #0
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	b016      	add	sp, #88	; 0x58
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}

08005a60 <__smakebuf_r>:
 8005a60:	898b      	ldrh	r3, [r1, #12]
 8005a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a64:	079d      	lsls	r5, r3, #30
 8005a66:	4606      	mov	r6, r0
 8005a68:	460c      	mov	r4, r1
 8005a6a:	d507      	bpl.n	8005a7c <__smakebuf_r+0x1c>
 8005a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	6123      	str	r3, [r4, #16]
 8005a74:	2301      	movs	r3, #1
 8005a76:	6163      	str	r3, [r4, #20]
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	ab01      	add	r3, sp, #4
 8005a7e:	466a      	mov	r2, sp
 8005a80:	f7ff ffca 	bl	8005a18 <__swhatbuf_r>
 8005a84:	9900      	ldr	r1, [sp, #0]
 8005a86:	4605      	mov	r5, r0
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f000 f877 	bl	8005b7c <_malloc_r>
 8005a8e:	b948      	cbnz	r0, 8005aa4 <__smakebuf_r+0x44>
 8005a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a94:	059a      	lsls	r2, r3, #22
 8005a96:	d4ef      	bmi.n	8005a78 <__smakebuf_r+0x18>
 8005a98:	f023 0303 	bic.w	r3, r3, #3
 8005a9c:	f043 0302 	orr.w	r3, r3, #2
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	e7e3      	b.n	8005a6c <__smakebuf_r+0xc>
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <__smakebuf_r+0x7c>)
 8005aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	6020      	str	r0, [r4, #0]
 8005aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	9b00      	ldr	r3, [sp, #0]
 8005ab4:	6163      	str	r3, [r4, #20]
 8005ab6:	9b01      	ldr	r3, [sp, #4]
 8005ab8:	6120      	str	r0, [r4, #16]
 8005aba:	b15b      	cbz	r3, 8005ad4 <__smakebuf_r+0x74>
 8005abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f001 f84b 	bl	8006b5c <_isatty_r>
 8005ac6:	b128      	cbz	r0, 8005ad4 <__smakebuf_r+0x74>
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	431d      	orrs	r5, r3
 8005ad8:	81a5      	strh	r5, [r4, #12]
 8005ada:	e7cd      	b.n	8005a78 <__smakebuf_r+0x18>
 8005adc:	080058a9 	.word	0x080058a9

08005ae0 <_free_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	2900      	cmp	r1, #0
 8005ae6:	d045      	beq.n	8005b74 <_free_r+0x94>
 8005ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aec:	1f0c      	subs	r4, r1, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfb8      	it	lt
 8005af2:	18e4      	addlt	r4, r4, r3
 8005af4:	f001 f88a 	bl	8006c0c <__malloc_lock>
 8005af8:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <_free_r+0x98>)
 8005afa:	6813      	ldr	r3, [r2, #0]
 8005afc:	4610      	mov	r0, r2
 8005afe:	b933      	cbnz	r3, 8005b0e <_free_r+0x2e>
 8005b00:	6063      	str	r3, [r4, #4]
 8005b02:	6014      	str	r4, [r2, #0]
 8005b04:	4628      	mov	r0, r5
 8005b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b0a:	f001 b880 	b.w	8006c0e <__malloc_unlock>
 8005b0e:	42a3      	cmp	r3, r4
 8005b10:	d90c      	bls.n	8005b2c <_free_r+0x4c>
 8005b12:	6821      	ldr	r1, [r4, #0]
 8005b14:	1862      	adds	r2, r4, r1
 8005b16:	4293      	cmp	r3, r2
 8005b18:	bf04      	itt	eq
 8005b1a:	681a      	ldreq	r2, [r3, #0]
 8005b1c:	685b      	ldreq	r3, [r3, #4]
 8005b1e:	6063      	str	r3, [r4, #4]
 8005b20:	bf04      	itt	eq
 8005b22:	1852      	addeq	r2, r2, r1
 8005b24:	6022      	streq	r2, [r4, #0]
 8005b26:	6004      	str	r4, [r0, #0]
 8005b28:	e7ec      	b.n	8005b04 <_free_r+0x24>
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	b10a      	cbz	r2, 8005b34 <_free_r+0x54>
 8005b30:	42a2      	cmp	r2, r4
 8005b32:	d9fa      	bls.n	8005b2a <_free_r+0x4a>
 8005b34:	6819      	ldr	r1, [r3, #0]
 8005b36:	1858      	adds	r0, r3, r1
 8005b38:	42a0      	cmp	r0, r4
 8005b3a:	d10b      	bne.n	8005b54 <_free_r+0x74>
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	4401      	add	r1, r0
 8005b40:	1858      	adds	r0, r3, r1
 8005b42:	4282      	cmp	r2, r0
 8005b44:	6019      	str	r1, [r3, #0]
 8005b46:	d1dd      	bne.n	8005b04 <_free_r+0x24>
 8005b48:	6810      	ldr	r0, [r2, #0]
 8005b4a:	6852      	ldr	r2, [r2, #4]
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	4401      	add	r1, r0
 8005b50:	6019      	str	r1, [r3, #0]
 8005b52:	e7d7      	b.n	8005b04 <_free_r+0x24>
 8005b54:	d902      	bls.n	8005b5c <_free_r+0x7c>
 8005b56:	230c      	movs	r3, #12
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	e7d3      	b.n	8005b04 <_free_r+0x24>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	1821      	adds	r1, r4, r0
 8005b60:	428a      	cmp	r2, r1
 8005b62:	bf04      	itt	eq
 8005b64:	6811      	ldreq	r1, [r2, #0]
 8005b66:	6852      	ldreq	r2, [r2, #4]
 8005b68:	6062      	str	r2, [r4, #4]
 8005b6a:	bf04      	itt	eq
 8005b6c:	1809      	addeq	r1, r1, r0
 8005b6e:	6021      	streq	r1, [r4, #0]
 8005b70:	605c      	str	r4, [r3, #4]
 8005b72:	e7c7      	b.n	8005b04 <_free_r+0x24>
 8005b74:	bd38      	pop	{r3, r4, r5, pc}
 8005b76:	bf00      	nop
 8005b78:	200002d4 	.word	0x200002d4

08005b7c <_malloc_r>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	1ccd      	adds	r5, r1, #3
 8005b80:	f025 0503 	bic.w	r5, r5, #3
 8005b84:	3508      	adds	r5, #8
 8005b86:	2d0c      	cmp	r5, #12
 8005b88:	bf38      	it	cc
 8005b8a:	250c      	movcc	r5, #12
 8005b8c:	2d00      	cmp	r5, #0
 8005b8e:	4606      	mov	r6, r0
 8005b90:	db01      	blt.n	8005b96 <_malloc_r+0x1a>
 8005b92:	42a9      	cmp	r1, r5
 8005b94:	d903      	bls.n	8005b9e <_malloc_r+0x22>
 8005b96:	230c      	movs	r3, #12
 8005b98:	6033      	str	r3, [r6, #0]
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	bd70      	pop	{r4, r5, r6, pc}
 8005b9e:	f001 f835 	bl	8006c0c <__malloc_lock>
 8005ba2:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <_malloc_r+0xac>)
 8005ba4:	6814      	ldr	r4, [r2, #0]
 8005ba6:	4621      	mov	r1, r4
 8005ba8:	b991      	cbnz	r1, 8005bd0 <_malloc_r+0x54>
 8005baa:	4c20      	ldr	r4, [pc, #128]	; (8005c2c <_malloc_r+0xb0>)
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	b91b      	cbnz	r3, 8005bb8 <_malloc_r+0x3c>
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f000 fe2b 	bl	800680c <_sbrk_r>
 8005bb6:	6020      	str	r0, [r4, #0]
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f000 fe26 	bl	800680c <_sbrk_r>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d124      	bne.n	8005c0e <_malloc_r+0x92>
 8005bc4:	230c      	movs	r3, #12
 8005bc6:	6033      	str	r3, [r6, #0]
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f001 f820 	bl	8006c0e <__malloc_unlock>
 8005bce:	e7e4      	b.n	8005b9a <_malloc_r+0x1e>
 8005bd0:	680b      	ldr	r3, [r1, #0]
 8005bd2:	1b5b      	subs	r3, r3, r5
 8005bd4:	d418      	bmi.n	8005c08 <_malloc_r+0x8c>
 8005bd6:	2b0b      	cmp	r3, #11
 8005bd8:	d90f      	bls.n	8005bfa <_malloc_r+0x7e>
 8005bda:	600b      	str	r3, [r1, #0]
 8005bdc:	50cd      	str	r5, [r1, r3]
 8005bde:	18cc      	adds	r4, r1, r3
 8005be0:	4630      	mov	r0, r6
 8005be2:	f001 f814 	bl	8006c0e <__malloc_unlock>
 8005be6:	f104 000b 	add.w	r0, r4, #11
 8005bea:	1d23      	adds	r3, r4, #4
 8005bec:	f020 0007 	bic.w	r0, r0, #7
 8005bf0:	1ac3      	subs	r3, r0, r3
 8005bf2:	d0d3      	beq.n	8005b9c <_malloc_r+0x20>
 8005bf4:	425a      	negs	r2, r3
 8005bf6:	50e2      	str	r2, [r4, r3]
 8005bf8:	e7d0      	b.n	8005b9c <_malloc_r+0x20>
 8005bfa:	428c      	cmp	r4, r1
 8005bfc:	684b      	ldr	r3, [r1, #4]
 8005bfe:	bf16      	itet	ne
 8005c00:	6063      	strne	r3, [r4, #4]
 8005c02:	6013      	streq	r3, [r2, #0]
 8005c04:	460c      	movne	r4, r1
 8005c06:	e7eb      	b.n	8005be0 <_malloc_r+0x64>
 8005c08:	460c      	mov	r4, r1
 8005c0a:	6849      	ldr	r1, [r1, #4]
 8005c0c:	e7cc      	b.n	8005ba8 <_malloc_r+0x2c>
 8005c0e:	1cc4      	adds	r4, r0, #3
 8005c10:	f024 0403 	bic.w	r4, r4, #3
 8005c14:	42a0      	cmp	r0, r4
 8005c16:	d005      	beq.n	8005c24 <_malloc_r+0xa8>
 8005c18:	1a21      	subs	r1, r4, r0
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f000 fdf6 	bl	800680c <_sbrk_r>
 8005c20:	3001      	adds	r0, #1
 8005c22:	d0cf      	beq.n	8005bc4 <_malloc_r+0x48>
 8005c24:	6025      	str	r5, [r4, #0]
 8005c26:	e7db      	b.n	8005be0 <_malloc_r+0x64>
 8005c28:	200002d4 	.word	0x200002d4
 8005c2c:	200002d8 	.word	0x200002d8

08005c30 <__ssputs_r>:
 8005c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	688e      	ldr	r6, [r1, #8]
 8005c36:	429e      	cmp	r6, r3
 8005c38:	4682      	mov	sl, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	4690      	mov	r8, r2
 8005c3e:	4699      	mov	r9, r3
 8005c40:	d837      	bhi.n	8005cb2 <__ssputs_r+0x82>
 8005c42:	898a      	ldrh	r2, [r1, #12]
 8005c44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c48:	d031      	beq.n	8005cae <__ssputs_r+0x7e>
 8005c4a:	6825      	ldr	r5, [r4, #0]
 8005c4c:	6909      	ldr	r1, [r1, #16]
 8005c4e:	1a6f      	subs	r7, r5, r1
 8005c50:	6965      	ldr	r5, [r4, #20]
 8005c52:	2302      	movs	r3, #2
 8005c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c58:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c5c:	f109 0301 	add.w	r3, r9, #1
 8005c60:	443b      	add	r3, r7
 8005c62:	429d      	cmp	r5, r3
 8005c64:	bf38      	it	cc
 8005c66:	461d      	movcc	r5, r3
 8005c68:	0553      	lsls	r3, r2, #21
 8005c6a:	d530      	bpl.n	8005cce <__ssputs_r+0x9e>
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f7ff ff85 	bl	8005b7c <_malloc_r>
 8005c72:	4606      	mov	r6, r0
 8005c74:	b950      	cbnz	r0, 8005c8c <__ssputs_r+0x5c>
 8005c76:	230c      	movs	r3, #12
 8005c78:	f8ca 3000 	str.w	r3, [sl]
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8c:	463a      	mov	r2, r7
 8005c8e:	6921      	ldr	r1, [r4, #16]
 8005c90:	f000 ff98 	bl	8006bc4 <memcpy>
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9e:	81a3      	strh	r3, [r4, #12]
 8005ca0:	6126      	str	r6, [r4, #16]
 8005ca2:	6165      	str	r5, [r4, #20]
 8005ca4:	443e      	add	r6, r7
 8005ca6:	1bed      	subs	r5, r5, r7
 8005ca8:	6026      	str	r6, [r4, #0]
 8005caa:	60a5      	str	r5, [r4, #8]
 8005cac:	464e      	mov	r6, r9
 8005cae:	454e      	cmp	r6, r9
 8005cb0:	d900      	bls.n	8005cb4 <__ssputs_r+0x84>
 8005cb2:	464e      	mov	r6, r9
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	4641      	mov	r1, r8
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	f000 ff8e 	bl	8006bda <memmove>
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	1b9b      	subs	r3, r3, r6
 8005cc2:	60a3      	str	r3, [r4, #8]
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	441e      	add	r6, r3
 8005cc8:	6026      	str	r6, [r4, #0]
 8005cca:	2000      	movs	r0, #0
 8005ccc:	e7dc      	b.n	8005c88 <__ssputs_r+0x58>
 8005cce:	462a      	mov	r2, r5
 8005cd0:	f000 ff9e 	bl	8006c10 <_realloc_r>
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d1e2      	bne.n	8005ca0 <__ssputs_r+0x70>
 8005cda:	6921      	ldr	r1, [r4, #16]
 8005cdc:	4650      	mov	r0, sl
 8005cde:	f7ff feff 	bl	8005ae0 <_free_r>
 8005ce2:	e7c8      	b.n	8005c76 <__ssputs_r+0x46>

08005ce4 <_svfiprintf_r>:
 8005ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce8:	461d      	mov	r5, r3
 8005cea:	898b      	ldrh	r3, [r1, #12]
 8005cec:	061f      	lsls	r7, r3, #24
 8005cee:	b09d      	sub	sp, #116	; 0x74
 8005cf0:	4680      	mov	r8, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	4616      	mov	r6, r2
 8005cf6:	d50f      	bpl.n	8005d18 <_svfiprintf_r+0x34>
 8005cf8:	690b      	ldr	r3, [r1, #16]
 8005cfa:	b96b      	cbnz	r3, 8005d18 <_svfiprintf_r+0x34>
 8005cfc:	2140      	movs	r1, #64	; 0x40
 8005cfe:	f7ff ff3d 	bl	8005b7c <_malloc_r>
 8005d02:	6020      	str	r0, [r4, #0]
 8005d04:	6120      	str	r0, [r4, #16]
 8005d06:	b928      	cbnz	r0, 8005d14 <_svfiprintf_r+0x30>
 8005d08:	230c      	movs	r3, #12
 8005d0a:	f8c8 3000 	str.w	r3, [r8]
 8005d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d12:	e0c8      	b.n	8005ea6 <_svfiprintf_r+0x1c2>
 8005d14:	2340      	movs	r3, #64	; 0x40
 8005d16:	6163      	str	r3, [r4, #20]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d1c:	2320      	movs	r3, #32
 8005d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d22:	2330      	movs	r3, #48	; 0x30
 8005d24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d28:	9503      	str	r5, [sp, #12]
 8005d2a:	f04f 0b01 	mov.w	fp, #1
 8005d2e:	4637      	mov	r7, r6
 8005d30:	463d      	mov	r5, r7
 8005d32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d36:	b10b      	cbz	r3, 8005d3c <_svfiprintf_r+0x58>
 8005d38:	2b25      	cmp	r3, #37	; 0x25
 8005d3a:	d13e      	bne.n	8005dba <_svfiprintf_r+0xd6>
 8005d3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d40:	d00b      	beq.n	8005d5a <_svfiprintf_r+0x76>
 8005d42:	4653      	mov	r3, sl
 8005d44:	4632      	mov	r2, r6
 8005d46:	4621      	mov	r1, r4
 8005d48:	4640      	mov	r0, r8
 8005d4a:	f7ff ff71 	bl	8005c30 <__ssputs_r>
 8005d4e:	3001      	adds	r0, #1
 8005d50:	f000 80a4 	beq.w	8005e9c <_svfiprintf_r+0x1b8>
 8005d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d56:	4453      	add	r3, sl
 8005d58:	9309      	str	r3, [sp, #36]	; 0x24
 8005d5a:	783b      	ldrb	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 809d 	beq.w	8005e9c <_svfiprintf_r+0x1b8>
 8005d62:	2300      	movs	r3, #0
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	9307      	str	r3, [sp, #28]
 8005d70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d74:	931a      	str	r3, [sp, #104]	; 0x68
 8005d76:	462f      	mov	r7, r5
 8005d78:	2205      	movs	r2, #5
 8005d7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d7e:	4850      	ldr	r0, [pc, #320]	; (8005ec0 <_svfiprintf_r+0x1dc>)
 8005d80:	f7fa fa46 	bl	8000210 <memchr>
 8005d84:	9b04      	ldr	r3, [sp, #16]
 8005d86:	b9d0      	cbnz	r0, 8005dbe <_svfiprintf_r+0xda>
 8005d88:	06d9      	lsls	r1, r3, #27
 8005d8a:	bf44      	itt	mi
 8005d8c:	2220      	movmi	r2, #32
 8005d8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d92:	071a      	lsls	r2, r3, #28
 8005d94:	bf44      	itt	mi
 8005d96:	222b      	movmi	r2, #43	; 0x2b
 8005d98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d9c:	782a      	ldrb	r2, [r5, #0]
 8005d9e:	2a2a      	cmp	r2, #42	; 0x2a
 8005da0:	d015      	beq.n	8005dce <_svfiprintf_r+0xea>
 8005da2:	9a07      	ldr	r2, [sp, #28]
 8005da4:	462f      	mov	r7, r5
 8005da6:	2000      	movs	r0, #0
 8005da8:	250a      	movs	r5, #10
 8005daa:	4639      	mov	r1, r7
 8005dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005db0:	3b30      	subs	r3, #48	; 0x30
 8005db2:	2b09      	cmp	r3, #9
 8005db4:	d94d      	bls.n	8005e52 <_svfiprintf_r+0x16e>
 8005db6:	b1b8      	cbz	r0, 8005de8 <_svfiprintf_r+0x104>
 8005db8:	e00f      	b.n	8005dda <_svfiprintf_r+0xf6>
 8005dba:	462f      	mov	r7, r5
 8005dbc:	e7b8      	b.n	8005d30 <_svfiprintf_r+0x4c>
 8005dbe:	4a40      	ldr	r2, [pc, #256]	; (8005ec0 <_svfiprintf_r+0x1dc>)
 8005dc0:	1a80      	subs	r0, r0, r2
 8005dc2:	fa0b f000 	lsl.w	r0, fp, r0
 8005dc6:	4318      	orrs	r0, r3
 8005dc8:	9004      	str	r0, [sp, #16]
 8005dca:	463d      	mov	r5, r7
 8005dcc:	e7d3      	b.n	8005d76 <_svfiprintf_r+0x92>
 8005dce:	9a03      	ldr	r2, [sp, #12]
 8005dd0:	1d11      	adds	r1, r2, #4
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	9103      	str	r1, [sp, #12]
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	db01      	blt.n	8005dde <_svfiprintf_r+0xfa>
 8005dda:	9207      	str	r2, [sp, #28]
 8005ddc:	e004      	b.n	8005de8 <_svfiprintf_r+0x104>
 8005dde:	4252      	negs	r2, r2
 8005de0:	f043 0302 	orr.w	r3, r3, #2
 8005de4:	9207      	str	r2, [sp, #28]
 8005de6:	9304      	str	r3, [sp, #16]
 8005de8:	783b      	ldrb	r3, [r7, #0]
 8005dea:	2b2e      	cmp	r3, #46	; 0x2e
 8005dec:	d10c      	bne.n	8005e08 <_svfiprintf_r+0x124>
 8005dee:	787b      	ldrb	r3, [r7, #1]
 8005df0:	2b2a      	cmp	r3, #42	; 0x2a
 8005df2:	d133      	bne.n	8005e5c <_svfiprintf_r+0x178>
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	1d1a      	adds	r2, r3, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	9203      	str	r2, [sp, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bfb8      	it	lt
 8005e00:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e04:	3702      	adds	r7, #2
 8005e06:	9305      	str	r3, [sp, #20]
 8005e08:	4d2e      	ldr	r5, [pc, #184]	; (8005ec4 <_svfiprintf_r+0x1e0>)
 8005e0a:	7839      	ldrb	r1, [r7, #0]
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7fa f9fe 	bl	8000210 <memchr>
 8005e14:	b138      	cbz	r0, 8005e26 <_svfiprintf_r+0x142>
 8005e16:	2340      	movs	r3, #64	; 0x40
 8005e18:	1b40      	subs	r0, r0, r5
 8005e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e1e:	9b04      	ldr	r3, [sp, #16]
 8005e20:	4303      	orrs	r3, r0
 8005e22:	3701      	adds	r7, #1
 8005e24:	9304      	str	r3, [sp, #16]
 8005e26:	7839      	ldrb	r1, [r7, #0]
 8005e28:	4827      	ldr	r0, [pc, #156]	; (8005ec8 <_svfiprintf_r+0x1e4>)
 8005e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e2e:	2206      	movs	r2, #6
 8005e30:	1c7e      	adds	r6, r7, #1
 8005e32:	f7fa f9ed 	bl	8000210 <memchr>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d038      	beq.n	8005eac <_svfiprintf_r+0x1c8>
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <_svfiprintf_r+0x1e8>)
 8005e3c:	bb13      	cbnz	r3, 8005e84 <_svfiprintf_r+0x1a0>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	3307      	adds	r3, #7
 8005e42:	f023 0307 	bic.w	r3, r3, #7
 8005e46:	3308      	adds	r3, #8
 8005e48:	9303      	str	r3, [sp, #12]
 8005e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e4c:	444b      	add	r3, r9
 8005e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e50:	e76d      	b.n	8005d2e <_svfiprintf_r+0x4a>
 8005e52:	fb05 3202 	mla	r2, r5, r2, r3
 8005e56:	2001      	movs	r0, #1
 8005e58:	460f      	mov	r7, r1
 8005e5a:	e7a6      	b.n	8005daa <_svfiprintf_r+0xc6>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	3701      	adds	r7, #1
 8005e60:	9305      	str	r3, [sp, #20]
 8005e62:	4619      	mov	r1, r3
 8005e64:	250a      	movs	r5, #10
 8005e66:	4638      	mov	r0, r7
 8005e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e6c:	3a30      	subs	r2, #48	; 0x30
 8005e6e:	2a09      	cmp	r2, #9
 8005e70:	d903      	bls.n	8005e7a <_svfiprintf_r+0x196>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0c8      	beq.n	8005e08 <_svfiprintf_r+0x124>
 8005e76:	9105      	str	r1, [sp, #20]
 8005e78:	e7c6      	b.n	8005e08 <_svfiprintf_r+0x124>
 8005e7a:	fb05 2101 	mla	r1, r5, r1, r2
 8005e7e:	2301      	movs	r3, #1
 8005e80:	4607      	mov	r7, r0
 8005e82:	e7f0      	b.n	8005e66 <_svfiprintf_r+0x182>
 8005e84:	ab03      	add	r3, sp, #12
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	4622      	mov	r2, r4
 8005e8a:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <_svfiprintf_r+0x1ec>)
 8005e8c:	a904      	add	r1, sp, #16
 8005e8e:	4640      	mov	r0, r8
 8005e90:	f3af 8000 	nop.w
 8005e94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e98:	4681      	mov	r9, r0
 8005e9a:	d1d6      	bne.n	8005e4a <_svfiprintf_r+0x166>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	065b      	lsls	r3, r3, #25
 8005ea0:	f53f af35 	bmi.w	8005d0e <_svfiprintf_r+0x2a>
 8005ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ea6:	b01d      	add	sp, #116	; 0x74
 8005ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eac:	ab03      	add	r3, sp, #12
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <_svfiprintf_r+0x1ec>)
 8005eb4:	a904      	add	r1, sp, #16
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	f000 fa2c 	bl	8006314 <_printf_i>
 8005ebc:	e7ea      	b.n	8005e94 <_svfiprintf_r+0x1b0>
 8005ebe:	bf00      	nop
 8005ec0:	08006f88 	.word	0x08006f88
 8005ec4:	08006f8e 	.word	0x08006f8e
 8005ec8:	08006f92 	.word	0x08006f92
 8005ecc:	00000000 	.word	0x00000000
 8005ed0:	08005c31 	.word	0x08005c31

08005ed4 <_sungetc_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	1c4b      	adds	r3, r1, #1
 8005ed8:	4614      	mov	r4, r2
 8005eda:	d103      	bne.n	8005ee4 <_sungetc_r+0x10>
 8005edc:	f04f 35ff 	mov.w	r5, #4294967295
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	8993      	ldrh	r3, [r2, #12]
 8005ee6:	f023 0320 	bic.w	r3, r3, #32
 8005eea:	8193      	strh	r3, [r2, #12]
 8005eec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005eee:	6852      	ldr	r2, [r2, #4]
 8005ef0:	b2cd      	uxtb	r5, r1
 8005ef2:	b18b      	cbz	r3, 8005f18 <_sungetc_r+0x44>
 8005ef4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	dd08      	ble.n	8005f0c <_sungetc_r+0x38>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	1e5a      	subs	r2, r3, #1
 8005efe:	6022      	str	r2, [r4, #0]
 8005f00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005f04:	6863      	ldr	r3, [r4, #4]
 8005f06:	3301      	adds	r3, #1
 8005f08:	6063      	str	r3, [r4, #4]
 8005f0a:	e7e9      	b.n	8005ee0 <_sungetc_r+0xc>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	f000 fdd9 	bl	8006ac4 <__submore>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d0f1      	beq.n	8005efa <_sungetc_r+0x26>
 8005f16:	e7e1      	b.n	8005edc <_sungetc_r+0x8>
 8005f18:	6921      	ldr	r1, [r4, #16]
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	b151      	cbz	r1, 8005f34 <_sungetc_r+0x60>
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	d208      	bcs.n	8005f34 <_sungetc_r+0x60>
 8005f22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005f26:	42a9      	cmp	r1, r5
 8005f28:	d104      	bne.n	8005f34 <_sungetc_r+0x60>
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	3201      	adds	r2, #1
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	6062      	str	r2, [r4, #4]
 8005f32:	e7d5      	b.n	8005ee0 <_sungetc_r+0xc>
 8005f34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f3e:	2303      	movs	r3, #3
 8005f40:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f42:	4623      	mov	r3, r4
 8005f44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e7dc      	b.n	8005f08 <_sungetc_r+0x34>

08005f4e <__ssrefill_r>:
 8005f4e:	b510      	push	{r4, lr}
 8005f50:	460c      	mov	r4, r1
 8005f52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f54:	b169      	cbz	r1, 8005f72 <__ssrefill_r+0x24>
 8005f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f5a:	4299      	cmp	r1, r3
 8005f5c:	d001      	beq.n	8005f62 <__ssrefill_r+0x14>
 8005f5e:	f7ff fdbf 	bl	8005ae0 <_free_r>
 8005f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f64:	6063      	str	r3, [r4, #4]
 8005f66:	2000      	movs	r0, #0
 8005f68:	6360      	str	r0, [r4, #52]	; 0x34
 8005f6a:	b113      	cbz	r3, 8005f72 <__ssrefill_r+0x24>
 8005f6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	bd10      	pop	{r4, pc}
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	2300      	movs	r3, #0
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	f043 0320 	orr.w	r3, r3, #32
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	e7f3      	b.n	8005f70 <__ssrefill_r+0x22>

08005f88 <__ssvfiscanf_r>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005f90:	460c      	mov	r4, r1
 8005f92:	2100      	movs	r1, #0
 8005f94:	9144      	str	r1, [sp, #272]	; 0x110
 8005f96:	9145      	str	r1, [sp, #276]	; 0x114
 8005f98:	499f      	ldr	r1, [pc, #636]	; (8006218 <__ssvfiscanf_r+0x290>)
 8005f9a:	91a0      	str	r1, [sp, #640]	; 0x280
 8005f9c:	f10d 0804 	add.w	r8, sp, #4
 8005fa0:	499e      	ldr	r1, [pc, #632]	; (800621c <__ssvfiscanf_r+0x294>)
 8005fa2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8006220 <__ssvfiscanf_r+0x298>
 8005fa6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005faa:	4606      	mov	r6, r0
 8005fac:	4692      	mov	sl, r2
 8005fae:	91a1      	str	r1, [sp, #644]	; 0x284
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	270a      	movs	r7, #10
 8005fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 812a 	beq.w	8006212 <__ssvfiscanf_r+0x28a>
 8005fbe:	4655      	mov	r5, sl
 8005fc0:	f000 fde0 	bl	8006b84 <__locale_ctype_ptr>
 8005fc4:	f815 bb01 	ldrb.w	fp, [r5], #1
 8005fc8:	4458      	add	r0, fp
 8005fca:	7843      	ldrb	r3, [r0, #1]
 8005fcc:	f013 0308 	ands.w	r3, r3, #8
 8005fd0:	d01c      	beq.n	800600c <__ssvfiscanf_r+0x84>
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dd12      	ble.n	8005ffe <__ssvfiscanf_r+0x76>
 8005fd8:	f000 fdd4 	bl	8006b84 <__locale_ctype_ptr>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	781a      	ldrb	r2, [r3, #0]
 8005fe0:	4410      	add	r0, r2
 8005fe2:	7842      	ldrb	r2, [r0, #1]
 8005fe4:	0712      	lsls	r2, r2, #28
 8005fe6:	d401      	bmi.n	8005fec <__ssvfiscanf_r+0x64>
 8005fe8:	46aa      	mov	sl, r5
 8005fea:	e7e3      	b.n	8005fb4 <__ssvfiscanf_r+0x2c>
 8005fec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005fee:	3201      	adds	r2, #1
 8005ff0:	9245      	str	r2, [sp, #276]	; 0x114
 8005ff2:	6862      	ldr	r2, [r4, #4]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	3a01      	subs	r2, #1
 8005ff8:	6062      	str	r2, [r4, #4]
 8005ffa:	6023      	str	r3, [r4, #0]
 8005ffc:	e7e9      	b.n	8005fd2 <__ssvfiscanf_r+0x4a>
 8005ffe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006000:	4621      	mov	r1, r4
 8006002:	4630      	mov	r0, r6
 8006004:	4798      	blx	r3
 8006006:	2800      	cmp	r0, #0
 8006008:	d0e6      	beq.n	8005fd8 <__ssvfiscanf_r+0x50>
 800600a:	e7ed      	b.n	8005fe8 <__ssvfiscanf_r+0x60>
 800600c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8006010:	f040 8082 	bne.w	8006118 <__ssvfiscanf_r+0x190>
 8006014:	9343      	str	r3, [sp, #268]	; 0x10c
 8006016:	9341      	str	r3, [sp, #260]	; 0x104
 8006018:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800601c:	2b2a      	cmp	r3, #42	; 0x2a
 800601e:	d103      	bne.n	8006028 <__ssvfiscanf_r+0xa0>
 8006020:	2310      	movs	r3, #16
 8006022:	9341      	str	r3, [sp, #260]	; 0x104
 8006024:	f10a 0502 	add.w	r5, sl, #2
 8006028:	46aa      	mov	sl, r5
 800602a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800602e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006032:	2a09      	cmp	r2, #9
 8006034:	d922      	bls.n	800607c <__ssvfiscanf_r+0xf4>
 8006036:	2203      	movs	r2, #3
 8006038:	4879      	ldr	r0, [pc, #484]	; (8006220 <__ssvfiscanf_r+0x298>)
 800603a:	f7fa f8e9 	bl	8000210 <memchr>
 800603e:	b138      	cbz	r0, 8006050 <__ssvfiscanf_r+0xc8>
 8006040:	eba0 0309 	sub.w	r3, r0, r9
 8006044:	2001      	movs	r0, #1
 8006046:	4098      	lsls	r0, r3
 8006048:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800604a:	4318      	orrs	r0, r3
 800604c:	9041      	str	r0, [sp, #260]	; 0x104
 800604e:	46aa      	mov	sl, r5
 8006050:	f89a 3000 	ldrb.w	r3, [sl]
 8006054:	2b67      	cmp	r3, #103	; 0x67
 8006056:	f10a 0501 	add.w	r5, sl, #1
 800605a:	d82b      	bhi.n	80060b4 <__ssvfiscanf_r+0x12c>
 800605c:	2b65      	cmp	r3, #101	; 0x65
 800605e:	f080 809f 	bcs.w	80061a0 <__ssvfiscanf_r+0x218>
 8006062:	2b47      	cmp	r3, #71	; 0x47
 8006064:	d810      	bhi.n	8006088 <__ssvfiscanf_r+0x100>
 8006066:	2b45      	cmp	r3, #69	; 0x45
 8006068:	f080 809a 	bcs.w	80061a0 <__ssvfiscanf_r+0x218>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d06c      	beq.n	800614a <__ssvfiscanf_r+0x1c2>
 8006070:	2b25      	cmp	r3, #37	; 0x25
 8006072:	d051      	beq.n	8006118 <__ssvfiscanf_r+0x190>
 8006074:	2303      	movs	r3, #3
 8006076:	9347      	str	r3, [sp, #284]	; 0x11c
 8006078:	9742      	str	r7, [sp, #264]	; 0x108
 800607a:	e027      	b.n	80060cc <__ssvfiscanf_r+0x144>
 800607c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800607e:	fb07 1303 	mla	r3, r7, r3, r1
 8006082:	3b30      	subs	r3, #48	; 0x30
 8006084:	9343      	str	r3, [sp, #268]	; 0x10c
 8006086:	e7cf      	b.n	8006028 <__ssvfiscanf_r+0xa0>
 8006088:	2b5b      	cmp	r3, #91	; 0x5b
 800608a:	d06a      	beq.n	8006162 <__ssvfiscanf_r+0x1da>
 800608c:	d80c      	bhi.n	80060a8 <__ssvfiscanf_r+0x120>
 800608e:	2b58      	cmp	r3, #88	; 0x58
 8006090:	d1f0      	bne.n	8006074 <__ssvfiscanf_r+0xec>
 8006092:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006098:	9241      	str	r2, [sp, #260]	; 0x104
 800609a:	2210      	movs	r2, #16
 800609c:	9242      	str	r2, [sp, #264]	; 0x108
 800609e:	2b6e      	cmp	r3, #110	; 0x6e
 80060a0:	bf8c      	ite	hi
 80060a2:	2304      	movhi	r3, #4
 80060a4:	2303      	movls	r3, #3
 80060a6:	e010      	b.n	80060ca <__ssvfiscanf_r+0x142>
 80060a8:	2b63      	cmp	r3, #99	; 0x63
 80060aa:	d065      	beq.n	8006178 <__ssvfiscanf_r+0x1f0>
 80060ac:	2b64      	cmp	r3, #100	; 0x64
 80060ae:	d1e1      	bne.n	8006074 <__ssvfiscanf_r+0xec>
 80060b0:	9742      	str	r7, [sp, #264]	; 0x108
 80060b2:	e7f4      	b.n	800609e <__ssvfiscanf_r+0x116>
 80060b4:	2b70      	cmp	r3, #112	; 0x70
 80060b6:	d04b      	beq.n	8006150 <__ssvfiscanf_r+0x1c8>
 80060b8:	d826      	bhi.n	8006108 <__ssvfiscanf_r+0x180>
 80060ba:	2b6e      	cmp	r3, #110	; 0x6e
 80060bc:	d062      	beq.n	8006184 <__ssvfiscanf_r+0x1fc>
 80060be:	d84c      	bhi.n	800615a <__ssvfiscanf_r+0x1d2>
 80060c0:	2b69      	cmp	r3, #105	; 0x69
 80060c2:	d1d7      	bne.n	8006074 <__ssvfiscanf_r+0xec>
 80060c4:	2300      	movs	r3, #0
 80060c6:	9342      	str	r3, [sp, #264]	; 0x108
 80060c8:	2303      	movs	r3, #3
 80060ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80060cc:	6863      	ldr	r3, [r4, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	dd68      	ble.n	80061a4 <__ssvfiscanf_r+0x21c>
 80060d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80060d4:	0659      	lsls	r1, r3, #25
 80060d6:	d407      	bmi.n	80060e8 <__ssvfiscanf_r+0x160>
 80060d8:	f000 fd54 	bl	8006b84 <__locale_ctype_ptr>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	4410      	add	r0, r2
 80060e2:	7842      	ldrb	r2, [r0, #1]
 80060e4:	0712      	lsls	r2, r2, #28
 80060e6:	d464      	bmi.n	80061b2 <__ssvfiscanf_r+0x22a>
 80060e8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	dc73      	bgt.n	80061d6 <__ssvfiscanf_r+0x24e>
 80060ee:	466b      	mov	r3, sp
 80060f0:	4622      	mov	r2, r4
 80060f2:	a941      	add	r1, sp, #260	; 0x104
 80060f4:	4630      	mov	r0, r6
 80060f6:	f000 fa1f 	bl	8006538 <_scanf_chars>
 80060fa:	2801      	cmp	r0, #1
 80060fc:	f000 8089 	beq.w	8006212 <__ssvfiscanf_r+0x28a>
 8006100:	2802      	cmp	r0, #2
 8006102:	f47f af71 	bne.w	8005fe8 <__ssvfiscanf_r+0x60>
 8006106:	e01d      	b.n	8006144 <__ssvfiscanf_r+0x1bc>
 8006108:	2b75      	cmp	r3, #117	; 0x75
 800610a:	d0d1      	beq.n	80060b0 <__ssvfiscanf_r+0x128>
 800610c:	2b78      	cmp	r3, #120	; 0x78
 800610e:	d0c0      	beq.n	8006092 <__ssvfiscanf_r+0x10a>
 8006110:	2b73      	cmp	r3, #115	; 0x73
 8006112:	d1af      	bne.n	8006074 <__ssvfiscanf_r+0xec>
 8006114:	2302      	movs	r3, #2
 8006116:	e7d8      	b.n	80060ca <__ssvfiscanf_r+0x142>
 8006118:	6863      	ldr	r3, [r4, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	dd0c      	ble.n	8006138 <__ssvfiscanf_r+0x1b0>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	781a      	ldrb	r2, [r3, #0]
 8006122:	455a      	cmp	r2, fp
 8006124:	d175      	bne.n	8006212 <__ssvfiscanf_r+0x28a>
 8006126:	3301      	adds	r3, #1
 8006128:	6862      	ldr	r2, [r4, #4]
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800612e:	3a01      	subs	r2, #1
 8006130:	3301      	adds	r3, #1
 8006132:	6062      	str	r2, [r4, #4]
 8006134:	9345      	str	r3, [sp, #276]	; 0x114
 8006136:	e757      	b.n	8005fe8 <__ssvfiscanf_r+0x60>
 8006138:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800613a:	4621      	mov	r1, r4
 800613c:	4630      	mov	r0, r6
 800613e:	4798      	blx	r3
 8006140:	2800      	cmp	r0, #0
 8006142:	d0ec      	beq.n	800611e <__ssvfiscanf_r+0x196>
 8006144:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006146:	2800      	cmp	r0, #0
 8006148:	d159      	bne.n	80061fe <__ssvfiscanf_r+0x276>
 800614a:	f04f 30ff 	mov.w	r0, #4294967295
 800614e:	e05c      	b.n	800620a <__ssvfiscanf_r+0x282>
 8006150:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006152:	f042 0220 	orr.w	r2, r2, #32
 8006156:	9241      	str	r2, [sp, #260]	; 0x104
 8006158:	e79b      	b.n	8006092 <__ssvfiscanf_r+0x10a>
 800615a:	2308      	movs	r3, #8
 800615c:	9342      	str	r3, [sp, #264]	; 0x108
 800615e:	2304      	movs	r3, #4
 8006160:	e7b3      	b.n	80060ca <__ssvfiscanf_r+0x142>
 8006162:	4629      	mov	r1, r5
 8006164:	4640      	mov	r0, r8
 8006166:	f000 fb61 	bl	800682c <__sccl>
 800616a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800616c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006170:	9341      	str	r3, [sp, #260]	; 0x104
 8006172:	4605      	mov	r5, r0
 8006174:	2301      	movs	r3, #1
 8006176:	e7a8      	b.n	80060ca <__ssvfiscanf_r+0x142>
 8006178:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800617a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800617e:	9341      	str	r3, [sp, #260]	; 0x104
 8006180:	2300      	movs	r3, #0
 8006182:	e7a2      	b.n	80060ca <__ssvfiscanf_r+0x142>
 8006184:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006186:	06c3      	lsls	r3, r0, #27
 8006188:	f53f af2e 	bmi.w	8005fe8 <__ssvfiscanf_r+0x60>
 800618c:	9b00      	ldr	r3, [sp, #0]
 800618e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006190:	1d19      	adds	r1, r3, #4
 8006192:	9100      	str	r1, [sp, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	07c0      	lsls	r0, r0, #31
 8006198:	bf4c      	ite	mi
 800619a:	801a      	strhmi	r2, [r3, #0]
 800619c:	601a      	strpl	r2, [r3, #0]
 800619e:	e723      	b.n	8005fe8 <__ssvfiscanf_r+0x60>
 80061a0:	2305      	movs	r3, #5
 80061a2:	e792      	b.n	80060ca <__ssvfiscanf_r+0x142>
 80061a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80061a6:	4621      	mov	r1, r4
 80061a8:	4630      	mov	r0, r6
 80061aa:	4798      	blx	r3
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d090      	beq.n	80060d2 <__ssvfiscanf_r+0x14a>
 80061b0:	e7c8      	b.n	8006144 <__ssvfiscanf_r+0x1bc>
 80061b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80061b4:	3201      	adds	r2, #1
 80061b6:	9245      	str	r2, [sp, #276]	; 0x114
 80061b8:	6862      	ldr	r2, [r4, #4]
 80061ba:	3a01      	subs	r2, #1
 80061bc:	2a00      	cmp	r2, #0
 80061be:	6062      	str	r2, [r4, #4]
 80061c0:	dd02      	ble.n	80061c8 <__ssvfiscanf_r+0x240>
 80061c2:	3301      	adds	r3, #1
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	e787      	b.n	80060d8 <__ssvfiscanf_r+0x150>
 80061c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80061ca:	4621      	mov	r1, r4
 80061cc:	4630      	mov	r0, r6
 80061ce:	4798      	blx	r3
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d081      	beq.n	80060d8 <__ssvfiscanf_r+0x150>
 80061d4:	e7b6      	b.n	8006144 <__ssvfiscanf_r+0x1bc>
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	dc06      	bgt.n	80061e8 <__ssvfiscanf_r+0x260>
 80061da:	466b      	mov	r3, sp
 80061dc:	4622      	mov	r2, r4
 80061de:	a941      	add	r1, sp, #260	; 0x104
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 fa0d 	bl	8006600 <_scanf_i>
 80061e6:	e788      	b.n	80060fa <__ssvfiscanf_r+0x172>
 80061e8:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <__ssvfiscanf_r+0x29c>)
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f43f aefc 	beq.w	8005fe8 <__ssvfiscanf_r+0x60>
 80061f0:	466b      	mov	r3, sp
 80061f2:	4622      	mov	r2, r4
 80061f4:	a941      	add	r1, sp, #260	; 0x104
 80061f6:	4630      	mov	r0, r6
 80061f8:	f3af 8000 	nop.w
 80061fc:	e77d      	b.n	80060fa <__ssvfiscanf_r+0x172>
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006204:	bf18      	it	ne
 8006206:	f04f 30ff 	movne.w	r0, #4294967295
 800620a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800620e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006212:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006214:	e7f9      	b.n	800620a <__ssvfiscanf_r+0x282>
 8006216:	bf00      	nop
 8006218:	08005ed5 	.word	0x08005ed5
 800621c:	08005f4f 	.word	0x08005f4f
 8006220:	08006f8e 	.word	0x08006f8e
 8006224:	00000000 	.word	0x00000000

08006228 <_printf_common>:
 8006228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800622c:	4691      	mov	r9, r2
 800622e:	461f      	mov	r7, r3
 8006230:	688a      	ldr	r2, [r1, #8]
 8006232:	690b      	ldr	r3, [r1, #16]
 8006234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006238:	4293      	cmp	r3, r2
 800623a:	bfb8      	it	lt
 800623c:	4613      	movlt	r3, r2
 800623e:	f8c9 3000 	str.w	r3, [r9]
 8006242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006246:	4606      	mov	r6, r0
 8006248:	460c      	mov	r4, r1
 800624a:	b112      	cbz	r2, 8006252 <_printf_common+0x2a>
 800624c:	3301      	adds	r3, #1
 800624e:	f8c9 3000 	str.w	r3, [r9]
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	0699      	lsls	r1, r3, #26
 8006256:	bf42      	ittt	mi
 8006258:	f8d9 3000 	ldrmi.w	r3, [r9]
 800625c:	3302      	addmi	r3, #2
 800625e:	f8c9 3000 	strmi.w	r3, [r9]
 8006262:	6825      	ldr	r5, [r4, #0]
 8006264:	f015 0506 	ands.w	r5, r5, #6
 8006268:	d107      	bne.n	800627a <_printf_common+0x52>
 800626a:	f104 0a19 	add.w	sl, r4, #25
 800626e:	68e3      	ldr	r3, [r4, #12]
 8006270:	f8d9 2000 	ldr.w	r2, [r9]
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	42ab      	cmp	r3, r5
 8006278:	dc28      	bgt.n	80062cc <_printf_common+0xa4>
 800627a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	3300      	adds	r3, #0
 8006282:	bf18      	it	ne
 8006284:	2301      	movne	r3, #1
 8006286:	0692      	lsls	r2, r2, #26
 8006288:	d42d      	bmi.n	80062e6 <_printf_common+0xbe>
 800628a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800628e:	4639      	mov	r1, r7
 8006290:	4630      	mov	r0, r6
 8006292:	47c0      	blx	r8
 8006294:	3001      	adds	r0, #1
 8006296:	d020      	beq.n	80062da <_printf_common+0xb2>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	68e5      	ldr	r5, [r4, #12]
 800629c:	f8d9 2000 	ldr.w	r2, [r9]
 80062a0:	f003 0306 	and.w	r3, r3, #6
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	bf08      	it	eq
 80062a8:	1aad      	subeq	r5, r5, r2
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	6922      	ldr	r2, [r4, #16]
 80062ae:	bf0c      	ite	eq
 80062b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b4:	2500      	movne	r5, #0
 80062b6:	4293      	cmp	r3, r2
 80062b8:	bfc4      	itt	gt
 80062ba:	1a9b      	subgt	r3, r3, r2
 80062bc:	18ed      	addgt	r5, r5, r3
 80062be:	f04f 0900 	mov.w	r9, #0
 80062c2:	341a      	adds	r4, #26
 80062c4:	454d      	cmp	r5, r9
 80062c6:	d11a      	bne.n	80062fe <_printf_common+0xd6>
 80062c8:	2000      	movs	r0, #0
 80062ca:	e008      	b.n	80062de <_printf_common+0xb6>
 80062cc:	2301      	movs	r3, #1
 80062ce:	4652      	mov	r2, sl
 80062d0:	4639      	mov	r1, r7
 80062d2:	4630      	mov	r0, r6
 80062d4:	47c0      	blx	r8
 80062d6:	3001      	adds	r0, #1
 80062d8:	d103      	bne.n	80062e2 <_printf_common+0xba>
 80062da:	f04f 30ff 	mov.w	r0, #4294967295
 80062de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e2:	3501      	adds	r5, #1
 80062e4:	e7c3      	b.n	800626e <_printf_common+0x46>
 80062e6:	18e1      	adds	r1, r4, r3
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	2030      	movs	r0, #48	; 0x30
 80062ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062f0:	4422      	add	r2, r4
 80062f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062fa:	3302      	adds	r3, #2
 80062fc:	e7c5      	b.n	800628a <_printf_common+0x62>
 80062fe:	2301      	movs	r3, #1
 8006300:	4622      	mov	r2, r4
 8006302:	4639      	mov	r1, r7
 8006304:	4630      	mov	r0, r6
 8006306:	47c0      	blx	r8
 8006308:	3001      	adds	r0, #1
 800630a:	d0e6      	beq.n	80062da <_printf_common+0xb2>
 800630c:	f109 0901 	add.w	r9, r9, #1
 8006310:	e7d8      	b.n	80062c4 <_printf_common+0x9c>
	...

08006314 <_printf_i>:
 8006314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006318:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800631c:	460c      	mov	r4, r1
 800631e:	7e09      	ldrb	r1, [r1, #24]
 8006320:	b085      	sub	sp, #20
 8006322:	296e      	cmp	r1, #110	; 0x6e
 8006324:	4617      	mov	r7, r2
 8006326:	4606      	mov	r6, r0
 8006328:	4698      	mov	r8, r3
 800632a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800632c:	f000 80b3 	beq.w	8006496 <_printf_i+0x182>
 8006330:	d822      	bhi.n	8006378 <_printf_i+0x64>
 8006332:	2963      	cmp	r1, #99	; 0x63
 8006334:	d036      	beq.n	80063a4 <_printf_i+0x90>
 8006336:	d80a      	bhi.n	800634e <_printf_i+0x3a>
 8006338:	2900      	cmp	r1, #0
 800633a:	f000 80b9 	beq.w	80064b0 <_printf_i+0x19c>
 800633e:	2958      	cmp	r1, #88	; 0x58
 8006340:	f000 8083 	beq.w	800644a <_printf_i+0x136>
 8006344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006348:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800634c:	e032      	b.n	80063b4 <_printf_i+0xa0>
 800634e:	2964      	cmp	r1, #100	; 0x64
 8006350:	d001      	beq.n	8006356 <_printf_i+0x42>
 8006352:	2969      	cmp	r1, #105	; 0x69
 8006354:	d1f6      	bne.n	8006344 <_printf_i+0x30>
 8006356:	6820      	ldr	r0, [r4, #0]
 8006358:	6813      	ldr	r3, [r2, #0]
 800635a:	0605      	lsls	r5, r0, #24
 800635c:	f103 0104 	add.w	r1, r3, #4
 8006360:	d52a      	bpl.n	80063b8 <_printf_i+0xa4>
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6011      	str	r1, [r2, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	da03      	bge.n	8006372 <_printf_i+0x5e>
 800636a:	222d      	movs	r2, #45	; 0x2d
 800636c:	425b      	negs	r3, r3
 800636e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006372:	486f      	ldr	r0, [pc, #444]	; (8006530 <_printf_i+0x21c>)
 8006374:	220a      	movs	r2, #10
 8006376:	e039      	b.n	80063ec <_printf_i+0xd8>
 8006378:	2973      	cmp	r1, #115	; 0x73
 800637a:	f000 809d 	beq.w	80064b8 <_printf_i+0x1a4>
 800637e:	d808      	bhi.n	8006392 <_printf_i+0x7e>
 8006380:	296f      	cmp	r1, #111	; 0x6f
 8006382:	d020      	beq.n	80063c6 <_printf_i+0xb2>
 8006384:	2970      	cmp	r1, #112	; 0x70
 8006386:	d1dd      	bne.n	8006344 <_printf_i+0x30>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	f043 0320 	orr.w	r3, r3, #32
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	e003      	b.n	800639a <_printf_i+0x86>
 8006392:	2975      	cmp	r1, #117	; 0x75
 8006394:	d017      	beq.n	80063c6 <_printf_i+0xb2>
 8006396:	2978      	cmp	r1, #120	; 0x78
 8006398:	d1d4      	bne.n	8006344 <_printf_i+0x30>
 800639a:	2378      	movs	r3, #120	; 0x78
 800639c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063a0:	4864      	ldr	r0, [pc, #400]	; (8006534 <_printf_i+0x220>)
 80063a2:	e055      	b.n	8006450 <_printf_i+0x13c>
 80063a4:	6813      	ldr	r3, [r2, #0]
 80063a6:	1d19      	adds	r1, r3, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6011      	str	r1, [r2, #0]
 80063ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b4:	2301      	movs	r3, #1
 80063b6:	e08c      	b.n	80064d2 <_printf_i+0x1be>
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6011      	str	r1, [r2, #0]
 80063bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063c0:	bf18      	it	ne
 80063c2:	b21b      	sxthne	r3, r3
 80063c4:	e7cf      	b.n	8006366 <_printf_i+0x52>
 80063c6:	6813      	ldr	r3, [r2, #0]
 80063c8:	6825      	ldr	r5, [r4, #0]
 80063ca:	1d18      	adds	r0, r3, #4
 80063cc:	6010      	str	r0, [r2, #0]
 80063ce:	0628      	lsls	r0, r5, #24
 80063d0:	d501      	bpl.n	80063d6 <_printf_i+0xc2>
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	e002      	b.n	80063dc <_printf_i+0xc8>
 80063d6:	0668      	lsls	r0, r5, #25
 80063d8:	d5fb      	bpl.n	80063d2 <_printf_i+0xbe>
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	4854      	ldr	r0, [pc, #336]	; (8006530 <_printf_i+0x21c>)
 80063de:	296f      	cmp	r1, #111	; 0x6f
 80063e0:	bf14      	ite	ne
 80063e2:	220a      	movne	r2, #10
 80063e4:	2208      	moveq	r2, #8
 80063e6:	2100      	movs	r1, #0
 80063e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063ec:	6865      	ldr	r5, [r4, #4]
 80063ee:	60a5      	str	r5, [r4, #8]
 80063f0:	2d00      	cmp	r5, #0
 80063f2:	f2c0 8095 	blt.w	8006520 <_printf_i+0x20c>
 80063f6:	6821      	ldr	r1, [r4, #0]
 80063f8:	f021 0104 	bic.w	r1, r1, #4
 80063fc:	6021      	str	r1, [r4, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d13d      	bne.n	800647e <_printf_i+0x16a>
 8006402:	2d00      	cmp	r5, #0
 8006404:	f040 808e 	bne.w	8006524 <_printf_i+0x210>
 8006408:	4665      	mov	r5, ip
 800640a:	2a08      	cmp	r2, #8
 800640c:	d10b      	bne.n	8006426 <_printf_i+0x112>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	07db      	lsls	r3, r3, #31
 8006412:	d508      	bpl.n	8006426 <_printf_i+0x112>
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	6862      	ldr	r2, [r4, #4]
 8006418:	429a      	cmp	r2, r3
 800641a:	bfde      	ittt	le
 800641c:	2330      	movle	r3, #48	; 0x30
 800641e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006422:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006426:	ebac 0305 	sub.w	r3, ip, r5
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	f8cd 8000 	str.w	r8, [sp]
 8006430:	463b      	mov	r3, r7
 8006432:	aa03      	add	r2, sp, #12
 8006434:	4621      	mov	r1, r4
 8006436:	4630      	mov	r0, r6
 8006438:	f7ff fef6 	bl	8006228 <_printf_common>
 800643c:	3001      	adds	r0, #1
 800643e:	d14d      	bne.n	80064dc <_printf_i+0x1c8>
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	b005      	add	sp, #20
 8006446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800644a:	4839      	ldr	r0, [pc, #228]	; (8006530 <_printf_i+0x21c>)
 800644c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006450:	6813      	ldr	r3, [r2, #0]
 8006452:	6821      	ldr	r1, [r4, #0]
 8006454:	1d1d      	adds	r5, r3, #4
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6015      	str	r5, [r2, #0]
 800645a:	060a      	lsls	r2, r1, #24
 800645c:	d50b      	bpl.n	8006476 <_printf_i+0x162>
 800645e:	07ca      	lsls	r2, r1, #31
 8006460:	bf44      	itt	mi
 8006462:	f041 0120 	orrmi.w	r1, r1, #32
 8006466:	6021      	strmi	r1, [r4, #0]
 8006468:	b91b      	cbnz	r3, 8006472 <_printf_i+0x15e>
 800646a:	6822      	ldr	r2, [r4, #0]
 800646c:	f022 0220 	bic.w	r2, r2, #32
 8006470:	6022      	str	r2, [r4, #0]
 8006472:	2210      	movs	r2, #16
 8006474:	e7b7      	b.n	80063e6 <_printf_i+0xd2>
 8006476:	064d      	lsls	r5, r1, #25
 8006478:	bf48      	it	mi
 800647a:	b29b      	uxthmi	r3, r3
 800647c:	e7ef      	b.n	800645e <_printf_i+0x14a>
 800647e:	4665      	mov	r5, ip
 8006480:	fbb3 f1f2 	udiv	r1, r3, r2
 8006484:	fb02 3311 	mls	r3, r2, r1, r3
 8006488:	5cc3      	ldrb	r3, [r0, r3]
 800648a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800648e:	460b      	mov	r3, r1
 8006490:	2900      	cmp	r1, #0
 8006492:	d1f5      	bne.n	8006480 <_printf_i+0x16c>
 8006494:	e7b9      	b.n	800640a <_printf_i+0xf6>
 8006496:	6813      	ldr	r3, [r2, #0]
 8006498:	6825      	ldr	r5, [r4, #0]
 800649a:	6961      	ldr	r1, [r4, #20]
 800649c:	1d18      	adds	r0, r3, #4
 800649e:	6010      	str	r0, [r2, #0]
 80064a0:	0628      	lsls	r0, r5, #24
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	d501      	bpl.n	80064aa <_printf_i+0x196>
 80064a6:	6019      	str	r1, [r3, #0]
 80064a8:	e002      	b.n	80064b0 <_printf_i+0x19c>
 80064aa:	066a      	lsls	r2, r5, #25
 80064ac:	d5fb      	bpl.n	80064a6 <_printf_i+0x192>
 80064ae:	8019      	strh	r1, [r3, #0]
 80064b0:	2300      	movs	r3, #0
 80064b2:	6123      	str	r3, [r4, #16]
 80064b4:	4665      	mov	r5, ip
 80064b6:	e7b9      	b.n	800642c <_printf_i+0x118>
 80064b8:	6813      	ldr	r3, [r2, #0]
 80064ba:	1d19      	adds	r1, r3, #4
 80064bc:	6011      	str	r1, [r2, #0]
 80064be:	681d      	ldr	r5, [r3, #0]
 80064c0:	6862      	ldr	r2, [r4, #4]
 80064c2:	2100      	movs	r1, #0
 80064c4:	4628      	mov	r0, r5
 80064c6:	f7f9 fea3 	bl	8000210 <memchr>
 80064ca:	b108      	cbz	r0, 80064d0 <_printf_i+0x1bc>
 80064cc:	1b40      	subs	r0, r0, r5
 80064ce:	6060      	str	r0, [r4, #4]
 80064d0:	6863      	ldr	r3, [r4, #4]
 80064d2:	6123      	str	r3, [r4, #16]
 80064d4:	2300      	movs	r3, #0
 80064d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064da:	e7a7      	b.n	800642c <_printf_i+0x118>
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	462a      	mov	r2, r5
 80064e0:	4639      	mov	r1, r7
 80064e2:	4630      	mov	r0, r6
 80064e4:	47c0      	blx	r8
 80064e6:	3001      	adds	r0, #1
 80064e8:	d0aa      	beq.n	8006440 <_printf_i+0x12c>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	079b      	lsls	r3, r3, #30
 80064ee:	d413      	bmi.n	8006518 <_printf_i+0x204>
 80064f0:	68e0      	ldr	r0, [r4, #12]
 80064f2:	9b03      	ldr	r3, [sp, #12]
 80064f4:	4298      	cmp	r0, r3
 80064f6:	bfb8      	it	lt
 80064f8:	4618      	movlt	r0, r3
 80064fa:	e7a3      	b.n	8006444 <_printf_i+0x130>
 80064fc:	2301      	movs	r3, #1
 80064fe:	464a      	mov	r2, r9
 8006500:	4639      	mov	r1, r7
 8006502:	4630      	mov	r0, r6
 8006504:	47c0      	blx	r8
 8006506:	3001      	adds	r0, #1
 8006508:	d09a      	beq.n	8006440 <_printf_i+0x12c>
 800650a:	3501      	adds	r5, #1
 800650c:	68e3      	ldr	r3, [r4, #12]
 800650e:	9a03      	ldr	r2, [sp, #12]
 8006510:	1a9b      	subs	r3, r3, r2
 8006512:	42ab      	cmp	r3, r5
 8006514:	dcf2      	bgt.n	80064fc <_printf_i+0x1e8>
 8006516:	e7eb      	b.n	80064f0 <_printf_i+0x1dc>
 8006518:	2500      	movs	r5, #0
 800651a:	f104 0919 	add.w	r9, r4, #25
 800651e:	e7f5      	b.n	800650c <_printf_i+0x1f8>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1ac      	bne.n	800647e <_printf_i+0x16a>
 8006524:	7803      	ldrb	r3, [r0, #0]
 8006526:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800652a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800652e:	e76c      	b.n	800640a <_printf_i+0xf6>
 8006530:	08006f99 	.word	0x08006f99
 8006534:	08006faa 	.word	0x08006faa

08006538 <_scanf_chars>:
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	4615      	mov	r5, r2
 800653e:	688a      	ldr	r2, [r1, #8]
 8006540:	4680      	mov	r8, r0
 8006542:	460c      	mov	r4, r1
 8006544:	b932      	cbnz	r2, 8006554 <_scanf_chars+0x1c>
 8006546:	698a      	ldr	r2, [r1, #24]
 8006548:	2a00      	cmp	r2, #0
 800654a:	bf14      	ite	ne
 800654c:	f04f 32ff 	movne.w	r2, #4294967295
 8006550:	2201      	moveq	r2, #1
 8006552:	608a      	str	r2, [r1, #8]
 8006554:	6822      	ldr	r2, [r4, #0]
 8006556:	06d1      	lsls	r1, r2, #27
 8006558:	bf5f      	itttt	pl
 800655a:	681a      	ldrpl	r2, [r3, #0]
 800655c:	1d11      	addpl	r1, r2, #4
 800655e:	6019      	strpl	r1, [r3, #0]
 8006560:	6817      	ldrpl	r7, [r2, #0]
 8006562:	2600      	movs	r6, #0
 8006564:	69a3      	ldr	r3, [r4, #24]
 8006566:	b1db      	cbz	r3, 80065a0 <_scanf_chars+0x68>
 8006568:	2b01      	cmp	r3, #1
 800656a:	d107      	bne.n	800657c <_scanf_chars+0x44>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	6962      	ldr	r2, [r4, #20]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	5cd3      	ldrb	r3, [r2, r3]
 8006574:	b9a3      	cbnz	r3, 80065a0 <_scanf_chars+0x68>
 8006576:	2e00      	cmp	r6, #0
 8006578:	d132      	bne.n	80065e0 <_scanf_chars+0xa8>
 800657a:	e006      	b.n	800658a <_scanf_chars+0x52>
 800657c:	2b02      	cmp	r3, #2
 800657e:	d007      	beq.n	8006590 <_scanf_chars+0x58>
 8006580:	2e00      	cmp	r6, #0
 8006582:	d12d      	bne.n	80065e0 <_scanf_chars+0xa8>
 8006584:	69a3      	ldr	r3, [r4, #24]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d12a      	bne.n	80065e0 <_scanf_chars+0xa8>
 800658a:	2001      	movs	r0, #1
 800658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006590:	f000 faf8 	bl	8006b84 <__locale_ctype_ptr>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	4418      	add	r0, r3
 800659a:	7843      	ldrb	r3, [r0, #1]
 800659c:	071b      	lsls	r3, r3, #28
 800659e:	d4ef      	bmi.n	8006580 <_scanf_chars+0x48>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	06da      	lsls	r2, r3, #27
 80065a4:	bf5e      	ittt	pl
 80065a6:	682b      	ldrpl	r3, [r5, #0]
 80065a8:	781b      	ldrbpl	r3, [r3, #0]
 80065aa:	703b      	strbpl	r3, [r7, #0]
 80065ac:	682a      	ldr	r2, [r5, #0]
 80065ae:	686b      	ldr	r3, [r5, #4]
 80065b0:	f102 0201 	add.w	r2, r2, #1
 80065b4:	602a      	str	r2, [r5, #0]
 80065b6:	68a2      	ldr	r2, [r4, #8]
 80065b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80065bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80065c0:	606b      	str	r3, [r5, #4]
 80065c2:	f106 0601 	add.w	r6, r6, #1
 80065c6:	bf58      	it	pl
 80065c8:	3701      	addpl	r7, #1
 80065ca:	60a2      	str	r2, [r4, #8]
 80065cc:	b142      	cbz	r2, 80065e0 <_scanf_chars+0xa8>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	dcc8      	bgt.n	8006564 <_scanf_chars+0x2c>
 80065d2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065d6:	4629      	mov	r1, r5
 80065d8:	4640      	mov	r0, r8
 80065da:	4798      	blx	r3
 80065dc:	2800      	cmp	r0, #0
 80065de:	d0c1      	beq.n	8006564 <_scanf_chars+0x2c>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	f013 0310 	ands.w	r3, r3, #16
 80065e6:	d105      	bne.n	80065f4 <_scanf_chars+0xbc>
 80065e8:	68e2      	ldr	r2, [r4, #12]
 80065ea:	3201      	adds	r2, #1
 80065ec:	60e2      	str	r2, [r4, #12]
 80065ee:	69a2      	ldr	r2, [r4, #24]
 80065f0:	b102      	cbz	r2, 80065f4 <_scanf_chars+0xbc>
 80065f2:	703b      	strb	r3, [r7, #0]
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	441e      	add	r6, r3
 80065f8:	6126      	str	r6, [r4, #16]
 80065fa:	2000      	movs	r0, #0
 80065fc:	e7c6      	b.n	800658c <_scanf_chars+0x54>
	...

08006600 <_scanf_i>:
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	469a      	mov	sl, r3
 8006606:	4b74      	ldr	r3, [pc, #464]	; (80067d8 <_scanf_i+0x1d8>)
 8006608:	460c      	mov	r4, r1
 800660a:	4683      	mov	fp, r0
 800660c:	4616      	mov	r6, r2
 800660e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006612:	b087      	sub	sp, #28
 8006614:	ab03      	add	r3, sp, #12
 8006616:	68a7      	ldr	r7, [r4, #8]
 8006618:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800661c:	4b6f      	ldr	r3, [pc, #444]	; (80067dc <_scanf_i+0x1dc>)
 800661e:	69a1      	ldr	r1, [r4, #24]
 8006620:	4a6f      	ldr	r2, [pc, #444]	; (80067e0 <_scanf_i+0x1e0>)
 8006622:	2903      	cmp	r1, #3
 8006624:	bf08      	it	eq
 8006626:	461a      	moveq	r2, r3
 8006628:	1e7b      	subs	r3, r7, #1
 800662a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800662e:	bf84      	itt	hi
 8006630:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006634:	60a3      	strhi	r3, [r4, #8]
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	9200      	str	r2, [sp, #0]
 800663a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800663e:	bf88      	it	hi
 8006640:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006644:	f104 091c 	add.w	r9, r4, #28
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	bf8c      	ite	hi
 800664c:	197f      	addhi	r7, r7, r5
 800664e:	2700      	movls	r7, #0
 8006650:	464b      	mov	r3, r9
 8006652:	f04f 0800 	mov.w	r8, #0
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	6831      	ldr	r1, [r6, #0]
 800665a:	ab03      	add	r3, sp, #12
 800665c:	2202      	movs	r2, #2
 800665e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006662:	7809      	ldrb	r1, [r1, #0]
 8006664:	f7f9 fdd4 	bl	8000210 <memchr>
 8006668:	9b01      	ldr	r3, [sp, #4]
 800666a:	b330      	cbz	r0, 80066ba <_scanf_i+0xba>
 800666c:	f1b8 0f01 	cmp.w	r8, #1
 8006670:	d15a      	bne.n	8006728 <_scanf_i+0x128>
 8006672:	6862      	ldr	r2, [r4, #4]
 8006674:	b92a      	cbnz	r2, 8006682 <_scanf_i+0x82>
 8006676:	6822      	ldr	r2, [r4, #0]
 8006678:	2108      	movs	r1, #8
 800667a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800667e:	6061      	str	r1, [r4, #4]
 8006680:	6022      	str	r2, [r4, #0]
 8006682:	6822      	ldr	r2, [r4, #0]
 8006684:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006688:	6022      	str	r2, [r4, #0]
 800668a:	68a2      	ldr	r2, [r4, #8]
 800668c:	1e51      	subs	r1, r2, #1
 800668e:	60a1      	str	r1, [r4, #8]
 8006690:	b19a      	cbz	r2, 80066ba <_scanf_i+0xba>
 8006692:	6832      	ldr	r2, [r6, #0]
 8006694:	1c51      	adds	r1, r2, #1
 8006696:	6031      	str	r1, [r6, #0]
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	1c5d      	adds	r5, r3, #1
 800669e:	6873      	ldr	r3, [r6, #4]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	6073      	str	r3, [r6, #4]
 80066a6:	dc07      	bgt.n	80066b8 <_scanf_i+0xb8>
 80066a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80066ac:	4631      	mov	r1, r6
 80066ae:	4658      	mov	r0, fp
 80066b0:	4798      	blx	r3
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f040 8086 	bne.w	80067c4 <_scanf_i+0x1c4>
 80066b8:	462b      	mov	r3, r5
 80066ba:	f108 0801 	add.w	r8, r8, #1
 80066be:	f1b8 0f03 	cmp.w	r8, #3
 80066c2:	d1c8      	bne.n	8006656 <_scanf_i+0x56>
 80066c4:	6862      	ldr	r2, [r4, #4]
 80066c6:	b90a      	cbnz	r2, 80066cc <_scanf_i+0xcc>
 80066c8:	220a      	movs	r2, #10
 80066ca:	6062      	str	r2, [r4, #4]
 80066cc:	6862      	ldr	r2, [r4, #4]
 80066ce:	4945      	ldr	r1, [pc, #276]	; (80067e4 <_scanf_i+0x1e4>)
 80066d0:	6960      	ldr	r0, [r4, #20]
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	1a89      	subs	r1, r1, r2
 80066d6:	f000 f8a9 	bl	800682c <__sccl>
 80066da:	9b01      	ldr	r3, [sp, #4]
 80066dc:	f04f 0800 	mov.w	r8, #0
 80066e0:	461d      	mov	r5, r3
 80066e2:	68a3      	ldr	r3, [r4, #8]
 80066e4:	6822      	ldr	r2, [r4, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d03a      	beq.n	8006760 <_scanf_i+0x160>
 80066ea:	6831      	ldr	r1, [r6, #0]
 80066ec:	6960      	ldr	r0, [r4, #20]
 80066ee:	f891 c000 	ldrb.w	ip, [r1]
 80066f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d032      	beq.n	8006760 <_scanf_i+0x160>
 80066fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80066fe:	d121      	bne.n	8006744 <_scanf_i+0x144>
 8006700:	0510      	lsls	r0, r2, #20
 8006702:	d51f      	bpl.n	8006744 <_scanf_i+0x144>
 8006704:	f108 0801 	add.w	r8, r8, #1
 8006708:	b117      	cbz	r7, 8006710 <_scanf_i+0x110>
 800670a:	3301      	adds	r3, #1
 800670c:	3f01      	subs	r7, #1
 800670e:	60a3      	str	r3, [r4, #8]
 8006710:	6873      	ldr	r3, [r6, #4]
 8006712:	3b01      	subs	r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	6073      	str	r3, [r6, #4]
 8006718:	dd1b      	ble.n	8006752 <_scanf_i+0x152>
 800671a:	6833      	ldr	r3, [r6, #0]
 800671c:	3301      	adds	r3, #1
 800671e:	6033      	str	r3, [r6, #0]
 8006720:	68a3      	ldr	r3, [r4, #8]
 8006722:	3b01      	subs	r3, #1
 8006724:	60a3      	str	r3, [r4, #8]
 8006726:	e7dc      	b.n	80066e2 <_scanf_i+0xe2>
 8006728:	f1b8 0f02 	cmp.w	r8, #2
 800672c:	d1ad      	bne.n	800668a <_scanf_i+0x8a>
 800672e:	6822      	ldr	r2, [r4, #0]
 8006730:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006734:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006738:	d1bf      	bne.n	80066ba <_scanf_i+0xba>
 800673a:	2110      	movs	r1, #16
 800673c:	6061      	str	r1, [r4, #4]
 800673e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006742:	e7a1      	b.n	8006688 <_scanf_i+0x88>
 8006744:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006748:	6022      	str	r2, [r4, #0]
 800674a:	780b      	ldrb	r3, [r1, #0]
 800674c:	702b      	strb	r3, [r5, #0]
 800674e:	3501      	adds	r5, #1
 8006750:	e7de      	b.n	8006710 <_scanf_i+0x110>
 8006752:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006756:	4631      	mov	r1, r6
 8006758:	4658      	mov	r0, fp
 800675a:	4798      	blx	r3
 800675c:	2800      	cmp	r0, #0
 800675e:	d0df      	beq.n	8006720 <_scanf_i+0x120>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	05d9      	lsls	r1, r3, #23
 8006764:	d50c      	bpl.n	8006780 <_scanf_i+0x180>
 8006766:	454d      	cmp	r5, r9
 8006768:	d908      	bls.n	800677c <_scanf_i+0x17c>
 800676a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800676e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006772:	4632      	mov	r2, r6
 8006774:	4658      	mov	r0, fp
 8006776:	4798      	blx	r3
 8006778:	1e6f      	subs	r7, r5, #1
 800677a:	463d      	mov	r5, r7
 800677c:	454d      	cmp	r5, r9
 800677e:	d029      	beq.n	80067d4 <_scanf_i+0x1d4>
 8006780:	6822      	ldr	r2, [r4, #0]
 8006782:	f012 0210 	ands.w	r2, r2, #16
 8006786:	d113      	bne.n	80067b0 <_scanf_i+0x1b0>
 8006788:	702a      	strb	r2, [r5, #0]
 800678a:	6863      	ldr	r3, [r4, #4]
 800678c:	9e00      	ldr	r6, [sp, #0]
 800678e:	4649      	mov	r1, r9
 8006790:	4658      	mov	r0, fp
 8006792:	47b0      	blx	r6
 8006794:	f8da 3000 	ldr.w	r3, [sl]
 8006798:	6821      	ldr	r1, [r4, #0]
 800679a:	1d1a      	adds	r2, r3, #4
 800679c:	f8ca 2000 	str.w	r2, [sl]
 80067a0:	f011 0f20 	tst.w	r1, #32
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	d010      	beq.n	80067ca <_scanf_i+0x1ca>
 80067a8:	6018      	str	r0, [r3, #0]
 80067aa:	68e3      	ldr	r3, [r4, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60e3      	str	r3, [r4, #12]
 80067b0:	eba5 0509 	sub.w	r5, r5, r9
 80067b4:	44a8      	add	r8, r5
 80067b6:	6925      	ldr	r5, [r4, #16]
 80067b8:	4445      	add	r5, r8
 80067ba:	6125      	str	r5, [r4, #16]
 80067bc:	2000      	movs	r0, #0
 80067be:	b007      	add	sp, #28
 80067c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c4:	f04f 0800 	mov.w	r8, #0
 80067c8:	e7ca      	b.n	8006760 <_scanf_i+0x160>
 80067ca:	07ca      	lsls	r2, r1, #31
 80067cc:	bf4c      	ite	mi
 80067ce:	8018      	strhmi	r0, [r3, #0]
 80067d0:	6018      	strpl	r0, [r3, #0]
 80067d2:	e7ea      	b.n	80067aa <_scanf_i+0x1aa>
 80067d4:	2001      	movs	r0, #1
 80067d6:	e7f2      	b.n	80067be <_scanf_i+0x1be>
 80067d8:	08006ee0 	.word	0x08006ee0
 80067dc:	08006989 	.word	0x08006989
 80067e0:	08006aa1 	.word	0x08006aa1
 80067e4:	08006fcb 	.word	0x08006fcb

080067e8 <_read_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4c07      	ldr	r4, [pc, #28]	; (8006808 <_read_r+0x20>)
 80067ec:	4605      	mov	r5, r0
 80067ee:	4608      	mov	r0, r1
 80067f0:	4611      	mov	r1, r2
 80067f2:	2200      	movs	r2, #0
 80067f4:	6022      	str	r2, [r4, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f7fa fcb5 	bl	8001166 <_read>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_read_r+0x1e>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	b103      	cbz	r3, 8006806 <_read_r+0x1e>
 8006804:	602b      	str	r3, [r5, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	20000484 	.word	0x20000484

0800680c <_sbrk_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4c06      	ldr	r4, [pc, #24]	; (8006828 <_sbrk_r+0x1c>)
 8006810:	2300      	movs	r3, #0
 8006812:	4605      	mov	r5, r0
 8006814:	4608      	mov	r0, r1
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	f7fa fd12 	bl	8001240 <_sbrk>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d102      	bne.n	8006826 <_sbrk_r+0x1a>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	b103      	cbz	r3, 8006826 <_sbrk_r+0x1a>
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	bd38      	pop	{r3, r4, r5, pc}
 8006828:	20000484 	.word	0x20000484

0800682c <__sccl>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	780b      	ldrb	r3, [r1, #0]
 8006830:	2b5e      	cmp	r3, #94	; 0x5e
 8006832:	bf13      	iteet	ne
 8006834:	1c4a      	addne	r2, r1, #1
 8006836:	1c8a      	addeq	r2, r1, #2
 8006838:	784b      	ldrbeq	r3, [r1, #1]
 800683a:	2100      	movne	r1, #0
 800683c:	bf08      	it	eq
 800683e:	2101      	moveq	r1, #1
 8006840:	1e44      	subs	r4, r0, #1
 8006842:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006846:	f804 1f01 	strb.w	r1, [r4, #1]!
 800684a:	42ac      	cmp	r4, r5
 800684c:	d1fb      	bne.n	8006846 <__sccl+0x1a>
 800684e:	b913      	cbnz	r3, 8006856 <__sccl+0x2a>
 8006850:	3a01      	subs	r2, #1
 8006852:	4610      	mov	r0, r2
 8006854:	bd70      	pop	{r4, r5, r6, pc}
 8006856:	f081 0401 	eor.w	r4, r1, #1
 800685a:	54c4      	strb	r4, [r0, r3]
 800685c:	1c51      	adds	r1, r2, #1
 800685e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8006862:	2d2d      	cmp	r5, #45	; 0x2d
 8006864:	f101 36ff 	add.w	r6, r1, #4294967295
 8006868:	460a      	mov	r2, r1
 800686a:	d006      	beq.n	800687a <__sccl+0x4e>
 800686c:	2d5d      	cmp	r5, #93	; 0x5d
 800686e:	d0f0      	beq.n	8006852 <__sccl+0x26>
 8006870:	b90d      	cbnz	r5, 8006876 <__sccl+0x4a>
 8006872:	4632      	mov	r2, r6
 8006874:	e7ed      	b.n	8006852 <__sccl+0x26>
 8006876:	462b      	mov	r3, r5
 8006878:	e7ef      	b.n	800685a <__sccl+0x2e>
 800687a:	780e      	ldrb	r6, [r1, #0]
 800687c:	2e5d      	cmp	r6, #93	; 0x5d
 800687e:	d0fa      	beq.n	8006876 <__sccl+0x4a>
 8006880:	42b3      	cmp	r3, r6
 8006882:	dcf8      	bgt.n	8006876 <__sccl+0x4a>
 8006884:	3301      	adds	r3, #1
 8006886:	429e      	cmp	r6, r3
 8006888:	54c4      	strb	r4, [r0, r3]
 800688a:	dcfb      	bgt.n	8006884 <__sccl+0x58>
 800688c:	3102      	adds	r1, #2
 800688e:	e7e6      	b.n	800685e <__sccl+0x32>

08006890 <_strtol_l.isra.0>:
 8006890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	4680      	mov	r8, r0
 8006896:	4689      	mov	r9, r1
 8006898:	4692      	mov	sl, r2
 800689a:	461e      	mov	r6, r3
 800689c:	460f      	mov	r7, r1
 800689e:	463d      	mov	r5, r7
 80068a0:	9808      	ldr	r0, [sp, #32]
 80068a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068a6:	f000 f969 	bl	8006b7c <__locale_ctype_ptr_l>
 80068aa:	4420      	add	r0, r4
 80068ac:	7843      	ldrb	r3, [r0, #1]
 80068ae:	f013 0308 	ands.w	r3, r3, #8
 80068b2:	d132      	bne.n	800691a <_strtol_l.isra.0+0x8a>
 80068b4:	2c2d      	cmp	r4, #45	; 0x2d
 80068b6:	d132      	bne.n	800691e <_strtol_l.isra.0+0x8e>
 80068b8:	787c      	ldrb	r4, [r7, #1]
 80068ba:	1cbd      	adds	r5, r7, #2
 80068bc:	2201      	movs	r2, #1
 80068be:	2e00      	cmp	r6, #0
 80068c0:	d05d      	beq.n	800697e <_strtol_l.isra.0+0xee>
 80068c2:	2e10      	cmp	r6, #16
 80068c4:	d109      	bne.n	80068da <_strtol_l.isra.0+0x4a>
 80068c6:	2c30      	cmp	r4, #48	; 0x30
 80068c8:	d107      	bne.n	80068da <_strtol_l.isra.0+0x4a>
 80068ca:	782b      	ldrb	r3, [r5, #0]
 80068cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80068d0:	2b58      	cmp	r3, #88	; 0x58
 80068d2:	d14f      	bne.n	8006974 <_strtol_l.isra.0+0xe4>
 80068d4:	786c      	ldrb	r4, [r5, #1]
 80068d6:	2610      	movs	r6, #16
 80068d8:	3502      	adds	r5, #2
 80068da:	2a00      	cmp	r2, #0
 80068dc:	bf14      	ite	ne
 80068de:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80068e2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80068e6:	2700      	movs	r7, #0
 80068e8:	fbb1 fcf6 	udiv	ip, r1, r6
 80068ec:	4638      	mov	r0, r7
 80068ee:	fb06 1e1c 	mls	lr, r6, ip, r1
 80068f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80068f6:	2b09      	cmp	r3, #9
 80068f8:	d817      	bhi.n	800692a <_strtol_l.isra.0+0x9a>
 80068fa:	461c      	mov	r4, r3
 80068fc:	42a6      	cmp	r6, r4
 80068fe:	dd23      	ble.n	8006948 <_strtol_l.isra.0+0xb8>
 8006900:	1c7b      	adds	r3, r7, #1
 8006902:	d007      	beq.n	8006914 <_strtol_l.isra.0+0x84>
 8006904:	4584      	cmp	ip, r0
 8006906:	d31c      	bcc.n	8006942 <_strtol_l.isra.0+0xb2>
 8006908:	d101      	bne.n	800690e <_strtol_l.isra.0+0x7e>
 800690a:	45a6      	cmp	lr, r4
 800690c:	db19      	blt.n	8006942 <_strtol_l.isra.0+0xb2>
 800690e:	fb00 4006 	mla	r0, r0, r6, r4
 8006912:	2701      	movs	r7, #1
 8006914:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006918:	e7eb      	b.n	80068f2 <_strtol_l.isra.0+0x62>
 800691a:	462f      	mov	r7, r5
 800691c:	e7bf      	b.n	800689e <_strtol_l.isra.0+0xe>
 800691e:	2c2b      	cmp	r4, #43	; 0x2b
 8006920:	bf04      	itt	eq
 8006922:	1cbd      	addeq	r5, r7, #2
 8006924:	787c      	ldrbeq	r4, [r7, #1]
 8006926:	461a      	mov	r2, r3
 8006928:	e7c9      	b.n	80068be <_strtol_l.isra.0+0x2e>
 800692a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800692e:	2b19      	cmp	r3, #25
 8006930:	d801      	bhi.n	8006936 <_strtol_l.isra.0+0xa6>
 8006932:	3c37      	subs	r4, #55	; 0x37
 8006934:	e7e2      	b.n	80068fc <_strtol_l.isra.0+0x6c>
 8006936:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800693a:	2b19      	cmp	r3, #25
 800693c:	d804      	bhi.n	8006948 <_strtol_l.isra.0+0xb8>
 800693e:	3c57      	subs	r4, #87	; 0x57
 8006940:	e7dc      	b.n	80068fc <_strtol_l.isra.0+0x6c>
 8006942:	f04f 37ff 	mov.w	r7, #4294967295
 8006946:	e7e5      	b.n	8006914 <_strtol_l.isra.0+0x84>
 8006948:	1c7b      	adds	r3, r7, #1
 800694a:	d108      	bne.n	800695e <_strtol_l.isra.0+0xce>
 800694c:	2322      	movs	r3, #34	; 0x22
 800694e:	f8c8 3000 	str.w	r3, [r8]
 8006952:	4608      	mov	r0, r1
 8006954:	f1ba 0f00 	cmp.w	sl, #0
 8006958:	d107      	bne.n	800696a <_strtol_l.isra.0+0xda>
 800695a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695e:	b102      	cbz	r2, 8006962 <_strtol_l.isra.0+0xd2>
 8006960:	4240      	negs	r0, r0
 8006962:	f1ba 0f00 	cmp.w	sl, #0
 8006966:	d0f8      	beq.n	800695a <_strtol_l.isra.0+0xca>
 8006968:	b10f      	cbz	r7, 800696e <_strtol_l.isra.0+0xde>
 800696a:	f105 39ff 	add.w	r9, r5, #4294967295
 800696e:	f8ca 9000 	str.w	r9, [sl]
 8006972:	e7f2      	b.n	800695a <_strtol_l.isra.0+0xca>
 8006974:	2430      	movs	r4, #48	; 0x30
 8006976:	2e00      	cmp	r6, #0
 8006978:	d1af      	bne.n	80068da <_strtol_l.isra.0+0x4a>
 800697a:	2608      	movs	r6, #8
 800697c:	e7ad      	b.n	80068da <_strtol_l.isra.0+0x4a>
 800697e:	2c30      	cmp	r4, #48	; 0x30
 8006980:	d0a3      	beq.n	80068ca <_strtol_l.isra.0+0x3a>
 8006982:	260a      	movs	r6, #10
 8006984:	e7a9      	b.n	80068da <_strtol_l.isra.0+0x4a>
	...

08006988 <_strtol_r>:
 8006988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800698a:	4c06      	ldr	r4, [pc, #24]	; (80069a4 <_strtol_r+0x1c>)
 800698c:	4d06      	ldr	r5, [pc, #24]	; (80069a8 <_strtol_r+0x20>)
 800698e:	6824      	ldr	r4, [r4, #0]
 8006990:	6a24      	ldr	r4, [r4, #32]
 8006992:	2c00      	cmp	r4, #0
 8006994:	bf08      	it	eq
 8006996:	462c      	moveq	r4, r5
 8006998:	9400      	str	r4, [sp, #0]
 800699a:	f7ff ff79 	bl	8006890 <_strtol_l.isra.0>
 800699e:	b003      	add	sp, #12
 80069a0:	bd30      	pop	{r4, r5, pc}
 80069a2:	bf00      	nop
 80069a4:	200000cc 	.word	0x200000cc
 80069a8:	20000130 	.word	0x20000130

080069ac <_strtoul_l.isra.0>:
 80069ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	4680      	mov	r8, r0
 80069b2:	4689      	mov	r9, r1
 80069b4:	4692      	mov	sl, r2
 80069b6:	461e      	mov	r6, r3
 80069b8:	460f      	mov	r7, r1
 80069ba:	463d      	mov	r5, r7
 80069bc:	9808      	ldr	r0, [sp, #32]
 80069be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069c2:	f000 f8db 	bl	8006b7c <__locale_ctype_ptr_l>
 80069c6:	4420      	add	r0, r4
 80069c8:	7843      	ldrb	r3, [r0, #1]
 80069ca:	f013 0308 	ands.w	r3, r3, #8
 80069ce:	d130      	bne.n	8006a32 <_strtoul_l.isra.0+0x86>
 80069d0:	2c2d      	cmp	r4, #45	; 0x2d
 80069d2:	d130      	bne.n	8006a36 <_strtoul_l.isra.0+0x8a>
 80069d4:	787c      	ldrb	r4, [r7, #1]
 80069d6:	1cbd      	adds	r5, r7, #2
 80069d8:	2101      	movs	r1, #1
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d05c      	beq.n	8006a98 <_strtoul_l.isra.0+0xec>
 80069de:	2e10      	cmp	r6, #16
 80069e0:	d109      	bne.n	80069f6 <_strtoul_l.isra.0+0x4a>
 80069e2:	2c30      	cmp	r4, #48	; 0x30
 80069e4:	d107      	bne.n	80069f6 <_strtoul_l.isra.0+0x4a>
 80069e6:	782b      	ldrb	r3, [r5, #0]
 80069e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069ec:	2b58      	cmp	r3, #88	; 0x58
 80069ee:	d14e      	bne.n	8006a8e <_strtoul_l.isra.0+0xe2>
 80069f0:	786c      	ldrb	r4, [r5, #1]
 80069f2:	2610      	movs	r6, #16
 80069f4:	3502      	adds	r5, #2
 80069f6:	f04f 32ff 	mov.w	r2, #4294967295
 80069fa:	2300      	movs	r3, #0
 80069fc:	fbb2 f2f6 	udiv	r2, r2, r6
 8006a00:	fb06 fc02 	mul.w	ip, r6, r2
 8006a04:	ea6f 0c0c 	mvn.w	ip, ip
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006a0e:	2f09      	cmp	r7, #9
 8006a10:	d817      	bhi.n	8006a42 <_strtoul_l.isra.0+0x96>
 8006a12:	463c      	mov	r4, r7
 8006a14:	42a6      	cmp	r6, r4
 8006a16:	dd23      	ble.n	8006a60 <_strtoul_l.isra.0+0xb4>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	db1e      	blt.n	8006a5a <_strtoul_l.isra.0+0xae>
 8006a1c:	4282      	cmp	r2, r0
 8006a1e:	d31c      	bcc.n	8006a5a <_strtoul_l.isra.0+0xae>
 8006a20:	d101      	bne.n	8006a26 <_strtoul_l.isra.0+0x7a>
 8006a22:	45a4      	cmp	ip, r4
 8006a24:	db19      	blt.n	8006a5a <_strtoul_l.isra.0+0xae>
 8006a26:	fb00 4006 	mla	r0, r0, r6, r4
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a30:	e7eb      	b.n	8006a0a <_strtoul_l.isra.0+0x5e>
 8006a32:	462f      	mov	r7, r5
 8006a34:	e7c1      	b.n	80069ba <_strtoul_l.isra.0+0xe>
 8006a36:	2c2b      	cmp	r4, #43	; 0x2b
 8006a38:	bf04      	itt	eq
 8006a3a:	1cbd      	addeq	r5, r7, #2
 8006a3c:	787c      	ldrbeq	r4, [r7, #1]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	e7cb      	b.n	80069da <_strtoul_l.isra.0+0x2e>
 8006a42:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006a46:	2f19      	cmp	r7, #25
 8006a48:	d801      	bhi.n	8006a4e <_strtoul_l.isra.0+0xa2>
 8006a4a:	3c37      	subs	r4, #55	; 0x37
 8006a4c:	e7e2      	b.n	8006a14 <_strtoul_l.isra.0+0x68>
 8006a4e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006a52:	2f19      	cmp	r7, #25
 8006a54:	d804      	bhi.n	8006a60 <_strtoul_l.isra.0+0xb4>
 8006a56:	3c57      	subs	r4, #87	; 0x57
 8006a58:	e7dc      	b.n	8006a14 <_strtoul_l.isra.0+0x68>
 8006a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5e:	e7e5      	b.n	8006a2c <_strtoul_l.isra.0+0x80>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	da09      	bge.n	8006a78 <_strtoul_l.isra.0+0xcc>
 8006a64:	2322      	movs	r3, #34	; 0x22
 8006a66:	f8c8 3000 	str.w	r3, [r8]
 8006a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6e:	f1ba 0f00 	cmp.w	sl, #0
 8006a72:	d107      	bne.n	8006a84 <_strtoul_l.isra.0+0xd8>
 8006a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a78:	b101      	cbz	r1, 8006a7c <_strtoul_l.isra.0+0xd0>
 8006a7a:	4240      	negs	r0, r0
 8006a7c:	f1ba 0f00 	cmp.w	sl, #0
 8006a80:	d0f8      	beq.n	8006a74 <_strtoul_l.isra.0+0xc8>
 8006a82:	b10b      	cbz	r3, 8006a88 <_strtoul_l.isra.0+0xdc>
 8006a84:	f105 39ff 	add.w	r9, r5, #4294967295
 8006a88:	f8ca 9000 	str.w	r9, [sl]
 8006a8c:	e7f2      	b.n	8006a74 <_strtoul_l.isra.0+0xc8>
 8006a8e:	2430      	movs	r4, #48	; 0x30
 8006a90:	2e00      	cmp	r6, #0
 8006a92:	d1b0      	bne.n	80069f6 <_strtoul_l.isra.0+0x4a>
 8006a94:	2608      	movs	r6, #8
 8006a96:	e7ae      	b.n	80069f6 <_strtoul_l.isra.0+0x4a>
 8006a98:	2c30      	cmp	r4, #48	; 0x30
 8006a9a:	d0a4      	beq.n	80069e6 <_strtoul_l.isra.0+0x3a>
 8006a9c:	260a      	movs	r6, #10
 8006a9e:	e7aa      	b.n	80069f6 <_strtoul_l.isra.0+0x4a>

08006aa0 <_strtoul_r>:
 8006aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aa2:	4c06      	ldr	r4, [pc, #24]	; (8006abc <_strtoul_r+0x1c>)
 8006aa4:	4d06      	ldr	r5, [pc, #24]	; (8006ac0 <_strtoul_r+0x20>)
 8006aa6:	6824      	ldr	r4, [r4, #0]
 8006aa8:	6a24      	ldr	r4, [r4, #32]
 8006aaa:	2c00      	cmp	r4, #0
 8006aac:	bf08      	it	eq
 8006aae:	462c      	moveq	r4, r5
 8006ab0:	9400      	str	r4, [sp, #0]
 8006ab2:	f7ff ff7b 	bl	80069ac <_strtoul_l.isra.0>
 8006ab6:	b003      	add	sp, #12
 8006ab8:	bd30      	pop	{r4, r5, pc}
 8006aba:	bf00      	nop
 8006abc:	200000cc 	.word	0x200000cc
 8006ac0:	20000130 	.word	0x20000130

08006ac4 <__submore>:
 8006ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	460c      	mov	r4, r1
 8006aca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	d11d      	bne.n	8006b10 <__submore+0x4c>
 8006ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ad8:	f7ff f850 	bl	8005b7c <_malloc_r>
 8006adc:	b918      	cbnz	r0, 8006ae6 <__submore+0x22>
 8006ade:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aea:	63a3      	str	r3, [r4, #56]	; 0x38
 8006aec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006af0:	6360      	str	r0, [r4, #52]	; 0x34
 8006af2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006af6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006afa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006afe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006b02:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006b06:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006b0a:	6020      	str	r0, [r4, #0]
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	e7e8      	b.n	8006ae2 <__submore+0x1e>
 8006b10:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006b12:	0077      	lsls	r7, r6, #1
 8006b14:	463a      	mov	r2, r7
 8006b16:	f000 f87b 	bl	8006c10 <_realloc_r>
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d0de      	beq.n	8006ade <__submore+0x1a>
 8006b20:	eb00 0806 	add.w	r8, r0, r6
 8006b24:	4601      	mov	r1, r0
 8006b26:	4632      	mov	r2, r6
 8006b28:	4640      	mov	r0, r8
 8006b2a:	f000 f84b 	bl	8006bc4 <memcpy>
 8006b2e:	f8c4 8000 	str.w	r8, [r4]
 8006b32:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006b36:	e7e9      	b.n	8006b0c <__submore+0x48>

08006b38 <_fstat_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4c07      	ldr	r4, [pc, #28]	; (8006b58 <_fstat_r+0x20>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4605      	mov	r5, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	f7fa fb53 	bl	80011f0 <_fstat>
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	d102      	bne.n	8006b54 <_fstat_r+0x1c>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	b103      	cbz	r3, 8006b54 <_fstat_r+0x1c>
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	bd38      	pop	{r3, r4, r5, pc}
 8006b56:	bf00      	nop
 8006b58:	20000484 	.word	0x20000484

08006b5c <_isatty_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4c06      	ldr	r4, [pc, #24]	; (8006b78 <_isatty_r+0x1c>)
 8006b60:	2300      	movs	r3, #0
 8006b62:	4605      	mov	r5, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	f7fa fb52 	bl	8001210 <_isatty>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_isatty_r+0x1a>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_isatty_r+0x1a>
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	20000484 	.word	0x20000484

08006b7c <__locale_ctype_ptr_l>:
 8006b7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006b80:	4770      	bx	lr
	...

08006b84 <__locale_ctype_ptr>:
 8006b84:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <__locale_ctype_ptr+0x14>)
 8006b86:	4a05      	ldr	r2, [pc, #20]	; (8006b9c <__locale_ctype_ptr+0x18>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	bf08      	it	eq
 8006b90:	4613      	moveq	r3, r2
 8006b92:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006b96:	4770      	bx	lr
 8006b98:	200000cc 	.word	0x200000cc
 8006b9c:	20000130 	.word	0x20000130

08006ba0 <__ascii_mbtowc>:
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	b901      	cbnz	r1, 8006ba6 <__ascii_mbtowc+0x6>
 8006ba4:	a901      	add	r1, sp, #4
 8006ba6:	b142      	cbz	r2, 8006bba <__ascii_mbtowc+0x1a>
 8006ba8:	b14b      	cbz	r3, 8006bbe <__ascii_mbtowc+0x1e>
 8006baa:	7813      	ldrb	r3, [r2, #0]
 8006bac:	600b      	str	r3, [r1, #0]
 8006bae:	7812      	ldrb	r2, [r2, #0]
 8006bb0:	1c10      	adds	r0, r2, #0
 8006bb2:	bf18      	it	ne
 8006bb4:	2001      	movne	r0, #1
 8006bb6:	b002      	add	sp, #8
 8006bb8:	4770      	bx	lr
 8006bba:	4610      	mov	r0, r2
 8006bbc:	e7fb      	b.n	8006bb6 <__ascii_mbtowc+0x16>
 8006bbe:	f06f 0001 	mvn.w	r0, #1
 8006bc2:	e7f8      	b.n	8006bb6 <__ascii_mbtowc+0x16>

08006bc4 <memcpy>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	1e43      	subs	r3, r0, #1
 8006bc8:	440a      	add	r2, r1
 8006bca:	4291      	cmp	r1, r2
 8006bcc:	d100      	bne.n	8006bd0 <memcpy+0xc>
 8006bce:	bd10      	pop	{r4, pc}
 8006bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bd8:	e7f7      	b.n	8006bca <memcpy+0x6>

08006bda <memmove>:
 8006bda:	4288      	cmp	r0, r1
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	eb01 0302 	add.w	r3, r1, r2
 8006be2:	d807      	bhi.n	8006bf4 <memmove+0x1a>
 8006be4:	1e42      	subs	r2, r0, #1
 8006be6:	4299      	cmp	r1, r3
 8006be8:	d00a      	beq.n	8006c00 <memmove+0x26>
 8006bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bee:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006bf2:	e7f8      	b.n	8006be6 <memmove+0xc>
 8006bf4:	4283      	cmp	r3, r0
 8006bf6:	d9f5      	bls.n	8006be4 <memmove+0xa>
 8006bf8:	1881      	adds	r1, r0, r2
 8006bfa:	1ad2      	subs	r2, r2, r3
 8006bfc:	42d3      	cmn	r3, r2
 8006bfe:	d100      	bne.n	8006c02 <memmove+0x28>
 8006c00:	bd10      	pop	{r4, pc}
 8006c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c06:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c0a:	e7f7      	b.n	8006bfc <memmove+0x22>

08006c0c <__malloc_lock>:
 8006c0c:	4770      	bx	lr

08006c0e <__malloc_unlock>:
 8006c0e:	4770      	bx	lr

08006c10 <_realloc_r>:
 8006c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c12:	4607      	mov	r7, r0
 8006c14:	4614      	mov	r4, r2
 8006c16:	460e      	mov	r6, r1
 8006c18:	b921      	cbnz	r1, 8006c24 <_realloc_r+0x14>
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c20:	f7fe bfac 	b.w	8005b7c <_malloc_r>
 8006c24:	b922      	cbnz	r2, 8006c30 <_realloc_r+0x20>
 8006c26:	f7fe ff5b 	bl	8005ae0 <_free_r>
 8006c2a:	4625      	mov	r5, r4
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c30:	f000 f821 	bl	8006c76 <_malloc_usable_size_r>
 8006c34:	42a0      	cmp	r0, r4
 8006c36:	d20f      	bcs.n	8006c58 <_realloc_r+0x48>
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f7fe ff9e 	bl	8005b7c <_malloc_r>
 8006c40:	4605      	mov	r5, r0
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d0f2      	beq.n	8006c2c <_realloc_r+0x1c>
 8006c46:	4631      	mov	r1, r6
 8006c48:	4622      	mov	r2, r4
 8006c4a:	f7ff ffbb 	bl	8006bc4 <memcpy>
 8006c4e:	4631      	mov	r1, r6
 8006c50:	4638      	mov	r0, r7
 8006c52:	f7fe ff45 	bl	8005ae0 <_free_r>
 8006c56:	e7e9      	b.n	8006c2c <_realloc_r+0x1c>
 8006c58:	4635      	mov	r5, r6
 8006c5a:	e7e7      	b.n	8006c2c <_realloc_r+0x1c>

08006c5c <__ascii_wctomb>:
 8006c5c:	b149      	cbz	r1, 8006c72 <__ascii_wctomb+0x16>
 8006c5e:	2aff      	cmp	r2, #255	; 0xff
 8006c60:	bf85      	ittet	hi
 8006c62:	238a      	movhi	r3, #138	; 0x8a
 8006c64:	6003      	strhi	r3, [r0, #0]
 8006c66:	700a      	strbls	r2, [r1, #0]
 8006c68:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c6c:	bf98      	it	ls
 8006c6e:	2001      	movls	r0, #1
 8006c70:	4770      	bx	lr
 8006c72:	4608      	mov	r0, r1
 8006c74:	4770      	bx	lr

08006c76 <_malloc_usable_size_r>:
 8006c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c7a:	1f18      	subs	r0, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bfbc      	itt	lt
 8006c80:	580b      	ldrlt	r3, [r1, r0]
 8006c82:	18c0      	addlt	r0, r0, r3
 8006c84:	4770      	bx	lr
	...

08006c88 <_init>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	bf00      	nop
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr

08006c94 <_fini>:
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	bf00      	nop
 8006c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9a:	bc08      	pop	{r3}
 8006c9c:	469e      	mov	lr, r3
 8006c9e:	4770      	bx	lr
